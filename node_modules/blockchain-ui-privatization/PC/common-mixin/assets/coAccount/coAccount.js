import {
  myStorage, fixD, fixRate, fixInput, colorMap, imgMap,
} from '@/utils';


export default {
  name: 'page-coAccount',
  data() {
    return {
      showFlag: false,
      tabelInfoData: [], // 列表元素数据
      detailsData: {}, // 账户详情
      tabelLoading: true,
      imgMap,
      colorMap,
      exchangeHeader: `background: url(${imgMap.assetsco})`,
      transferSide: '1',
      transferValue: '',
      dialogConfirmLoading: false,
    };
  },
  filters: {
    fixDFn(v, that) {
      return fixD(v, that.detailsData.showPrecision);
      // return fixD(v, that.showPrecision);
    },
    fixRateFn(v, that) {
      if (that.market
        && that.market.rate
        && that.detailsData.quoteSymbol) {
        const { rate } = that.market;
        const { quoteSymbol } = that.detailsData;
        return fixRate(v, rate, quoteSymbol);
      }
      return '--';
    },
  },
  watch: {
    transferValue(v) {
      this.transferValue = fixInput(v, this.detailsData.showPrecision);
    },
  },
  computed: {
    // 弹窗是否可点击
    dialogConfirmDisabled() {
      if (this.dialogConfirmLoading) { return false; }
      let flag = true;
      if (parseFloat(this.transferValue) > 0 && !this.transferError) {
        flag = false;
      }
      return flag;
    },
    transferError() {
      let flag = false;
      const { walletBalance, margin } = this.detailsData;
      // 限制最大数量
      if (this.transferSide === '1') {
        if (parseFloat(this.transferValue) > parseFloat(walletBalance)) {
          flag = true;
        }
      } else if (this.transferSide === '2') {
        if (parseFloat(this.transferValue) > parseFloat(margin)) {
          flag = true;
        }
      }
      return flag;
    },
    // input框警示文案
    transferWarningText() {
      const text = this.$t('assets.otcAccount.can'); // 可转
      const { walletBalance, canUseBalance, quoteSymbol } = this.detailsData;
      const num = this.transferSide === '1'
        ? fixD(walletBalance, this.detailsData.showPrecision)
        : fixD(canUseBalance, this.detailsData.showPrecision);
      return `${text} ${num} ${quoteSymbol}`;
    },
    side() {
      const ex = this.$t('assets.otcAccount.exchangeAccount');
      const co = this.$t('assets.coAccount.coAccount');
      let from = '';
      let to = '';
      if (this.transferSide === '1') {
        from = ex;
        to = co;
      } else {
        from = co;
        to = ex;
      }
      return {
        from,
        to,
      };
    },
    // 表格数据
    tableData() {
      const arr = [];
      this.tabelInfoData.forEach((item) => {
        let type = '';
        switch (item.contractType) {
          case 0:
            type = this.$t('assets.coAccount.type1'); // 永续
            break;
          case 1:
            type = this.$t('assets.coAccount.type2'); // 当周
            break;
          case 2:
            type = this.$t('assets.coAccount.type3'); // 次周
            break;
          case 3:
            type = this.$t('assets.coAccount.type4'); // 月度
            break;
          case 4:
            type = this.$t('assets.coAccount.type5'); // 季度
            break;
          default:
            type = '';
        }
        let time = '';
        if (item.contractType) {
          const t = item.settleTime.split(' ')[0].split('-');
          time = t[1] + t[2];
        }
        arr.push({
          id: JSON.stringify(item),
          data: [
            [
              {
                text: item.contractSeries,
                subContent: `${type} · ${time} (${item.leverageLevel}X)`,
              },
            ],
            [
              {
                text: item.side === 'BUY' ? `+${item.volume}` : `-${item.volume}`,
                classes: item.side === 'BUY' ? 'u-1-cl' : 'u-4-cl',
              },
            ],
            `${fixD(item.realisedAmount, item.showPrecision)} ${item.quoteSymbol}`,
            `${fixD(item.unrealisedAmount, item.showPrecision)} ${item.quoteSymbol}`,
            [
              {
                type: 'icon', // 'link' ' button' ,'html', 'label', 'icon' ‘str’
                iconSvg: '<svg class="icon icon-16" aria-hidden="true"><use xlink:href="#icon-c_1"></use></svg>',
                iconClass: [''],
                eventType: 'goTrade',
              },
            ],
          ],
        });
      });
      return arr;
    },
    linkurl() {
      if (this.$store.state.baseData.publicInfo) {
        return this.$store.state.baseData.publicInfo.url;
      }
      return {};
    },
    tradeLinkUrl() {
      if (process.env.NODE_ENV === 'development') {
        return '/co/trade';
      }
      if (this.$store.state.baseData && this.$store.state.baseData.publicInfo) {
        return `${this.linkurl.coUrl}/trade`;
      }
      return '';
    },
    // 表格title
    columns() {
      return [
        { title: this.$t('assets.coAccount.list1'), width: '20%' }, // 合约
        { title: this.$t('assets.coAccount.list2'), width: '20%' }, // 仓位数量(张)
        { title: this.$t('assets.coAccount.list3'), width: '25%' }, // 已实现盈亏
        { title: this.$t('assets.coAccount.list4'), width: '25%' }, // 未实现盈亏
        { title: this.$t('assets.coAccount.list5'), width: '10%' }, // 操作
      ];
    },
    // market 接口
    market() { return this.$store.state.baseData.market; },
  },
  methods: {
    init() {
      this.getDetailData();
      this.axios({
        url: 'hold_contract_list',
        hostType: 'co',
      }).then((data) => {
        if (data.code.toString() === '0') {
          this.tabelLoading = false;
          this.tabelInfoData = data.data;
        }
      });
    },
    getDetailData() {
      this.axios({
        url: 'account_balance',
        hostType: 'co',
      }).then((data) => {
        if (data.code.toString() === '0') {
          const [arr] = data.data;
          this.detailsData = arr;
        } else {
          this.$bus.$emit('tip', { text: data.msg, type: 'error' });
        }
      });
    },
    dialogClose() {
      this.showFlag = false;
    },
    dialogConfirm() {
      this.dialogConfirmLoading = true;
      const { contractAccountType, walletAccountType } = this.detailsData;
      this.axios({
        url: 'capital_transfer',
        hostType: 'co',
        params: {
          fromType: this.transferSide === '1' ? walletAccountType : contractAccountType,
          toType: this.transferSide === '1' ? contractAccountType : walletAccountType,
          amount: Number(this.transferValue),
          bond: this.detailsData.quoteSymbol,
        },
        method: 'post',
      }).then((data) => {
        this.dialogConfirmLoading = false;
        if (data.code.toString() === '0') {
          this.$bus.$emit('tip', { text: data.msg, type: 'success' });
          this.transferSide = '1'; // 重置划转方向
          this.transferValue = ''; // 重置划转数量
          this.showFlag = false;
          this.getDetailData();
        } else {
          this.$bus.$emit('tip', { text: data.msg, type: 'error' });
        }
      });
    },
    clickDialog() {
      this.showFlag = true;
    },
    inputLineChange(value, name) {
      this[name] = value;
    },
    // 修改划转方向
    setTransferSide() {
      if (this.transferSide === '1') { this.transferSide = '2'; } else if (this.transferSide === '2') { this.transferSide = '1'; }
      this.transferValue = ''; // 重置划转数量
    },
    tableClick(type, data) {
      if (type === 'goTrade') {
        const obj = JSON.parse(data);
        myStorage.set('coMarkTitle', obj.contractSeries);
        myStorage.set('coNowSymbol', obj.symbol);
        window.location.href = this.tradeLinkUrl;
      }
    },
    allTransfer() {
      const { walletBalance, canUseBalance } = this.detailsData;
      if (this.transferSide === '1') {
        if (!walletBalance) { return; }
        this.transferValue = walletBalance.toString();
      } else if (this.transferSide === '2') {
        if (!canUseBalance === '--') { return; }
        this.transferValue = canUseBalance.toString();
      }
    },
  },
};
