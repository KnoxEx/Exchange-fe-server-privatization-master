{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/Downloads/BlockChain-ui-privatization/PC/vuex/tradeOrderList.js","dependencies":[{"path":"/Users/h/Downloads/BlockChain-ui-privatization/PC/vuex/tradeOrderList.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from '@/api/http/axios';\nexport default {\n  state: {\n    nowOrderData: {\n      count: 0,\n      orderList: []\n    },\n    historyData: {\n      count: 0,\n      orderList: []\n    },\n    subTableData: {\n      count: 0,\n      orderList: []\n    }\n  },\n  actions: {\n    getOrderListData: function getOrderListData(_ref, data) {\n      var commit = _ref.commit;\n      var headers = {};\n\n      if (data.auto) {\n        headers['exchange-auto'] = '1';\n      }\n\n      axios({\n        url: data.url,\n        method: 'post',\n        headers: headers,\n        params: data.params\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          var rep = rs;\n          rep.data.orderType = data.orderType;\n          commit('ORDER_LIST_DATA', rep.data); // if (data.orderType === 1) {\n          //   commit('ORDER_LIST_DATA', rs.data);\n          // } else {\n          //   commit('HISTORY_DATA', rs.data);\n          // }\n        }\n      });\n    },\n    getSubTableData: function getSubTableData(_ref2, data) {\n      var commit = _ref2.commit;\n      axios({\n        url: data.url,\n        method: 'post',\n        params: data.params\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          var rep = rs;\n          rep.data.id = data.params.order_id;\n          commit('SUB_TABLE_DATA', rep.data);\n        }\n      });\n    }\n  },\n  mutations: {\n    ORDER_LIST_DATA: function ORDER_LIST_DATA(state, data) {\n      state.nowOrderData = data;\n    },\n    HISTORY_DATA: function HISTORY_DATA(state, data) {\n      state.historyData = data;\n    },\n    SUB_TABLE_DATA: function SUB_TABLE_DATA(state, data) {\n      state.subTableData = data;\n    }\n  }\n};",{"version":3,"sources":["/Users/h/Downloads/BlockChain-ui-privatization/PC/vuex/tradeOrderList.js"],"names":["axios","state","nowOrderData","count","orderList","historyData","subTableData","actions","getOrderListData","data","commit","headers","auto","url","method","params","then","rs","code","rep","orderType","getSubTableData","id","order_id","mutations","ORDER_LIST_DATA","HISTORY_DATA","SUB_TABLE_DATA"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,SAAS,EAAE;AAFC,KADT;AAKLC,IAAAA,WAAW,EAAE;AACXF,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,SAAS,EAAE;AAFA,KALR;AASLE,IAAAA,YAAY,EAAE;AACZH,MAAAA,KAAK,EAAE,CADK;AAEZC,MAAAA,SAAS,EAAE;AAFC;AATT,GADM;AAebG,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBADO,kCACsBC,IADtB,EAC4B;AAAA,UAAhBC,MAAgB,QAAhBA,MAAgB;AACjC,UAAMC,OAAO,GAAG,EAAhB;;AACA,UAAIF,IAAI,CAACG,IAAT,EAAe;AACbD,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,GAA3B;AACD;;AACDX,MAAAA,KAAK,CAAC;AACJa,QAAAA,GAAG,EAAEJ,IAAI,CAACI,GADN;AAEJC,QAAAA,MAAM,EAAE,MAFJ;AAGJH,QAAAA,OAAO,EAAPA,OAHI;AAIJI,QAAAA,MAAM,EAAEN,IAAI,CAACM;AAJT,OAAD,CAAL,CAKGC,IALH,CAKQ,UAACC,EAAD,EAAQ;AACd,YAAIA,EAAE,CAACC,IAAH,KAAY,GAAhB,EAAqB;AACnB,cAAMC,GAAG,GAAGF,EAAZ;AACAE,UAAAA,GAAG,CAACV,IAAJ,CAASW,SAAT,GAAqBX,IAAI,CAACW,SAA1B;AACAV,UAAAA,MAAM,CAAC,iBAAD,EAAoBS,GAAG,CAACV,IAAxB,CAAN,CAHmB,CAInB;AACA;AACA;AACA;AACA;AACD;AACF,OAhBD;AAiBD,KAvBM;AAwBPY,IAAAA,eAxBO,kCAwBqBZ,IAxBrB,EAwB2B;AAAA,UAAhBC,MAAgB,SAAhBA,MAAgB;AAChCV,MAAAA,KAAK,CAAC;AACJa,QAAAA,GAAG,EAAEJ,IAAI,CAACI,GADN;AAEJC,QAAAA,MAAM,EAAE,MAFJ;AAGJC,QAAAA,MAAM,EAAEN,IAAI,CAACM;AAHT,OAAD,CAAL,CAIGC,IAJH,CAIQ,UAACC,EAAD,EAAQ;AACd,YAAIA,EAAE,CAACC,IAAH,KAAY,GAAhB,EAAqB;AACnB,cAAMC,GAAG,GAAGF,EAAZ;AACAE,UAAAA,GAAG,CAACV,IAAJ,CAASa,EAAT,GAAcb,IAAI,CAACM,MAAL,CAAYQ,QAA1B;AACAb,UAAAA,MAAM,CAAC,gBAAD,EAAmBS,GAAG,CAACV,IAAvB,CAAN;AACD;AACF,OAVD;AAWD;AApCM,GAfI;AAqDbe,EAAAA,SAAS,EAAE;AACTC,IAAAA,eADS,2BACOxB,KADP,EACcQ,IADd,EACoB;AAC3BR,MAAAA,KAAK,CAACC,YAAN,GAAqBO,IAArB;AACD,KAHQ;AAITiB,IAAAA,YAJS,wBAIIzB,KAJJ,EAIWQ,IAJX,EAIiB;AACxBR,MAAAA,KAAK,CAACI,WAAN,GAAoBI,IAApB;AACD,KANQ;AAOTkB,IAAAA,cAPS,0BAOM1B,KAPN,EAOaQ,IAPb,EAOmB;AAC1BR,MAAAA,KAAK,CAACK,YAAN,GAAqBG,IAArB;AACD;AATQ;AArDE,CAAf","sourcesContent":["import axios from '@/api/http/axios';\r\n\r\nexport default {\r\n  state: {\r\n    nowOrderData: {\r\n      count: 0,\r\n      orderList: [],\r\n    },\r\n    historyData: {\r\n      count: 0,\r\n      orderList: [],\r\n    },\r\n    subTableData: {\r\n      count: 0,\r\n      orderList: [],\r\n    },\r\n  },\r\n  actions: {\r\n    getOrderListData({ commit }, data) {\r\n      const headers = {};\r\n      if (data.auto) {\r\n        headers['exchange-auto'] = '1';\r\n      }\r\n      axios({\r\n        url: data.url,\r\n        method: 'post',\r\n        headers,\r\n        params: data.params,\r\n      }).then((rs) => {\r\n        if (rs.code === '0') {\r\n          const rep = rs;\r\n          rep.data.orderType = data.orderType;\r\n          commit('ORDER_LIST_DATA', rep.data);\r\n          // if (data.orderType === 1) {\r\n          //   commit('ORDER_LIST_DATA', rs.data);\r\n          // } else {\r\n          //   commit('HISTORY_DATA', rs.data);\r\n          // }\r\n        }\r\n      });\r\n    },\r\n    getSubTableData({ commit }, data) {\r\n      axios({\r\n        url: data.url,\r\n        method: 'post',\r\n        params: data.params,\r\n      }).then((rs) => {\r\n        if (rs.code === '0') {\r\n          const rep = rs;\r\n          rep.data.id = data.params.order_id;\r\n          commit('SUB_TABLE_DATA', rep.data);\r\n        }\r\n      });\r\n    },\r\n  },\r\n  mutations: {\r\n    ORDER_LIST_DATA(state, data) {\r\n      state.nowOrderData = data;\r\n    },\r\n    HISTORY_DATA(state, data) {\r\n      state.historyData = data;\r\n    },\r\n    SUB_TABLE_DATA(state, data) {\r\n      state.subTableData = data;\r\n    },\r\n  },\r\n};\r\n"]}]}