{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/modules/trade/tradingView/tradingView.js","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/modules/trade/tradingView/tradingView.js","mtime":1642344823221},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.reflect.construct\";\nimport _classCallCheck from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _slicedToArray from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { myStorage, getCookie, colorMap, getHex, imgMap, getCoinShowName, logImg } from '@/utils';\nexport default {\n  name: 'tradingView',\n  data: function data() {\n    return {\n      TvBoxHeight: '455px',\n      // 颜色主题\n      theme: 'theme_default',\n      // 图标类型 TV：1 Echart: 2\n      chartType: 1,\n      symbolCurrent: myStorage.get('sSymbolName'),\n      MywebSocket: null,\n      lastTimeS: myStorage.get('lastTimeS'),\n      language: getCookie('lan') ? getCookie('lan').split('_')[0] : '',\n      lTime: null,\n      fTime: 0,\n      isCreateWidget: false,\n      isshowLoading: true,\n      chartTypeHove: null,\n      isfullTv: false,\n      isfullTvsd: null,\n      // 市场横向滚动参数\n      slidePosition: 0,\n      maxPosition: 0,\n      lanArry: ['ar', 'zh_TW', 'zh', 'cs', 'da_DK', 'nl_NL', 'en', 'et_EE', 'fr', 'de', 'el', 'he_IL', 'hu_HU', 'id_ID', 'it', 'ja', 'ko', 'ms_MY', 'no', 'fa', 'pl', 'pt', 'ro', 'ru', 'sk_SK', 'es', 'sv', 'th', 'tr', 'vi'],\n      // 合约全部币对\n      coSymbolAll: null\n    };\n  },\n  props: {\n    moduleType: {\n      type: String,\n      default: 'ex'\n    }\n  },\n  computed: {\n    publicInfo: function publicInfo() {\n      return this.$store.state.baseData.publicInfo || {};\n    },\n    klineLogo: function klineLogo() {\n      return imgMap.tradingViewLogo || '';\n    },\n    templateLayoutType: function templateLayoutType() {\n      return this.$store.state.baseData.templateLayoutType;\n    },\n    baseTimeArry: function baseTimeArry() {\n      try {\n        return this.$store.state.baseData.market.klineScale;\n      } catch (w) {\n        return ['1min', '5min', '15min', '30min', '60min', '4h', '1day', '1week', '1month'];\n      }\n    },\n    // 当前货币对名称数据\n    symbolName: function symbolName() {\n      if (this.symbolCurrent) {\n        if (this.moduleType === 'co') {\n          var _symbolArr = this.symbolCurrent.toLowerCase().split('/');\n\n          return {\n            base: this.symbolCurrent.split('/')[0],\n            count: this.symbolCurrent.split('/')[1],\n            name: this.symbolCurrent,\n            symbol: _symbolArr[1] ? _symbolArr[0] + _symbolArr[1] : _symbolArr[0]\n          };\n        }\n\n        var symbolArr = this.symbolCurrent.toLowerCase().split('/');\n        var showSymbol = getCoinShowName(this.symbolCurrent, this.symbolAll);\n        var showSymbolArr = showSymbol.toLowerCase().split('/');\n        return {\n          base: this.symbolCurrent.split('/')[0],\n          count: this.symbolCurrent.split('/')[1],\n          name: this.symbolCurrent,\n          symbol: symbolArr[0] + symbolArr[1],\n          showSymbol: showSymbolArr[0] + showSymbolArr[1]\n        };\n      }\n\n      return {\n        base: null,\n        // 基础货币\n        count: null,\n        // 计价货币\n        name: null,\n        // 大写 带/\n        symbol: null // 小写\n\n      };\n    },\n    timeArry: function timeArry() {\n      var a = [];\n\n      if (this.baseTimeArry.length) {\n        this.baseTimeArry.forEach(function (it) {\n          var t = [];\n\n          if (it.indexOf('min') > -1) {\n            t.push(it, parseFloat(it));\n          } else if (it.toLowerCase().indexOf('h') > -1 && it.indexOf('month') < 0) {\n            t.push(it, parseFloat(it) * 60);\n          } else if (it.indexOf('day') > -1) {\n            t.push(it, parseFloat(it) * 24 * 60);\n          } else if (it.indexOf('week') > -1) {\n            t.push(it, parseFloat(it) * 7 * 24 * 60);\n          } else if (it.indexOf('month') > -1) {\n            t.push(it, parseFloat(it) * 30 * 24 * 60);\n          }\n\n          a.push(t);\n        });\n      }\n\n      return a;\n    },\n    // 币币and杠杆 全部货币对\n    symbolAll: function symbolAll() {\n      return this.$store.state.baseData.symbolAll;\n    },\n    themeTV: function themeTV() {\n      var theme = getCookie('cusSkin') || getCookie('defSkin') || '1';\n      var stheme = theme.toString() === '1' ? 'Dark' : 'Light';\n      return stheme;\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      // 杠杆当前选中的币对\n      if (this.moduleType === 'lever') {\n        this.symbolCurrent = myStorage.get('leverSymbolName');\n      } // 合约当前选中的币对\n\n\n      if (this.moduleType === 'co') {\n        this.TvBoxHeight = '710px';\n        this.symbolCurrent = myStorage.get('coNowSymbol');\n      } // 监听TV 是否是全屏状态\n\n\n      document.removeEventListener('fullscreenchange', this.quitfullTv);\n      document.addEventListener('fullscreenchange', this.quitfullTv);\n      this.$bus.$on('SYMBOL_LIST_ALL', function (data) {\n        _this.coSymbolAll = data;\n      }); // 设置国际版TV的高度\n\n      this.setTvBoxHeight();\n      this.$bus.$on('WINFOW_ON_RESIIZE', function () {\n        var _this$$refs = _this.$refs,\n            _this$$refs$topMenuBo = _this$$refs.topMenuBox,\n            topMenuBox = _this$$refs$topMenuBo === void 0 ? null : _this$$refs$topMenuBo,\n            _this$$refs$topMenuBa = _this$$refs.topMenuBar,\n            topMenuBar = _this$$refs$topMenuBa === void 0 ? null : _this$$refs$topMenuBa; // 监听TV 是否是全屏状态\n\n        _this.quitfullTv(); // 设置国际版TV的高度\n\n\n        _this.setTvBoxHeight(); // 市场 个数的超出宽度\n\n\n        if (topMenuBox && topMenuBar) {\n          _this.maxPosition = topMenuBox.offsetWidth - topMenuBar.offsetWidth;\n        }\n\n        _this.slideMarket('left');\n      });\n\n      if (this.lanArry.indexOf(this.language) <= -1) {\n        this.language = 'en';\n      }\n\n      if (getCookie('lan') === 'el_GR') {\n        this.language = 'zh_TW';\n      }\n\n      if (!myStorage.get('lastTimeS')) {\n        myStorage.set('lastTimeS', '30min');\n        this.lastTimeS = '30min';\n      } // 监听 WebSocket 链接成功\n\n\n      this.$bus.$on('WEBSOCKET_ON_OPEN', function (val) {\n        _this.MywebSocket = val;\n\n        if (_this.MywebSocket) {\n          _this.isCreateWidget = false;\n\n          _this.initTradingView();\n        }\n      }); // 获取 当前选中的货币对\n\n      this.$bus.$on('SYMBOL_CURRENT', function (val) {\n        if (_this.symbolCurrent !== val) {\n          if (_this.chartType === 1) {\n            _this.isshowLoading = true;\n          }\n\n          _this.symbolCurrent = val;\n\n          if (window.tvWidget) {\n            var showSymbol = _this.symbolName.showSymbol;\n\n            if (_this.moduleType === 'co') {\n              showSymbol = _this.symbolName.symbol;\n            }\n\n            window.tvWidget.setSymbol(showSymbol, _this.getTimeMin(true, _this.lastTimeS), function () {\n              _this.widget.chart().executeActionById('chartReset');\n            });\n          }\n        }\n      });\n      this.$bus.$on('HIDE_LOADING', function () {\n        _this.isshowLoading = false;\n      }); // 市场 个数的超出宽度\n\n      this.maxPosition = this.$refs.topMenuBox.offsetWidth - this.$refs.topMenuBar.offsetWidth;\n    },\n    setTvBoxHeight: function setTvBoxHeight() {\n      if (this.templateLayoutType === '2') {\n        var bodyH = document.body.clientHeight;\n\n        if (bodyH < 800) {\n          bodyH = 800;\n        }\n\n        if (this.moduleType === 'co') {\n          this.TvBoxHeight = '100%';\n        } else {\n          this.TvBoxHeight = \"\".concat(bodyH - 475, \"px\");\n        }\n      }\n    },\n    enter: function enter(index) {\n      this.chartTypeHove = index;\n    },\n    leave: function leave() {\n      this.chartTypeHove = null;\n    },\n    chartTypeShow: function chartTypeShow(num) {\n      if (this.chartType === num || this.chartTypeHove === num) {\n        return true;\n      }\n\n      return false;\n    },\n    initTradingView: function initTradingView() {\n      this.createWidget();\n    },\n    // tadingView 生命周期函数\n    udf_datafeed: function udf_datafeed() {\n      var self = this;\n      return {\n        onReady: function onReady(callback) {\n          var cnf = {\n            supported_resolutions: self.getTimeMin(false, 1),\n            // 数组\n            supports_group_request: false,\n            supports_marks: true,\n            supports_search: false,\n            supports_timescale_marks: false\n          };\n          setTimeout(function () {\n            callback(cnf);\n          }, 0);\n        },\n        // 切换币对后\n        resolveSymbol: function resolveSymbol(symbolName, onSymbolResolvedCallback) {\n          setTimeout(function () {\n            onSymbolResolvedCallback({\n              name: symbolName,\n              'exchange-traded': '',\n              'exchange-listed': '',\n              minmov: 1,\n              minmov2: 0,\n              pointvalue: 1,\n              session: '0000-2400:1234567',\n              has_intraday: true,\n              has_no_volume: false,\n              volume_precision: 1,\n              description: symbolName.toUpperCase(),\n              type: 'bitcoin',\n              supported_resolutions: self.getTimeMin(false, 1),\n              pricescale: self.fixDepthNumber(self.symbolName.name),\n              ticker: symbolName.toUpperCase(),\n              timezone: window.jstz.determine().name()\n            });\n          }, 0);\n        },\n        // 获取深度数据（k线无需请求深度）\n        calculateHistoryDepth: function calculateHistoryDepth() {\n          return undefined;\n        },\n        // tradingview 获取历史数据\n        getBars: function getBars(symbolInfo, resolution, from, to, onHistoryCallback, onErrorCallback, firstDataRequest) {\n          if (firstDataRequest) {\n            self.lTime = false;\n          }\n\n          var lastTimeS = self.lastTimeS === 'Line' ? '1min' : self.lastTimeS;\n\n          if (self.MywebSocket) {\n            self.$bus.$emit('WEBSOCKET_KLINE_SEND', {\n              type: 'req',\n              symbol: self.symbolName.symbol,\n              lastTimeS: lastTimeS,\n              lTime: self.lTime,\n              number: 50\n            });\n          }\n\n          self.$bus.$off('KLINE_DATA_REQ');\n          self.$bus.$on('KLINE_DATA_REQ', function (data) {\n            var channelArr = data.channel.split('_');\n            var Ntime = channelArr[channelArr.length - 1];\n\n            var _data$channel$split = data.channel.split('_'),\n                _data$channel$split2 = _slicedToArray(_data$channel$split, 2),\n                symbolType = _data$channel$split2[1];\n\n            if (self.moduleType === 'co') {\n              var _data$channel$split3 = data.channel.split('_'),\n                  _data$channel$split4 = _slicedToArray(_data$channel$split3, 3),\n                  symbol = _data$channel$split4[1],\n                  type = _data$channel$split4[2];\n\n              symbolType = \"\".concat(symbol, \"_\").concat(type);\n            }\n\n            if (data.event_rep === 'rep' && symbolType === self.symbolName.symbol && lastTimeS === Ntime) {\n              self.fTime = 0;\n              var klData = data.data;\n              var arrData = [];\n\n              if (data.data && data.data.length) {\n                klData.forEach(function (item) {\n                  arrData.push(self.setData(item));\n                });\n                self.fTime = arrData[arrData.length - 1].time;\n\n                if (self.lTime === klData[0].id) {\n                  onHistoryCallback([], {\n                    noData: true\n                  });\n                  logImg({\n                    host: window.location.host,\n                    type: 'onHistoryCallback',\n                    path: window.location.href,\n                    ds: 'onHistoryCallback noDate',\n                    data: {\n                      symbol: self.symbolCurrent\n                    },\n                    t: new Date().getTime()\n                  });\n                } else {\n                  self.lTime = klData[0].id;\n                  onHistoryCallback(arrData);\n                }\n              } else {\n                if (self.secend < 3) {\n                  self.udf_datafeed().getBars(symbolInfo, resolution, from, to, onHistoryCallback, onErrorCallback, firstDataRequest);\n                  self.secend += 1;\n                  return;\n                }\n\n                if (!self.lTime) {\n                  logImg({\n                    host: window.location.host,\n                    type: 'tradingView',\n                    path: window.location.href,\n                    ds: 'first onHistoryCallback noData',\n                    data: data,\n                    t: new Date().getTime()\n                  });\n                }\n\n                onHistoryCallback([], {\n                  noData: true\n                });\n              }\n            }\n          });\n\n          if (!self.isCreateWidget) {\n            self.widget_onChartReady();\n            self.widget.chart().setChartType(1);\n          }\n        },\n        // tradingview 获取实时数据\n        subscribeBars: function subscribeBars(symbolInfo, resolution, onRealtimeCallback) {\n          self.isshowLoading = false;\n          var lastTimeS = self.lastTimeS === 'Line' ? '1min' : self.lastTimeS;\n\n          if (self.MywebSocket) {\n            self.$bus.$emit('WEBSOCKET_KLINE_SEND', {\n              type: 'sub',\n              symbol: self.symbolName.symbol,\n              lastTimeS: lastTimeS\n            });\n          }\n\n          self.$bus.$off('KLINE_DATA_SUB');\n          self.$bus.$on('KLINE_DATA_SUB', function (data) {\n            var channelArr = data.channel.split('_');\n            var Ntime = channelArr[channelArr.length - 1];\n            var symbolType;\n\n            if (self.moduleType === 'co') {\n              var _data$channel$split5 = data.channel.split('_'),\n                  _data$channel$split6 = _slicedToArray(_data$channel$split5, 3),\n                  symbol = _data$channel$split6[1],\n                  type = _data$channel$split6[2];\n\n              symbolType = \"\".concat(symbol, \"_\").concat(type);\n            } else {\n              var _data$channel$split7 = data.channel.split('_');\n\n              var _data$channel$split8 = _slicedToArray(_data$channel$split7, 2);\n\n              symbolType = _data$channel$split8[1];\n            }\n\n            if (data.tick && symbolType === self.symbolName.symbol && Ntime === lastTimeS) {\n              var tickData = self.setData(data.tick);\n\n              if (self.fTime < tickData.time) {\n                onRealtimeCallback(tickData);\n              }\n            }\n          });\n        },\n        // tradingview 取消订阅上一 币对 / 刻度\n        unsubscribeBars: function unsubscribeBars(subscriberUID) {\n          var arr = subscriberUID.split('_');\n          var symbol = arr[0].toLowerCase();\n          var lastTimeS = self.getTimeMin(true, parseFloat(arr[1]));\n\n          if (self.moduleType === 'co') {\n            symbol = arr[0].toLowerCase() + arr[1].toLowerCase();\n            lastTimeS = self.getTimeMin(true, parseFloat(arr[2]));\n          }\n\n          self.$bus.$emit('WEBSOCKET_KLINE_SEND', {\n            type: 'unsub',\n            symbol: symbol,\n            lastTimeS: lastTimeS\n          });\n        }\n      };\n    },\n    // 创建 TradingView\n    createWidget: function createWidget() {\n      var F = /*#__PURE__*/function (_window$TradingView$w) {\n        _inherits(F, _window$TradingView$w);\n\n        var _super = _createSuper(F);\n\n        function F() {\n          _classCallCheck(this, F);\n\n          return _super.apply(this, arguments);\n        }\n\n        return F;\n      }(window.TradingView.widget);\n\n      window.tvWidget = new F({\n        debug: false,\n        autosize: true,\n        timezone: window.jstz.determine().name(),\n        symbol: this.symbolName.showSymbol,\n        interval: this.getTimeMin(true, this.lastTimeS),\n        container_id: 'tv_chart_container',\n        // DOM id\n        datafeed: this.udf_datafeed(),\n        // 配置 生命周期\n        library_path: '/static/charting_library/',\n        // 静态文件路径\n        locale: this.language,\n        // 语言\n        disabled_features: ['header_symbol_search', 'timeframes_toolbar', 'volume_force_overlay', 'header_saveload', 'header_resolutions', 'header_compare', 'header_screenshot', 'header_undo_redo', 'adaptive_logo', 'header_fullscreen_button', 'timezone_menu', 'scales_context_menu', 'legend_context_menu', 'symbol_search_hot_key' // 'use_localstorage_for_settings',\n        // 'show_chart_property_page',\n        // 'timeframes_toolbar',\n        // 'symbol_info',\n        // 'header_widget_dom_node',\n        // 'header_indicators',\n        // 'header_widget',\n        // 'pane_context_menu',\n        // 'header_fullscreen_button',\n        // 'display_market_status',\n        // 'header_chart_type',\n        ],\n        enabled_features: [// 'study_templates',\n        'hide_left_toolbar_by_default'],\n        charts_storage_url: \"\".concat(window.location.protocol, \"//saveload.tradingview.com\"),\n        charts_storage_api_version: '1.1',\n        client_id: 'tradingview.com',\n        user_id: 'public_user',\n        toolbar_bg: getHex(colorMap['a-6-bg']),\n        // 工具栏底色\n        theme: this.themeTV,\n        studies_overrides: {\n          'volume.volume.color.0': getHex(colorMap['u-4-bg']),\n          'volume.volume.color.1': getHex(colorMap['u-1-bg']),\n          'volume.volume.transparency': 50\n        },\n        overrides: {\n          // k线的颜色\n          volumePaneSize: 'small',\n          // 成交量大小\n          'scalesProperties.fontSize': 12,\n          // 图标区域xy轴 字体大小\n          'scalesProperties.textColor': getHex(colorMap['b-3-cl']),\n          // 图标区域xy轴 文字颜色\n          'scalesProperties.lineColor': getHex(colorMap['a-3-bd']),\n          // 图标区域xy轴颜色\n          'paneProperties.background': getHex(colorMap['a-6-bg']),\n          // 图标区域 背景色\n          'paneProperties.vertGridProperties.color': getHex(colorMap['a-7-bg']),\n          // 图标区域 表格纵轴颜色\n          'paneProperties.horzGridProperties.color': getHex(colorMap['a-7-bg']),\n          // 图标区域 表格橫轴颜色\n          'paneProperties.crossHairProperties.color': getHex(colorMap['b-2-bg']),\n          // 图标区域 鼠标十字线颜色\n          'paneProperties.legendProperties.showLegend': true,\n          // 折叠信息\n          // 柱状图颜色设置\n          'mainSeriesProperties.candleStyle.upColor': getHex(colorMap['u-1-cl']),\n          'mainSeriesProperties.candleStyle.downColor': getHex(colorMap['u-4-cl']),\n          'mainSeriesProperties.candleStyle.drawWick': true,\n          'mainSeriesProperties.candleStyle.drawBorder': true,\n          'mainSeriesProperties.candleStyle.borderColor': '',\n          'mainSeriesProperties.candleStyle.borderUpColor': getHex(colorMap['u-1-cl']),\n          'mainSeriesProperties.candleStyle.borderDownColor': getHex(colorMap['u-4-cl']),\n          'mainSeriesProperties.candleStyle.wickUpColor': getHex(colorMap['u-1-cl']),\n          'mainSeriesProperties.candleStyle.wickDownColor': getHex(colorMap['u-4-cl']),\n          'mainSeriesProperties.candleStyle.barColorsOnPrevClose': !1,\n          // 分时图颜色设置\n          // 分时背景色渐变 上半部分\n          'mainSeriesProperties.areaStyle.color1': colorMap['a-15-bg'],\n          // 分时背景色渐变 下半部分\n          'mainSeriesProperties.areaStyle.color2': colorMap['a-17-bg'],\n          'mainSeriesProperties.areaStyle.linecolor': getHex(colorMap['a-12-bd']),\n          'mainSeriesProperties.areaStyle.linestyle': 0,\n          'mainSeriesProperties.areaStyle.linewidth': 2,\n          'mainSeriesProperties.areaStyle.priceSource': 'close'\n        }\n      });\n      this.widget = window.tvWidget;\n    },\n    // 格式化时间刻度\n    getTimeMin: function getTimeMin(only, type) {\n      if (only) {\n        var _t = null;\n\n        if (this.timeArry.length) {\n          this.timeArry.forEach(function (item) {\n            var s = item.indexOf(type);\n\n            if (s > -1) {\n              _t = s === 0 ? item[1] : item[0];\n            }\n          });\n        }\n\n        return _t;\n      }\n\n      var t = [];\n      this.timeArry.forEach(function (item) {\n        t.push(item[type]);\n      });\n      return t;\n    },\n    // 精度计算\n    fixDepthNumber: function fixDepthNumber(symbolName) {\n      var n;\n\n      if (this.moduleType === 'co') {\n        n = this.coSymbolAll[symbolName].pricePrecision;\n      } else {\n        n = this.symbolAll[symbolName].price;\n      }\n\n      var b = Math.pow(10, n);\n      return parseFloat(b.toString());\n    },\n    widget_onChartReady: function widget_onChartReady() {\n      var _this2 = this;\n\n      this.isCreateWidget = true;\n      this.creatMA(); // ===== 默认样式皮肤修改 =====\n\n      var style = document.createElement('style');\n      /* eslint-disable */\n\n      var clas = document.createTextNode(\".apply-common-tooltip,.wrap-1GG7GnNO- svg{fill:\" + colorMap[\"b-3-cl\"] + \"!important;color:\" + colorMap[\"b-3-cl\"] + \"!important;cursor: pointer;}.textColor .wrap-18oKCBRc- div,.wrap-18oKCBRc- .apply-common-tooltip:hover,.wrap-1GG7GnNO- svg:hover,.button-263WXsg--.isActive-2mI1-NUL- .icon-1Y-3MM9F-,.button-263WXsg-- .icon-1Y-3MM9F-,.button-263WXsg-- .icon-1Y-3MM9F-:hover{fill:\" + colorMap[\"a-1-cl\"] + \"!important;color:\" + colorMap[\"a-1-cl\"] + \"!important;}.container-3_8ayT2Q- .background-Q1Fcmxly-{fill: \" + colorMap[\"b-2-cl\"] + \"; stroke: \" + colorMap[\"b-2-cl\"] + \";}.container-3_8ayT2Q- .arrow-WcYWFXUn-, html.theme-dark .container-3_8ayT2Q- .arrow-WcYWFXUn-{stroke: \" + colorMap[\"b-1-cl\"] + \";}.feature-no-touch .container-3_8ayT2Q-:hover .background-Q1Fcmxly-{fill: \" + colorMap[\"a-1-cl\"] + \";stroke: \" + colorMap[\"a-1-cl\"] + \";}\");\n      /* eslint-enable */\n\n      style.append(clas);\n      this.widget.headerReady().then(function () {\n        _this2.widget.createButton().append(style);\n      });\n    },\n    creatMA: function creatMA() {\n      // ===== 创建移动均线 =====\n      this.widget.chart().createStudy('Moving Average', false, false, [5], null, {\n        'plot.color': '#F5CB89'\n      });\n      this.widget.chart().createStudy('Moving Average', false, false, [10], null, {\n        'plot.color': '#5FCFBF'\n      });\n      this.widget.chart().createStudy('Moving Average', false, false, [30], null, {\n        'plot.color': '#DD89F5'\n      });\n    },\n    setMAShow: function setMAShow() {\n      // ===== 显示移动均线 =====\n      var c = this.widget.chart().getAllStudies();\n      this.widget.chart().setEntityVisibility(c[0].id, true);\n      this.widget.chart().setEntityVisibility(c[1].id, true);\n      this.widget.chart().setEntityVisibility(c[2].id, true);\n    },\n    setMAHide: function setMAHide() {\n      // ===== 隐藏移动均线 =====\n      var c = this.widget.chart().getAllStudies();\n      this.widget.chart().setEntityVisibility(c[0].id, false);\n      this.widget.chart().setEntityVisibility(c[1].id, false);\n      this.widget.chart().setEntityVisibility(c[2].id, false);\n    },\n    timeClike: function timeClike(v) {\n      var _this3 = this;\n\n      if (v !== 'Line' && v !== '1min' && v !== this.lastTimeS) {\n        this.isshowLoading = true;\n      }\n\n      if (v !== this.lastTimeS) {\n        this.lastTimeS = v;\n\n        if (v === 'Line') {\n          myStorage.set('lastTimeS', '1min');\n        } else {\n          myStorage.set('lastTimeS', v);\n        }\n\n        this.$bus.$emit('LAST-TIMES', v);\n\n        if (this.isCreateWidget) {\n          var resolution = this.widget.chart().resolution();\n\n          if (v === 'Line') {\n            if (resolution !== '1') {\n              this.widget.chart().setResolution('1', function () {\n                _this3.widget.chart().setChartType(3); // 折线图\n\n              });\n            } else if (resolution === '1') {\n              this.widget.chart().setChartType(3);\n            }\n\n            this.setMAHide();\n          } else {\n            if (resolution === '1' && v === '1min') {\n              this.widget.chart().setChartType(1); // 蜡烛图\n            } else {\n              var timeS = this.getTimeMin(true, v);\n              this.widget.chart().setResolution(timeS.toString(), function () {\n                _this3.widget.chart().setChartType(1);\n\n                _this3.widget.chart().executeActionById('chartReset');\n              });\n            }\n\n            this.setMAShow();\n          }\n        }\n      }\n    },\n    // 格式化数据\n    setData: function setData(obj) {\n      return {\n        time: obj.id * 1000,\n        close: obj.close,\n        open: obj.open,\n        high: obj.high,\n        low: obj.low,\n        volume: obj.vol\n      };\n    },\n    switchChartType: function switchChartType(type) {\n      var _this4 = this;\n\n      if (type === 2) {\n        this.isshowLoading = false;\n      }\n\n      this.chartType = type;\n      setTimeout(function () {\n        var _this4$$refs = _this4.$refs,\n            _this4$$refs$topMenuB = _this4$$refs.topMenuBox,\n            topMenuBox = _this4$$refs$topMenuB === void 0 ? null : _this4$$refs$topMenuB,\n            _this4$$refs$topMenuB2 = _this4$$refs.topMenuBar,\n            topMenuBar = _this4$$refs$topMenuB2 === void 0 ? null : _this4$$refs$topMenuB2;\n        _this4.maxPosition = topMenuBox.offsetWidth - topMenuBar.offsetWidth;\n      }, 500);\n    },\n    quit: function quit(e) {\n      this.isfullTv = false;\n\n      if (this.isfullTv) {\n        var key = e.keyCode;\n\n        if (key === 27) {\n          this.isfullTv = false;\n        }\n      }\n    },\n    fullTv: function fullTv() {\n      if (!this.isfullTv) {\n        this.isfullTv = true;\n        var element = this.$refs.tv_chart_container;\n\n        if (element.requestFullscreen) {\n          element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n          element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n          element.webkitRequestFullscreen();\n        } else if (element.msRequestFullscreen) {\n          element.msRequestFullscreen();\n        }\n      } else {\n        this.isfullTv = false;\n\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        }\n      }\n    },\n    quitfullTv: function quitfullTv() {\n      // 监听TV 是否是全屏状态\n      if (this.isfullTv) {\n        this.isfullTv = window.fullScreen || document.webkitIsFullScreen || document.msFullscreenElement;\n      }\n    },\n    // 设置时间刻度的滚动\n    slideMarket: function slideMarket(type) {\n      var position = parseFloat(this.slidePosition);\n\n      if (this.$refs.topMenuBar) {\n        if (type === 'left') {\n          position += this.$refs.topMenuBar.offsetWidth / 2;\n\n          if (position > 0) {\n            position = 0;\n          }\n        } else {\n          position -= this.$refs.topMenuBar.offsetWidth / 2;\n\n          if (position < -this.maxPosition) {\n            position = -this.maxPosition;\n          }\n        }\n\n        this.slidePosition = \"\".concat(position, \"px\");\n      }\n    }\n  }\n};",null]}