{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/trade/echarts/echarts.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/trade/echarts/echarts.js","mtime":1637388379759},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { colorMap, getHex } from '@/utils';\nexport default {\n  name: 'chartsDepth',\n  components: {},\n  data: function data() {\n    return {\n      isshowLoading: true,\n      myEcharts: null,\n      echartsData: {\n        minval: 0,\n        maxval: 0,\n        buysArr: [],\n        asksArr: []\n      },\n      styleObject: {\n        height: '450px'\n      }\n    };\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      this.initEachart();\n      this.$bus.$on('ECHARTS_DATA', function (data) {\n        if (data) {\n          _this.echartsData = data;\n\n          _this.eachart();\n        } else {\n          _this.echartsData = {\n            minval: 0,\n            maxval: 0,\n            yminval: 0,\n            ymaxval: 0,\n            buysArr: [],\n            asksArr: []\n          };\n\n          _this.eachart();\n        }\n      }); // 获取 当前选中的货币对\n\n      this.$bus.$on('SYMBOL_CURRENT', function () {\n        _this.echartsData = {\n          minval: 0,\n          maxval: 0,\n          yminval: 0,\n          ymaxval: 0,\n          buysArr: [],\n          asksArr: []\n        };\n\n        _this.eachart();\n      });\n      this.$bus.$on('WINFOW_ON_RESIIZE', function () {\n        _this.myEcharts.resize();\n      });\n    },\n    eachart: function eachart() {\n      this.myEcharts.resize();\n      this.isshowLoading = false;\n      var series = [];\n      series = [_objectSpread(_objectSpread({}, this.seriesTypes.buy), {}, {\n        data: this.echartsData.buysArr,\n        type: 'line'\n      }), _objectSpread(_objectSpread({}, this.seriesTypes.ask), {}, {\n        data: this.echartsData.asksArr,\n        type: 'line'\n      })];\n      this.myEcharts.setOption({\n        xAxis: [{\n          min: this.echartsData.minval,\n          max: this.echartsData.maxval\n        }],\n        // yAxis: [\n        //   {\n        //     min: this.echartsData.yminval,\n        //     max: this.echartsData.ymaxval,\n        //   },\n        // ],\n        series: series\n      });\n    },\n    initEachart: function initEachart() {\n      // 基于准备好的dom，初始化echarts实例\n      this.myEcharts = window.echarts.init(document.getElementById('myEcharts')); // 绘制图表\n\n      this.myEcharts.setOption({\n        animation: false,\n        tooltip: {\n          trigger: 'axis',\n          // 不限时弹层\n          axisPointer: {\n            // 显示随手指移动的刻度线\n            type: 'cross',\n            crossStyle: {\n              width: 2,\n              color: getHex(colorMap['b-2-cl']),\n              type: 'cross'\n            }\n          }\n        },\n        // dataZoom: [\n        //   {\n        //     type: 'slider',\n        //     show: true,\n        //     filterMode: 'none', // 缩放区域外（在这里作用是避免数据中断）\n        //     xAxisIndex: [0],\n        //     start: 100,\n        //     end: 0,\n        //   },\n        // ],\n        grid: {\n          show: true,\n          borderWidth: 0,\n          borderColor: getHex(colorMap['a-3-bd']),\n          containLabel: true,\n          left: 5,\n          top: 67,\n          right: 5,\n          bottom: 0\n        },\n        xAxis: {\n          type: 'value',\n          axisPointer: {\n            show: true,\n            type: 'line',\n            lineStyle: {\n              color: getHex(colorMap['b-2-cl']),\n              width: 2,\n              type: 'dotted'\n            }\n          },\n          axisLine: {\n            show: true,\n            lineStyle: {\n              width: 1,\n              color: getHex(colorMap['a-3-bd'])\n            }\n          },\n          axisTick: {\n            lineStyle: {\n              color: getHex(colorMap['a-3-bd'])\n            }\n          },\n          axisLabel: {\n            color: getHex(colorMap['b-2-cl']),\n            showMaxLabel: false,\n            showMinLabel: false\n          },\n          splitLine: {\n            lineStyle: {\n              width: 1,\n              color: getHex(colorMap['a-3-bd'])\n            }\n          }\n        },\n        yAxis: [{\n          min: 'dataMin',\n          type: 'value',\n          axisLine: {\n            show: true,\n            lineStyle: {\n              width: 1,\n              color: getHex(colorMap['a-3-bd'])\n            }\n          },\n          axisTick: {\n            lineStyle: {\n              color: getHex(colorMap['a-3-bd'])\n            }\n          },\n          axisLabel: {\n            color: getHex(colorMap['b-2-cl'])\n          },\n          splitLine: {\n            lineStyle: {\n              width: 1,\n              color: getHex(colorMap['a-3-bd'])\n            }\n          }\n        }]\n      });\n    }\n  },\n  computed: {\n    seriesTypes: function seriesTypes() {\n      var buy = {\n        type: 'line',\n        symbol: 'none',\n        itemStyle: {\n          normal: {\n            color: colorMap['a-18-bg']\n          }\n        },\n        lineStyle: {\n          normal: {\n            color: colorMap['a-18-bg'],\n            width: 2\n          }\n        },\n        areaStyle: {\n          normal: {\n            color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: colorMap['a-18-bg']\n            }, {\n              offset: 1,\n              color: colorMap['u-2-bg']\n            }])\n          }\n        },\n        data: []\n      };\n      var ask = {\n        type: 'line',\n        symbol: 'none',\n        lineStyle: {\n          normal: {\n            color: colorMap['a-19-bg'],\n            width: 2\n          }\n        },\n        itemStyle: {\n          normal: {\n            color: colorMap['a-19-bg']\n          }\n        },\n        areaStyle: {\n          normal: {\n            color: new window.echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: colorMap['a-19-bg']\n            }, {\n              offset: 1,\n              color: colorMap['u-5-bg']\n            }])\n          }\n        },\n        data: []\n      };\n\n      var autoBuy = _objectSpread(_objectSpread({}, buy), {}, {\n        lineStyle: {\n          normal: {\n            width: 0\n          }\n        }\n      });\n\n      var autoAsk = _objectSpread(_objectSpread({}, ask), {}, {\n        lineStyle: {\n          normal: {\n            width: 0\n          }\n        }\n      });\n\n      return {\n        buy: buy,\n        ask: ask,\n        autoBuy: autoBuy,\n        autoAsk: autoAsk\n      };\n    }\n  }\n};",null]}