{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/calendar/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/calendar/Calendar.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n\r\nimport timeUtil from './calendar';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      myDate: [],\r\n      list: [],\r\n      historyChose: [],\r\n      dateTop: '',\r\n    };\r\n  },\r\n  props: {\r\n    markDate: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    markDateMore: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    textTop: {\r\n      type: Array,\r\n      default: () => ['M', 'T', 'W', 'T', 'F', 'S', 'S'],\r\n    },\r\n    sundayStart: {\r\n      type: Boolean,\r\n      default: () => false,\r\n    },\r\n    agoDayHide: { type: String, default: '0' },\r\n    futureDayHide: { type: String, default: '2554387200' },\r\n    defaultDate: { type: String, default: '0' },\r\n    defaultShowDate: {\r\n      type: Number,\r\n    },\r\n  },\r\n  created() {\r\n    this.intStart();\r\n    if (this.defaultShowDate) {\r\n      this.myDate = new Date(this.defaultShowDate);\r\n    } else {\r\n      this.myDate = new Date();\r\n    }\r\n  },\r\n  methods: {\r\n    intStart() {\r\n      timeUtil.sundayStart = this.sundayStart;\r\n    },\r\n    setClass(data) {\r\n      const obj = {};\r\n      obj[data.markClassName] = data.markClassName;\r\n      return obj;\r\n    },\r\n    clickDay(item) {\r\n      if (item.otherMonth === 'nowMonth' && !item.dayHide) {\r\n        this.getList(this.myDate, item.date);\r\n      }\r\n      if (item.otherMonth !== 'nowMonth') {\r\n        if (item.otherMonth === 'preMonth') {\r\n          this.PreMonth(item.date);\r\n        } else {\r\n          this.NextMonth(item.date);\r\n        }\r\n      }\r\n    },\r\n    ChoseMonth(date, isChosedDay = true) {\r\n      const ndate = timeUtil.dateFormat(date);\r\n      this.myDate = new Date(ndate);\r\n      this.$emit('changeMonth', timeUtil.dateFormat(this.myDate));\r\n      if (isChosedDay) {\r\n        this.getList(this.myDate, date, isChosedDay);\r\n      } else {\r\n        this.getList(this.myDate);\r\n      }\r\n    },\r\n    PreMonth(date, isChosedDay = true) {\r\n      const ndate = timeUtil.dateFormat(date);\r\n      this.myDate = timeUtil.getOtherMonth(this.myDate, 'preMonth');\r\n      this.$emit('changeMonth', timeUtil.dateFormat(this.myDate));\r\n      if (isChosedDay) {\r\n        this.getList(this.myDate, ndate, isChosedDay);\r\n      } else {\r\n        this.getList(this.myDate);\r\n      }\r\n    },\r\n    NextMonth(date, isChosedDay = true) {\r\n      const ndate = timeUtil.dateFormat(date);\r\n      this.myDate = timeUtil.getOtherMonth(this.myDate, 'nextMonth');\r\n      this.$emit('changeMonth', timeUtil.dateFormat(this.myDate));\r\n      if (isChosedDay) {\r\n        this.getList(this.myDate, ndate, isChosedDay);\r\n      } else {\r\n        this.getList(this.myDate);\r\n      }\r\n    },\r\n    forMatArgs() {\r\n      let NmarkDate = this.markDate;\r\n      let NmarkDateMore = this.markDateMore;\r\n      NmarkDate = NmarkDate.map((k) => timeUtil.dateFormat(k));\r\n      NmarkDateMore = NmarkDateMore.map((k) => {\r\n        const obj = {};\r\n        obj.date = timeUtil.dateFormat(k.date);\r\n        return obj;\r\n      });\r\n      return [NmarkDate, NmarkDateMore];\r\n    },\r\n    getList(date, chooseDay) {\r\n      const [markDate, markDateMore] = this.forMatArgs();\r\n      this.dateTop = `\r\n        ${date.getFullYear()}\r\n        ${this.$t('common.year')}\r\n        ${date.getMonth() + 1}\r\n        ${this.$t('common.mouth')}`;\r\n      const arr = timeUtil.getMonthList(this.myDate);\r\n      for (let i = 0; i < arr.length; i += 1) {\r\n        let markClassName = '';\r\n        const k = arr[i];\r\n        k.chooseDay = false;\r\n        const nowTime = k.date;\r\n        const t = new Date(nowTime).getTime() / 1000;\r\n        // 看每一天的class\r\n        markDateMore.forEach((c) => {\r\n          if (c.date === nowTime) {\r\n            markClassName = c.className || '';\r\n          }\r\n        });\r\n        // 标记选中某些天 设置class\r\n        k.markClassName = markClassName;\r\n        k.isMark = markDate.indexOf(nowTime) > -1;\r\n        // 无法选中某天\r\n        k.dayHide = t < this.agoDayHide || t > this.futureDayHide;\r\n        if (k.isToday) {\r\n          this.$emit('isToday', nowTime);\r\n        }\r\n        const flag = !k.dayHide && k.otherMonth === 'nowMonth';\r\n\r\n        if (chooseDay && chooseDay === nowTime && flag) {\r\n          this.$emit('choseDay', nowTime);\r\n          this.historyChose.push(nowTime);\r\n          k.chooseDay = true;\r\n        } else if (\r\n          this.historyChose[this.historyChose.length - 1] === nowTime\r\n          && !chooseDay\r\n          && flag\r\n        ) {\r\n          k.chooseDay = true;\r\n        }\r\n      }\r\n      this.list = arr;\r\n    },\r\n  },\r\n  mounted() {\r\n    // 为了能让日历默认选择一个 新增defaultDate字段\r\n    this.getList(this.myDate, this.defaultDate.replace(/-/g, '/'));\r\n  },\r\n  watch: {\r\n    defaultShowDate(val) {\r\n      if (val) {\r\n        this.myDate = new Date(this.defaultShowDate);\r\n        this.getList(this.myDate, this.defaultDate.replace(/-/g, '/'));\r\n      }\r\n    },\r\n    markDate: {\r\n      handler() {\r\n        this.getList(this.myDate);\r\n      },\r\n      deep: true,\r\n    },\r\n    markDateMore: {\r\n      handler() {\r\n        this.getList(this.myDate);\r\n      },\r\n      deep: true,\r\n    },\r\n    agoDayHide: {\r\n      handler() {\r\n        this.getList(this.myDate);\r\n      },\r\n      deep: true,\r\n    },\r\n    futureDayHide: {\r\n      handler() {\r\n        this.getList(this.myDate);\r\n      },\r\n      deep: true,\r\n    },\r\n    sundayStart: {\r\n      handler() {\r\n        this.intStart();\r\n        this.getList(this.myDate);\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n};\r\n",null]}