{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/login/login.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/login/login.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _toConsumableArray from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { myStorage, setCookie, imgMap, colorMap } from '@/utils';\nexport default {\n  name: 'page-login',\n  data: function data() {\n    return {\n      imgMap: imgMap,\n      colorMap: colorMap,\n      userValue: '',\n      // 账号value\n      passValue: '',\n      // 密码value\n      checkValue: '',\n      // 验证码value\n      checkType: '0',\n      // 验证码类型( '1'-谷歌 '2'-手机 '3'-邮箱 )\n      verifyObj: {},\n      // 滑动返回对象\n      verifyFlag: false,\n      // 滑动是否通过\n      dialogFlag: false,\n      // 弹窗flag\n      submitLoading: false,\n      // input框\n      userToken: null,\n      // 服务端第一次校验返回\n      dialogConfirmLoading: false,\n      // 用于弹窗按钮loading效果\n      selectValue: 'google',\n      addHoverclass: 0,\n      singPassDialogFlag: false,\n      thirdListShow: false,\n      loginMode: null\n    };\n  },\n  watch: {\n    checkValue: function checkValue(newV) {\n      var _this = this;\n\n      if (newV.length === 6) {\n        this.$nextTick(function () {\n          _this.$bus.$emit('button-click', 'dialogConfirm');\n        });\n      }\n    },\n    loginFlag: function loginFlag(v) {\n      if (v) {\n        this.goHome();\n      }\n    },\n    // 第三方登录信息\n    thirdPartyLoginData: function thirdPartyLoginData(data) {\n      if (data !== null) {\n        this.loading = false;\n\n        if (data.text === 'success') {\n          // 打开 singPass 弹框\n          this.singPassDialogFlag = true;\n        } else {\n          this.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      }\n    }\n  },\n  computed: {\n    // 登录按钮文案\n    loginButtonText: function loginButtonText() {\n      if (this.loginMode === 'SingPass') {\n        return this.$t('singPassLogin.mainText13'); // '登录并关联SingPass账号';\n      }\n\n      if (this.singPassCode && this.singpassState && this.singpassSource === 'reg') {\n        return this.$t('singPassLogin.mainText13'); // '登录并关联SingPass账号';\n      }\n\n      return this.$t('login.login');\n    },\n    loginPageTitle: function loginPageTitle() {\n      if (this.loginMode === 'SingPass') {\n        return this.$t('singPassLogin.mainText2'); // 'SingPass第三方登录';\n      }\n\n      if (this.singPassCode && this.singpassState && this.singpassSource === 'reg') {\n        return this.$t('singPassLogin.mainText2'); // 'SingPass第三方登录';\n      }\n\n      return this.$t('login.WelcomeToLogin');\n    },\n    // user框 PromptText\n    isInternationTem: function isInternationTem() {\n      return this.$store.state.baseData.templateLayoutType === '2';\n    },\n    userInputPrompt: function userInputPrompt() {\n      var str = '';\n\n      switch (this.loginRegistType) {\n        case '1':\n          str = this.$t('login.phoneOrEmail');\n          break;\n\n        case '2':\n          str = this.$t('resetPass.phone');\n          break;\n\n        case '3':\n          str = this.$t('resetPass.email');\n          break;\n\n        default:\n          str = this.$t('login.phoneOrEmail');\n      }\n\n      return str;\n    },\n    // 开启验证方式\n    loginRegistType: function loginRegistType() {\n      // const { publicInfo } = this.$store.state.baseData;\n      var str = '1'; // 1 手机/邮箱， 2 仅手机， 3 仅邮箱\n      // if (publicInfo && publicInfo.switch && publicInfo.switch.login_regist_type) {\n      //   str = publicInfo.switch.login_regist_type.toString();\n      // }\n\n      return str;\n    },\n    selectOptions: function selectOptions() {\n      var arr = [{\n        value: this.$t('login.GoogleAuthenticator'),\n        code: 'google'\n      }];\n\n      if (this.loginRegistType === '2') {\n        arr.push({\n          value: this.$t('login.MobilePhoneVerification'),\n          code: 'phone'\n        });\n      } else if (this.loginRegistType === '3') {\n        arr.push({\n          value: this.$t('login.MailboxValidation'),\n          code: 'email'\n        });\n      } else {\n        arr.push({\n          value: this.$t('login.MobilePhoneVerification'),\n          code: 'phone'\n        });\n        arr.push({\n          value: this.$t('login.MailboxValidation'),\n          code: 'email'\n        });\n      }\n\n      return arr;\n    },\n    loginFlag: function loginFlag() {\n      var _this$$store$state$ba = this.$store.state.baseData,\n          isLogin = _this$$store$state$ba.isLogin,\n          userInfoIsReady = _this$$store$state$ba.userInfoIsReady;\n\n      if (isLogin && userInfoIsReady) {\n        return true;\n      }\n\n      return false;\n    },\n    checkText: function checkText() {\n      switch (this.checkType) {\n        case '1':\n          // 请输入6位数字谷歌验证码\n          return this.$t('login.googleCodeError');\n\n        case '2':\n          // 请输入6位数字手机验证码\n          return this.$t('login.phoneCodeError');\n\n        case '3':\n          // 请输入6位数字邮箱验证码\n          return this.$t('login.emailCodeError');\n\n        default:\n          // 请输入6位数字验证码\n          return this.$t('login.codeError');\n      }\n    },\n    serverName: function serverName() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var code = '';\n\n      if (publicInfo && publicInfo.msg && publicInfo.msg.company_name) {\n        code = publicInfo.msg.company_name;\n      }\n\n      return code;\n    },\n    // userValue 是否复合正则验证\n    userFlag: function userFlag() {\n      var _this$$store$state$re = this.$store.state.regExp,\n          phone = _this$$store$state$re.phone,\n          email = _this$$store$state$re.email;\n\n      if (this.loginRegistType === '2') {\n        if (phone.test(this.userValue)) {\n          return true;\n        }\n      } else if (this.loginRegistType === '3') {\n        if (email.test(this.userValue)) {\n          return true;\n        }\n      } else {\n        if (phone.test(this.userValue)) {\n          return true;\n        }\n\n        if (email.test(this.userValue)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    // passValue 是否复合正则验证\n    passFlag: function passFlag() {\n      return this.$store.state.regExp.passWord.test(this.passValue);\n    },\n    // checkValue 是否复合正则验证\n    checkFlag: function checkFlag() {\n      return this.$store.state.regExp.verification.test(this.checkValue);\n    },\n    // 二次验证弹层 text展示文字 havacode是否有获取验证码\n    checkOptions: function checkOptions() {\n      switch (this.checkType) {\n        case '1':\n          // 谷歌验证码\n          return {\n            text: this.$t('login.googleCode'),\n            haveCode: false\n          };\n\n        case '2':\n          // 手机验证码\n          return {\n            text: this.$t('login.phoneCode'),\n            haveCode: true\n          };\n\n        case '3':\n          // 邮箱验证码\n          return {\n            text: this.$t('login.emailCode'),\n            haveCode: true\n          };\n\n        default:\n          // 验证码\n          return {\n            text: this.$t('login.code'),\n            haveCode: false\n          };\n      }\n    },\n    // user框是否为错误状态\n    userErrorFlag: function userErrorFlag() {\n      if (this.userValue.length !== 0 && !this.userFlag) return true;\n      return false;\n    },\n    // pass框是否为错误状态\n    passErrorFlag: function passErrorFlag() {\n      if (this.passValue.length !== 0 && !this.passFlag) return true;\n      return false;\n    },\n    // 验证框是否为错误\n    checkErrorFlag: function checkErrorFlag() {\n      if (this.checkValue.length !== 0 && !this.checkFlag) return true;\n      return false;\n    },\n    // 登录button 禁用状态\n    submitDisabled: function submitDisabled() {\n      var userFlag = this.userFlag,\n          passFlag = this.passFlag,\n          verifyFlag = this.verifyFlag,\n          submitLoading = this.submitLoading;\n\n      if (userFlag && passFlag && verifyFlag || submitLoading) {\n        return false;\n      }\n\n      return true;\n    },\n    dialogConfirmDisabled: function dialogConfirmDisabled() {\n      if (!this.checkFlag && !this.dialogConfirmLoading) return true;\n      return false;\n    },\n    // 是否开启验证方式\n    openLoginVerificationMode: function openLoginVerificationMode() {\n      // const { publicInfo } = this.$store.state.baseData;\n      // if (publicInfo && publicInfo.switch\n      // && publicInfo.switch.openLoginVerificationMode === '1') {\n      //   return true;\n      // }\n      return false;\n    },\n    publicInfo: function publicInfo() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      return publicInfo;\n    },\n    companyName: function companyName() {\n      if (this.publicInfo && this.publicInfo.msg) {\n        return this.publicInfo.msg.company_name;\n      }\n\n      return '';\n    },\n    thirdList: function thirdList() {\n      if (this.publicInfo && this.publicInfo.thirdInfo && this.publicInfo.thirdInfo.length > 0) {\n        var arr = [];\n        this.publicInfo.thirdInfo.forEach(function (item) {\n          arr.push({\n            value: item.name,\n            img: item.logoAddress,\n            code: item.pcThirdUrl,\n            sort: item.sort,\n            pcJump: item.pcJump\n          });\n        });\n        var newArr = this.sortKey(arr, 'sort');\n        return newArr;\n      }\n\n      return null;\n    },\n    thirdPartyLoginData: function thirdPartyLoginData() {\n      return this.$store.state.baseData.thirdPartyLoginData;\n    },\n    singPassCode: function singPassCode() {\n      return this.$route.query.code;\n    },\n    singpassState: function singpassState() {\n      return this.$route.query.state;\n    },\n    singpassSource: function singpassSource() {\n      return this.$route.query.source;\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      if (this.loginFlag) {\n        this.goHome();\n      }\n\n      this.$bus.$off('emailCode');\n      this.$bus.$on('emailCode', function (data) {\n        var newData = JSON.parse(JSON.stringify(data));\n        newData.callback = undefined;\n\n        _this2.axios({\n          url: 'v4/common/emailValidCode',\n          method: 'post',\n          header: {},\n          params: newData\n        }).then(function (info) {\n          data.callback(info);\n        }).catch(function () {});\n      });\n      this.$bus.$off('phoneCode');\n      this.$bus.$on('phoneCode', function (data) {\n        var newData = JSON.parse(JSON.stringify(data));\n        newData.callback = undefined;\n\n        _this2.axios({\n          url: 'v4/common/smsValidCode',\n          method: 'post',\n          header: {},\n          params: newData\n        }).then(function (info) {\n          data.callback(info);\n        }).catch(function () {// console.log(info);\n        });\n      });\n      this.$bus.$on('closeSingPassDialog', function () {\n        _this2.singPassDialogFlag = false;\n      });\n      this.$bus.$on('setLoginMode', function (info) {\n        _this2.loginMode = info;\n      });\n    },\n    sortKey: function sortKey(array, key) {\n      return array.sort(function (a, b) {\n        var x = a[key];\n        var y = b[key];\n        return x - y; // 从小到大排序\n      });\n    },\n    changeThird: function changeThird(item) {\n      if (item.pcJump === '1') {\n        window.open(item.code, '_blank');\n      }\n    },\n    addHover: function addHover(num) {\n      this.addHoverclass = num;\n      this.thirdListShow = true;\n    },\n    removeHover: function removeHover() {\n      this.addHoverclass = null; // setTimeout(() => {\n      //   this.thirdListShow = false;\n      // });\n    },\n    goUrl: function goUrl(url) {\n      // 如果是第三方登录 跳转到注册也是第三方注册\n      if (url === '/register' && this.singPassCode && this.singpassState) {\n        this.$router.push(\"\".concat(url, \"?singPassCode=\").concat(this.singPassCode, \"&singPassState=\").concat(this.singpassState));\n      } else {\n        this.$router.push(url);\n      }\n    },\n    goHome: function goHome() {\n      window.location.href = '/';\n    },\n    // input onchanges事件\n    inputChanges: function inputChanges(value, name) {\n      this[name] = value;\n    },\n    selectChange: function selectChange(item) {\n      this.selectValue = item.code;\n    },\n    submit: function submit() {\n      var _this3 = this;\n\n      var params = _objectSpread(_objectSpread({}, this.verifyObj), {\n        mobileNumber: this.userValue,\n        loginPword: this.passValue,\n        nc: null // type: this.selectValue,\n\n      });\n\n      this.submitLoading = true;\n      this.axios({\n        url: 'user/login_in',\n        headers: {},\n        params: params,\n        method: 'post'\n      }).then(function (data) {\n        _this3.verifyObj.nc.reset(); // 滑动重置\n\n\n        _this3.verifyFlag = false; // 验证通过置未未通过\n\n        _this3.submitLoading = false; // button按钮loading取消\n\n        if (data.code.toString() === '0') {\n          _this3.dialogFlag = true; // 打开弹窗\n\n          _this3.checkType = data.data.type; // '1'-谷歌 '2'-手机 '3'-邮箱\n\n          _this3.userToken = data.data.token;\n\n          _this3.$nextTick(function () {\n            // 验证码input获取焦点\n            _this3.$bus.$emit('inputLine-focus', 'checkValue'); // 触发发送验证码button\n\n\n            _this3.$bus.$emit('button-click', 'loginGetcodeBtn');\n          });\n        } else {\n          _this3.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 极验滑动通过\n    verifyCallBack: function verifyCallBack(parameter) {\n      this.verifyObj = parameter;\n      this.verifyFlag = true;\n    },\n    // 二次校验\n    dialogConfirm: function dialogConfirm() {\n      var _this4 = this;\n\n      this.dialogConfirmLoading = true;\n      var params = {\n        token: this.userToken,\n        authCode: this.checkValue,\n        type: this.selectValue\n      }; // 判断是否是 第三方 登录\n\n      if (this.singPassCode && this.singpassState) {\n        params.singPassCode = this.singPassCode;\n      }\n\n      this.axios({\n        url: 'user/confirm_login',\n        method: 'post',\n        params: params\n      }).then(function (data) {\n        _this4.dialogConfirmLoading = false;\n\n        if (data.code.toString() === '0') {\n          _this4.dialogClose(); // 关闭弹窗\n\n\n          setCookie('token', _this4.userToken); // 存储cookie\n          // 登录成功\n\n          _this4.$bus.$emit('tip', {\n            text: _this4.$t('login.loginSuccess'),\n            type: 'success'\n          }); // 获取 userinfo\n\n\n          _this4.$store.dispatch('getUserInfo');\n\n          _this4.getMySymbol();\n\n          window.location.href = '/';\n        } else {\n          _this4.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 关闭弹窗\n    dialogClose: function dialogClose() {\n      this.dialogFlag = false;\n      this.checkValue = '';\n    },\n    // 发送验证码组件点击button\n    getCodeClick: function getCodeClick() {\n      this.sendCode();\n    },\n    // 发送验证码\n    sendCode: function sendCode() {\n      var _this5 = this;\n\n      if (this.checkType === '2') {\n        this.$bus.$emit('phoneCode', {\n          token: this.userToken,\n          operationType: '25',\n          callback: function callback(data) {\n            if (data.code.toString() !== '0') {\n              // 倒计时重置\n              _this5.$bus.$emit('getCode-clear', 'loginGetcode'); // tip框提示错误\n\n\n              _this5.$bus.$emit('tip', {\n                text: data.msg,\n                type: 'error'\n              });\n            } else {\n              // 短信已发送，请注意查收\n              _this5.$bus.$emit('tip', {\n                text: _this5.$t('login.phoneSendSuccess'),\n                type: 'success'\n              });\n            }\n          }\n        });\n      } else if (this.checkType === '3') {\n        this.$bus.$emit('emailCode', {\n          token: this.userToken,\n          operationType: '4',\n          callback: function callback(data) {\n            if (data.code.toString() !== '0') {\n              // 倒计时重置\n              _this5.$bus.$emit('getCode-clear', 'loginGetcode'); // tip框提示错误\n\n\n              _this5.$bus.$emit('tip', {\n                text: data.msg,\n                type: 'error'\n              });\n            } else {\n              // 邮件已发送，请注意查收\n              _this5.$bus.$emit('tip', {\n                text: _this5.$t('login.emailSendSuccess'),\n                type: 'success'\n              });\n            }\n          }\n        });\n      }\n    },\n    // 获取服务端自选币对\n    getMySymbol: function getMySymbol() {\n      var _this6 = this;\n\n      this.axios({\n        url: 'optional/list_symbol',\n        params: {},\n        method: 'post'\n      }).then(function (data) {\n        if (data.code === '0') {\n          var storageMySymbol = myStorage.get('mySymbol') || [];\n          var webMySymbol = data.data.symbols.filter(function (x) {\n            return x !== '';\n          }) || [];\n          var sumMySymbolList = Array.from(new Set([].concat(_toConsumableArray(storageMySymbol), _toConsumableArray(webMySymbol))));\n          var diffMySymbolList = storageMySymbol.filter(function (x) {\n            return !webMySymbol.includes(x);\n          }); // 同步本地自选币对和服务端币对\n          // sync_status 0需要同步 1不需要同步\n\n          if (diffMySymbolList.length !== 0 && data.data.sync_status === '0') {\n            myStorage.set('mySymbol', sumMySymbolList);\n\n            _this6.axios({\n              url: _this6.$store.state.url.common.optional_symbol,\n              headers: {},\n              params: {\n                operationType: diffMySymbolList.length > '1' ? '0' : '1',\n                // 0批量添加 1单个添加 2单个删除\n                symbols: diffMySymbolList.join(',')\n              },\n              method: 'post'\n            }).then(function () {});\n          } else {\n            myStorage.set('mySymbol', webMySymbol);\n          }\n        } else {\n          _this6.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 点击第三方登录\n    goThirdUrl: function goThirdUrl(data) {\n      // 直接跳转至第三方\n      if (data.pcJump === '1') {\n        window.open(data.code, '_blank');\n      } else {\n        // 请求第三方登录信息\n        this.$store.dispatch('thirdPartyLoginData', {\n          url: data.code,\n          data: {}\n        });\n      }\n    }\n  }\n};",null]}