{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/input_line/InputLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/input_line/InputLine.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'c-inputLine',\n  data: function data() {\n    return {\n      isFocus: false,\n      // 是否获取焦点\n      isHover: false,\n      // 是否划过\n      inputWidth: 0,\n      // input宽度\n      slotWidth: 0,\n      focusTime: null,\n      nowType: 'text'\n    };\n  },\n  props: {\n    maxLength: {\n      default: '100000',\n      type: String\n    },\n    // 最大长度\n    name: {\n      default: '',\n      type: String\n    },\n    // 名称标识\n    className: {\n      default: '',\n      type: String\n    },\n    // class根容器\n    value: {\n      default: '',\n      type: String\n    },\n    // 外部 v-model 传入的植\n    width: {\n      default: '100%',\n      type: String\n    },\n    // 该容器根容器 width属性 (***务必加单位***)\n    marginTop: {\n      default: '0px',\n      type: String\n    },\n    // 该组件根容器 margin-top属性 (***务必加单位***)\n    inputType: {\n      default: 'text',\n      type: String\n    },\n    // input框 type属性\n    promptText: {\n      default: '',\n      type: String\n    },\n    // 提示文案\n    disabled: {\n      default: false,\n      type: Boolean\n    },\n    // 是否为只读\n    errorHave: {\n      default: false,\n      type: Boolean\n    },\n    // 是否有错误文案\n    errorText: {\n      default: '错误提示',\n      type: String\n    },\n    // 错误文案\n    errorFlag: {\n      default: false,\n      type: Boolean\n    },\n    // 错误文案是否显示\n    warningText: {\n      default: '',\n      type: String\n    },\n    // 是否有警示文案\n    hasSpaces: {\n      default: false,\n      type: Boolean\n    },\n    // 是否允许空格\n    isLogin: {\n      default: false,\n      type: Boolean\n    },\n    activeHideTitle: {\n      default: false,\n      type: Boolean\n    } // 选中时 是否展示title\n\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$bus.$off('inputLine-focus');\n    this.$bus.$on('inputLine-focus', function (name) {\n      if (name === _this.name) {\n        _this.$refs.inputLine.focus();\n      }\n    });\n\n    if (this.isLogin) {\n      this.nowType = this.inputType;\n    }\n  },\n  computed: {\n    activeHideTitleFitler: function activeHideTitleFitler() {\n      var flag = true;\n\n      if (this.activeHideTitle) {\n        if (this.isFocus || this.curValue.length) {\n          flag = false;\n        }\n      }\n\n      return flag;\n    },\n    curValue: {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(v) {\n        var value = v; // 限制空格\n\n        if (this.hasSpaces) {\n          if (value.indexOf(' ') !== -1) {\n            var arr = value.split(' ');\n            var str = '';\n            arr.forEach(function (item) {\n              str += item;\n            });\n            value = str;\n            this.$forceUpdate();\n          }\n        }\n\n        this.$emit('onchanges', value, this.name);\n      }\n    },\n    warningFlag: function warningFlag() {\n      var flag = false;\n\n      if (this.warningText.length) {\n        if (!(this.errorFlag && !this.isFocus)) {\n          flag = true;\n        }\n      }\n\n      return flag;\n    },\n    // 根容器 行内样式\n    contentStyle: function contentStyle() {\n      return {\n        width: this.width,\n        marginTop: this.marginTop\n      };\n    },\n    // 基础占位容器 class\n    baseStanceClass: function baseStanceClass() {\n      // 禁止时\n      if (this.disabled) {\n        return 'input-line-baseStance-disabled';\n      } // 错误时\n\n\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        return 'input-line-baseStance-error';\n      }\n\n      return '';\n    },\n    // 提示文案 class\n    promptClass: function promptClass() {\n      var className = '';\n      var color = 'b-2-cl';\n\n      if (this.isFocus || this.value.length) {\n        className += 'input-line-prompt-active';\n      }\n\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        color = 'b-6-cl';\n      }\n\n      return \"\".concat(className, \" \").concat(color);\n    },\n    // 下横线 class\n    activeLineClass: function activeLineClass() {\n      var className = 'a-12-bg';\n\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        className = 'a-19-bg';\n      }\n\n      return className;\n    },\n    // 下横线 行内样式\n    activeLineStyle: function activeLineStyle() {\n      var width = 0; // input划过 / input聚焦 / 错误文案显示 时 下划线展示\n\n      if (this.isHover || this.isFocus || this.errorHave && this.errorFlag) {\n        width = '100%';\n      }\n\n      if (this.disabled) {\n        width = 0;\n      }\n\n      return {\n        width: width\n      };\n    }\n  },\n  methods: {\n    promptClick: function promptClick() {\n      if (this.focusTime) {\n        var nowTime = new Date().getTime();\n\n        if (nowTime - this.focusTime > 200) {\n          this.$refs.inputLine.focus();\n          this.focusTime = null;\n        }\n      } else {\n        this.$refs.inputLine.focus();\n      }\n    },\n    // input 鼠标划入\n    handMouseenter: function handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave: function handMouseleave() {\n      this.isHover = false;\n    },\n    // input 获取焦点\n    handFocus: function handFocus() {\n      this.nowType = this.inputType;\n      this.$emit('focus', this.name);\n      this.isFocus = true;\n    },\n    // input 失去焦点\n    handBlur: function handBlur() {\n      this.focusTime = new Date().getTime();\n      this.$emit('blur', this.name);\n      this.isFocus = false;\n    },\n    keyup: function keyup() {\n      this.$emit('keyup', this.name);\n    }\n  }\n};",null]}