{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui/PC/components/button/Button.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui/PC/components/button/Button.vue","mtime":1623835967000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'c-button',\n  data() {\n    return {\n      flag: true,\n      wH: 0, // 动画变量\n      nX: 0, // 动画变量\n      nY: 0, // 动画变量\n      canvClass: '', // 动画class\n      isHover: false,\n      isClick: false,\n    };\n  },\n  props: {\n    name: { default: '', type: String },\n    // 类型   实心-solid 空心-hollow 文本-test\n    type: {\n      validator(val) {\n        return ['solid', 'hollow', 'text'].indexOf(val) !== -1;\n      },\n      default: 'solid',\n    },\n    className: { default: '', type: String }, // 根容器class 默认样式 不要传进来选中样式和滑过样式\n    // *** 如果要配置颜色组 需要传入一整套颜色\n    defaultColorClass: { default: '', type: String }, // 该组件默认颜色组\n    hoverColorClass: { default: '', type: String }, // 该组件滑过颜色组 仅空心按钮 框线按钮\n    activeColorClass: { default: '', type: String }, // 该组件选中颜色组 仅空心按钮 框线按钮\n    // ***\n    disabled: { default: false, type: Boolean }, // 是否禁用 (!** 该属性仅存在solid类型 **!)\n    loading: { default: false, type: Boolean }, // 是否loading  (!** 该属性仅存在solid类型 **!)\n    big: { default: false, type: Boolean }, // 是否为略大button  (!** 该属性仅存在hollow类型 **!)\n    kind: { default: false, type: Boolean }, // false为蓝色系 true为灰色系  (!** 该属性仅存在text类型 **!)\n    paddingW: { default: '', type: String }, // 左右padding\n    height: { default: '', type: String }, // 该容器根容器 height属性\n    width: { default: '', type: String }, // 该容器根容器 width属性\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性\n  },\n  created() {\n    // 错误处理： 如果 disable和loading同时存在\n    if (this.disabled && this.loading) {\n      this.flag = false; // 不展示组件\n      // throw('Common-button: disable 和 loading 只可存在一个') // 抛错\n      // console.error('Common-button: disable 和 loading 只可存在一个');\n    }\n    this.$bus.$on('button-click', (name) => {\n      if (name === this.name) {\n        this.handClick();\n      }\n    });\n  },\n  computed: {\n    // overClass() {\n    //   let className = ''\n    //   if(this.type === 'solid') { return className }\n    //   if(this.isHover) {\n    //     if(this.type === 'hollow') {\n    //       // if(this.big) {  }\n    //       return 'a-12-bd'\n    //     }\n    //   }\n    // },\n    // 用于实心按钮 滑过和点击\n    solidBcClass() {\n      let className = null;\n      if (this.type === 'solid' && !this.loading && !this.disabled) {\n        if (this.isHover) {\n          className = 'u-14-bg';\n        }\n        if (this.isClick) {\n          className = 'u-15-bg';\n        }\n      }\n      return className;\n    },\n    contentStyle() {\n      let { width, height, paddingW } = this.$props;\n      const hollowH = this.big ? '30px' : '24px';\n      switch (this.type) {\n        // 实心\n        case 'solid':\n          width = width === '' ? '' : width;\n          height = height === '' ? '40px' : height;\n          paddingW = paddingW === '' ? '20px' : paddingW;\n          break;\n        // 空心\n        case 'hollow':\n          width = width === '' ? '' : width;\n          height = height === '' ? hollowH : height;\n          paddingW = paddingW === '' ? '20px' : paddingW;\n          break;\n        // 文本\n        case 'text':\n          width = width === '' ? '' : width;\n          height = height === '' ? '24px' : height;\n          paddingW = paddingW === '' ? '10px' : paddingW;\n          break;\n        default:\n          break;\n      }\n      return {\n        width,\n        height,\n        paddingLeft: paddingW,\n        paddingRight: paddingW,\n        marginTop: this.marginTop,\n      };\n    },\n    // 整理当前类型和状态\n    nowType() {\n      let type = 'solid';\n      if (this.type === 'solid') {\n        type = 'solid';\n        if (this.loading) {\n          type = 'solid-loading';\n        }\n        if (this.disabled) {\n          type = 'solid-disabled';\n        }\n      } else if (this.type === 'hollow') {\n        type = 'hollow';\n        if (this.big) {\n          type = 'hollow-big';\n        }\n      } else if (this.type === 'text') {\n        type = 'text';\n        if (this.kind) {\n          type = 'text-king';\n        }\n      }\n      return type;\n    },\n    // 基础样式\n    infoClass() {\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'common-button-solid';\n        case 'solid-loading':\n          return 'common-button-solid-loading';\n        case 'solid-disabled':\n          return 'common-button-solid-disabled';\n        // 框线\n        case 'hollow':\n          return 'common-button-hollow';\n        case 'hollow-big':\n          return 'common-button-hollow-big';\n        // 文本\n        case 'text':\n          return 'common-button-text';\n        case 'text-king':\n          return 'common-button-text-kind';\n        default:\n          return 'common-button-solid';\n      }\n    },\n    // 元素默认颜色\n    defaultColor() {\n      if (this.defaultColorClass.length > 0) {\n        return this.defaultColorClass;\n      }\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-disabled':\n          return 'u-11-bg u-16-cl'; // ( class 背景色-灰 字体色-白 )\n        // 框线\n        case 'hollow':\n          return 'u-11-cl u-11-bd'; // ( class 字体色-灰 边框色-灰 )\n        case 'hollow-big':\n          return 'u-11-cl u-8-bd'; // ( class 字体色-灰 边框色-蓝 )\n        // 文本\n        case 'text':\n          return 'u-8-cl'; // ( class 字体色-蓝 )\n        case 'text-king':\n          return 'u-11-cl'; // ( class 字体色-灰 )\n        default:\n          return 'u-8-bg u-11-cl'; // ( class 背景色-蓝 字体色-白 )\n      }\n    },\n    // 元素滑过颜色\n    hoverColor() {\n      if (this.hoverColorClass.length > 0) {\n        return this.hoverColorClass;\n      }\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-disabled':\n          return 'u-11-bg u-16-cl'; // ( class 背景色-灰 字体色-白 )\n        // 框线\n        case 'hollow':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        case 'hollow-big':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        // 文本\n        case 'text':\n          return 'u-8-cl u-9-bg'; // ( class 字体色 )\n        case 'text-king':\n          return 'u-11-cl u-12-bg'; // ( class 字体色 )\n        default:\n          return 'u-8-bg u-11-cl'; // ( class 背景色 字体色 )\n      }\n    },\n    // 元素点击颜色\n    activeColor() {\n      if (this.activeColorClass.length > 0) {\n        return this.activeColorClass;\n      }\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-disabled':\n          return 'u-12-bg u-16-cl'; // ( class 背景色-灰 字体色-白 )\n        // 框线\n        case 'hollow':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        case 'hollow-big':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        // 文本3\n        case 'text':\n          return 'u-8-cl u-10-bg'; // ( class 字体色 )\n        case 'text-king':\n          return 'u-11-cl u-12-bg'; // ( class 字体色 )\n        default:\n          return 'u-8-bg u-11-cl'; // ( class 背景色 字体色 )\n      }\n    },\n    allClass() {\n      let colorClass = this.defaultColor;\n      if (this.isHover) {\n        colorClass = this.hoverColor;\n      }\n      if (this.isClick) {\n        colorClass = this.activeColor;\n      }\n      return `${this.infoClass} ${colorClass}`;\n    },\n    // 特效点击点\n    canvStyle() {\n      return {\n        width: `${this.wH}px`,\n        height: `${this.wH}px`,\n        left: `${this.nX}px`,\n        top: `${this.nY}px`,\n      };\n    },\n  },\n  methods: {\n    // input 鼠标划入\n    handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave() {\n      this.isHover = false;\n    },\n    handMouseDown() {\n      this.isClick = true;\n    },\n    handMouseUp() {\n      this.isClick = false;\n    },\n    handClick() {\n      if (this.disabled || this.loading) return;\n      this.$emit('click');\n    },\n  },\n};\n",{"version":3,"sources":["Button.vue"],"names":[],"mappingsfile":"Button.vue","sourceRoot":"../BlockChain-ui/PC/components/button","sourcesContent":["// Created by 任泽阳 on 18/12/06. // 按钮组件 // *****************************\n// 注 1.该组件必须传入type // 注 2.组件内容通过slot传入\n<template>\n  <!--  -->\n  <button\n    class='common-button'\n    :style='contentStyle'\n    :class='`${allClass} ${className}`'\n    @click.stop='handClick'\n    ref='button'\n    @mousedown='handMouseDown'\n    @mouseup='handMouseUp'\n    @mouseenter='handMouseenter'\n    @mouseleave='handMouseleave'\n  >\n    <div class='common-button-slot'>\n      <button\n        size='10'\n        className='common-button-loading'\n        v-if='loading'\n        colorName='f-1-cl'\n      />\n      <slot />\n    </div>\n    <!-- 用于实心按钮 滑过和点击 -->\n    <div v-if='solidBcClass' class='solidBc' :class='solidBcClass'></div>\n    <!-- 动画 -->\n  </button>\n</template>\n<script>\nexport default {\n  name: 'c-button',\n  data() {\n    return {\n      flag: true,\n      wH: 0, // 动画变量\n      nX: 0, // 动画变量\n      nY: 0, // 动画变量\n      canvClass: '', // 动画class\n      isHover: false,\n      isClick: false,\n    };\n  },\n  props: {\n    name: { default: '', type: String },\n    // 类型   实心-solid 空心-hollow 文本-test\n    type: {\n      validator(val) {\n        return ['solid', 'hollow', 'text'].indexOf(val) !== -1;\n      },\n      default: 'solid',\n    },\n    className: { default: '', type: String }, // 根容器class 默认样式 不要传进来选中样式和滑过样式\n    // *** 如果要配置颜色组 需要传入一整套颜色\n    defaultColorClass: { default: '', type: String }, // 该组件默认颜色组\n    hoverColorClass: { default: '', type: String }, // 该组件滑过颜色组 仅空心按钮 框线按钮\n    activeColorClass: { default: '', type: String }, // 该组件选中颜色组 仅空心按钮 框线按钮\n    // ***\n    disabled: { default: false, type: Boolean }, // 是否禁用 (!** 该属性仅存在solid类型 **!)\n    loading: { default: false, type: Boolean }, // 是否loading  (!** 该属性仅存在solid类型 **!)\n    big: { default: false, type: Boolean }, // 是否为略大button  (!** 该属性仅存在hollow类型 **!)\n    kind: { default: false, type: Boolean }, // false为蓝色系 true为灰色系  (!** 该属性仅存在text类型 **!)\n    paddingW: { default: '', type: String }, // 左右padding\n    height: { default: '', type: String }, // 该容器根容器 height属性\n    width: { default: '', type: String }, // 该容器根容器 width属性\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性\n  },\n  created() {\n    // 错误处理： 如果 disable和loading同时存在\n    if (this.disabled && this.loading) {\n      this.flag = false; // 不展示组件\n      // throw('Common-button: disable 和 loading 只可存在一个') // 抛错\n      // console.error('Common-button: disable 和 loading 只可存在一个');\n    }\n    this.$bus.$on('button-click', (name) => {\n      if (name === this.name) {\n        this.handClick();\n      }\n    });\n  },\n  computed: {\n    // overClass() {\n    //   let className = ''\n    //   if(this.type === 'solid') { return className }\n    //   if(this.isHover) {\n    //     if(this.type === 'hollow') {\n    //       // if(this.big) {  }\n    //       return 'a-12-bd'\n    //     }\n    //   }\n    // },\n    // 用于实心按钮 滑过和点击\n    solidBcClass() {\n      let className = null;\n      if (this.type === 'solid' && !this.loading && !this.disabled) {\n        if (this.isHover) {\n          className = 'u-14-bg';\n        }\n        if (this.isClick) {\n          className = 'u-15-bg';\n        }\n      }\n      return className;\n    },\n    contentStyle() {\n      let { width, height, paddingW } = this.$props;\n      const hollowH = this.big ? '30px' : '24px';\n      switch (this.type) {\n        // 实心\n        case 'solid':\n          width = width === '' ? '' : width;\n          height = height === '' ? '40px' : height;\n          paddingW = paddingW === '' ? '20px' : paddingW;\n          break;\n        // 空心\n        case 'hollow':\n          width = width === '' ? '' : width;\n          height = height === '' ? hollowH : height;\n          paddingW = paddingW === '' ? '20px' : paddingW;\n          break;\n        // 文本\n        case 'text':\n          width = width === '' ? '' : width;\n          height = height === '' ? '24px' : height;\n          paddingW = paddingW === '' ? '10px' : paddingW;\n          break;\n        default:\n          break;\n      }\n      return {\n        width,\n        height,\n        paddingLeft: paddingW,\n        paddingRight: paddingW,\n        marginTop: this.marginTop,\n      };\n    },\n    // 整理当前类型和状态\n    nowType() {\n      let type = 'solid';\n      if (this.type === 'solid') {\n        type = 'solid';\n        if (this.loading) {\n          type = 'solid-loading';\n        }\n        if (this.disabled) {\n          type = 'solid-disabled';\n        }\n      } else if (this.type === 'hollow') {\n        type = 'hollow';\n        if (this.big) {\n          type = 'hollow-big';\n        }\n      } else if (this.type === 'text') {\n        type = 'text';\n        if (this.kind) {\n          type = 'text-king';\n        }\n      }\n      return type;\n    },\n    // 基础样式\n    infoClass() {\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'common-button-solid';\n        case 'solid-loading':\n          return 'common-button-solid-loading';\n        case 'solid-disabled':\n          return 'common-button-solid-disabled';\n        // 框线\n        case 'hollow':\n          return 'common-button-hollow';\n        case 'hollow-big':\n          return 'common-button-hollow-big';\n        // 文本\n        case 'text':\n          return 'common-button-text';\n        case 'text-king':\n          return 'common-button-text-kind';\n        default:\n          return 'common-button-solid';\n      }\n    },\n    // 元素默认颜色\n    defaultColor() {\n      if (this.defaultColorClass.length > 0) {\n        return this.defaultColorClass;\n      }\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-disabled':\n          return 'u-11-bg u-16-cl'; // ( class 背景色-灰 字体色-白 )\n        // 框线\n        case 'hollow':\n          return 'u-11-cl u-11-bd'; // ( class 字体色-灰 边框色-灰 )\n        case 'hollow-big':\n          return 'u-11-cl u-8-bd'; // ( class 字体色-灰 边框色-蓝 )\n        // 文本\n        case 'text':\n          return 'u-8-cl'; // ( class 字体色-蓝 )\n        case 'text-king':\n          return 'u-11-cl'; // ( class 字体色-灰 )\n        default:\n          return 'u-8-bg u-11-cl'; // ( class 背景色-蓝 字体色-白 )\n      }\n    },\n    // 元素滑过颜色\n    hoverColor() {\n      if (this.hoverColorClass.length > 0) {\n        return this.hoverColorClass;\n      }\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-disabled':\n          return 'u-11-bg u-16-cl'; // ( class 背景色-灰 字体色-白 )\n        // 框线\n        case 'hollow':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        case 'hollow-big':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        // 文本\n        case 'text':\n          return 'u-8-cl u-9-bg'; // ( class 字体色 )\n        case 'text-king':\n          return 'u-11-cl u-12-bg'; // ( class 字体色 )\n        default:\n          return 'u-8-bg u-11-cl'; // ( class 背景色 字体色 )\n      }\n    },\n    // 元素点击颜色\n    activeColor() {\n      if (this.activeColorClass.length > 0) {\n        return this.activeColorClass;\n      }\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl'; // ( class 背景色-蓝 字体色-白 )\n        case 'solid-disabled':\n          return 'u-12-bg u-16-cl'; // ( class 背景色-灰 字体色-白 )\n        // 框线\n        case 'hollow':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        case 'hollow-big':\n          return 'u-8-cl u-8-bd'; // ( class 字体色-蓝 边框色-蓝 )\n        // 文本3\n        case 'text':\n          return 'u-8-cl u-10-bg'; // ( class 字体色 )\n        case 'text-king':\n          return 'u-11-cl u-12-bg'; // ( class 字体色 )\n        default:\n          return 'u-8-bg u-11-cl'; // ( class 背景色 字体色 )\n      }\n    },\n    allClass() {\n      let colorClass = this.defaultColor;\n      if (this.isHover) {\n        colorClass = this.hoverColor;\n      }\n      if (this.isClick) {\n        colorClass = this.activeColor;\n      }\n      return `${this.infoClass} ${colorClass}`;\n    },\n    // 特效点击点\n    canvStyle() {\n      return {\n        width: `${this.wH}px`,\n        height: `${this.wH}px`,\n        left: `${this.nX}px`,\n        top: `${this.nY}px`,\n      };\n    },\n  },\n  methods: {\n    // input 鼠标划入\n    handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave() {\n      this.isHover = false;\n    },\n    handMouseDown() {\n      this.isClick = true;\n    },\n    handMouseUp() {\n      this.isClick = false;\n    },\n    handClick() {\n      if (this.disabled || this.loading) return;\n      this.$emit('click');\n    },\n  },\n};\n</script>\n\n<style lang='stylus'>\n.solidBc {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n}\n// 实心按钮\nsolid-style() {\n  height: 40px;\n  line-height: 40px;\n}\n// 实心按钮 -- 默认\n.common-button-solid {\n  font-size: 14px;\n}\n\n// 实心按钮 -- 禁止\n.common-button-solid-disabled {\n  font-size: 14px;\n  cursor: not-allowed!important\n}\n\n// 实心按钮 -- 等待\n.common-button-solid-loading {\n  font-size: 14px;\n  cursor: wait!important\n}\n\n// 空心按钮\n.common-button-hollow, .common-button-hollow-big {\n  border-width: 1px;\n  border-style: solid;\n}\n.common-button-hollow {\n  font-size: 12px\n}\n.common-button-hollow-big {\n  font-size: 14px\n}\n\n// 文本按钮\n.common-button-text,\n.common-button-text-kind {\n  font-size: 12px;\n}\n.common-button {\n  transition: all 0.3s;\n  box-sizing: border-box;\n  border-radius: 2px;\n  position: relative;\n  overflow: hidden;\n  text-align: center;\n  cursor: pointer;\n  user-select: none;\n  display: inline-block;\n  .common-button-slot {\n    position: relative;\n    display: inline;\n    vertical-align: middle;\n    .common-button-loading {\n      position: absolute;\n      vertical-align: middle;\n      left: -14px;\n      top: 50%;\n      transform: translateY(-50%)\n    }\n  }\n  .button-background {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 2;\n  }\n}\n.button-canv {\n  position: absolute;\n  left: 20px;\n  top: 20px;\n  transform: scale(0);\n}\n.mmd-waves-effect {\n  border-radius: 100%;\n  background-color: #D8D8D8;\n\n}\n\n.mmd-waves-effect-animation {\n  animation: mmd-maves-animation-definition 0.8s ease-out;\n  /* 兼容各大浏览器 */\n  -moz-animation: mmd-maves-animation-definition 0.8s ease-out;\n  -webkit-animation: mmd-maves-animation-definition 0.8s ease-out;\n  -o-animation: mmd-maves-animation-definition 0.8s ease-out;\n}\n\n@keyframes mmd-maves-animation-definition {\n  from {\n    transform: scale(0.1);\n    opacity: 0.5;\n  }\n\n  to {\n    transform: scale(2); /* 因为涟漪的大小为标签的最长边，为了保证点击标签边缘时，涟漪也能覆盖整个标签，scale值最小应为2 */\n    opacity: 0;\n  }\n}\n\n@keyframes mmd-maves-animation-definition {\n  from {\n    transform: scale(0.1);\n    opacity: 0.5;\n  }\n\n  to {\n    transform: scale(2); /* 因为涟漪的大小为标签的最长边，为了保证点击标签边缘时，涟漪也能覆盖整个标签，scale值最小应为2 */\n    opacity: 0;\n  }\n}\n\n@keyframes mmd-maves-animation-definition {\n  from {\n    transform: scale(0.1);\n    opacity: 0.5;\n  }\n\n  to {\n    transform: scale(2); /* 因为涟漪的大小为标签的最长边，为了保证点击标签边缘时，涟漪也能覆盖整个标签，scale值最小应为2 */\n    opacity: 0;\n  }\n}\n\n@keyframes mmd-maves-animation-definition {\n  from {\n    transform: scale(0.1);\n    opacity: 0.5;\n  }\n\n  to {\n    transform: scale(2); /* 因为涟漪的大小为标签的最长边，为了保证点击标签边缘时，涟漪也能覆盖整个标签，scale值最小应为2 */\n    opacity: 0;\n  }\n}\n</style>\n"]}]}