{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/trade/orderList/orderList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/trade/orderList/orderList.vue","mtime":1641915301897},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport mixin from 'blockchain-ui-privatization/PC/common-mixin/modules/trade/orderList/orderList';\nimport { getCoinShowName, formatTime, fixD, myStorage } from 'blockchain-ui-privatization/utils';\nimport GridDialog from \"../gridDialog/GridDialog.vue\";\nimport 'blockchain-ui-privatization/PC/common-mixin/modules/trade/orderList/orderList.styl';\nexport default {\n  mixins: [mixin],\n  components: {\n    GridDialog: GridDialog\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  // 组价离开前执行\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.getDataInter);\n  },\n  data: function data() {\n    return {\n      gridType: 0,\n      // 网格类型 0: 网格详情； 1: 正在执行(20)； 2: 已完成\n      gridDoliog: false,\n      // 网格弹窗\n      gridItemId: null,\n      // list单个的数据\n      gridCancelDoliog: false,\n      filterGridStatus: 1,\n      // 策略状态 0:启动中  1:正在执行   2:停止中   3:已关闭\n      timer: 15000\n    };\n  },\n  watch: {\n    filterGridStatus: function filterGridStatus(v) {\n      if (!v) {\n        clearInterval(this.getDataInter);\n        this.getDataInter = null;\n      } else {\n        this.intervalGet();\n      }\n    }\n  },\n  computed: {\n    //  是否开启了 网格\n    gridTradeFlag: function gridTradeFlag() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var str = 1;\n\n      if (publicInfo && publicInfo.switch && publicInfo.switch.grid_trade_switch) {\n        str = Number(publicInfo.switch.grid_trade_switch);\n      }\n\n      return str;\n    },\n    // 该币对是否开启网格\n    showGridFlag: function showGridFlag() {\n      var flag = false;\n\n      if (this.symbolAll && this.symbolCurrent) {\n        var symbol = this.symbolAll[this.symbolCurrent];\n\n        if (symbol && symbol.is_grid_open) {\n          flag = true;\n        }\n      }\n\n      return flag;\n    },\n    // tab 项\n    tabTypeItem: function tabTypeItem() {\n      var arr = [this.$t('trade.activeOrder'), // 当前委托\n      this.$t('trade.historyOrder') // 历史委托\n      ];\n\n      if (this.gridTradeFlag && this.showGridFlag) {\n        arr.push(this.$t('gridTrade.title'));\n      }\n\n      return arr;\n    },\n    // 表头\n    columns: function columns() {\n      if (this.orderType === 2) {\n        return [{\n          title: this.$t('trade.time'),\n          // '时间',\n          width: '100px'\n        }, {\n          title: this.$t('trade.class'),\n          // '类别'\n          width: '200px'\n        }, {\n          title: this.$t('trade.transaction') // '交易对'\n\n        }, {\n          title: \"\".concat(this.$t('trade.price'), \"\\n            (\").concat(getCoinShowName(this.symbolUnit.units, this.coinList), \")\") // 价格\n\n        }, {\n          title: \"\".concat(this.$t('trade.number'), \"\\n            (\").concat(getCoinShowName(this.symbolUnit.symbol, this.coinList), \")\") // 数量\n\n        }, {\n          title: this.$t('trade.average') // '成交均价'\n\n        }, {\n          title: this.$t('trade.status') // '状态'\n\n        }, {\n          title: this.$t('trade.opera'),\n          // '操作'\n          width: '100px'\n        }];\n      }\n\n      if (this.orderType === 3) {\n        return [{\n          title: this.$t('trade.time'),\n          // '时间',\n          width: '100px'\n        }, {\n          title: this.$t('trade.transaction'),\n          // '交易对'\n          width: '100px'\n        }, {\n          title: this.$t('gridTrade.clounms1'),\n          // '总投入',\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms2'),\n          // 已产生利润\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms3'),\n          // 持仓盈亏\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms4'),\n          // '年化收益率'\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms5'),\n          // '运行时长'\n          width: '200px'\n        }, {\n          title: this.$t('trade.opera'),\n          // '操作'\n          width: '150px'\n        }];\n      }\n\n      return [{\n        title: this.$t('trade.time'),\n        // '时间',\n        width: '100px'\n      }, {\n        title: this.$t('trade.class'),\n        // '类别'\n        width: '150px'\n      }, {\n        title: \"\".concat(this.$t('trade.price'), \"\\n          (\").concat(getCoinShowName(this.symbolUnit.units, this.coinList), \")\") // 价格\n\n      }, {\n        title: \"\".concat(this.$t('trade.number'), \"\\n          (\").concat(getCoinShowName(this.symbolUnit.symbol, this.coinList), \")\") // 数量\n\n      }, {\n        title: \"\".concat(this.$t('trade.dealMoney'), \"\\n          (\").concat(getCoinShowName(this.symbolUnit.units, this.coinList), \")\") // 交易额\n\n      }, {\n        title: this.$t('trade.average') // '成交均价'\n\n      }, {\n        title: \"\".concat(this.$t('trade.deal'), \"/\").concat(this.$t('trade.noDeal')) // 已成交/未成交\n\n      }, {\n        title: this.$t('trade.opera'),\n        // '操作'\n        width: '100px',\n        classes: 'opera'\n      }];\n    },\n    dataList: function dataList() {\n      if (this.orderData && this.orderData.orderType === this.orderType) {\n        if (this.orderType === 1) {\n          return this.formData(this.orderData.orderList, this.cancelOrderId);\n        }\n\n        if (this.orderType === 3) {\n          return this.formGridData(this.orderData.strategyVoList);\n        }\n\n        return this.formHistoryData(this.orderData.orderList);\n      }\n\n      return [];\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      // 获取 当前选中的货币对\n      this.symbolCurrent = myStorage.get('sSymbolName');\n\n      if (this.moduleType === 'lever') {\n        this.symbolCurrent = myStorage.get('leverSymbolName');\n      }\n\n      if (this.isLogin) {\n        this.getData(); // 轮训请求数据\n\n        this.intervalGet();\n      }\n\n      this.$bus.$on('SYMBOL_CURRENT', function (val) {\n        _this.symbolCurrent = val;\n\n        if (_this.isLogin) {\n          _this.pagination.page = 1;\n          _this.subTableDataId = null;\n          _this.tableLoading = true;\n\n          _this.getData();\n        }\n\n        if (_this.orderType === 3 && (!_this.showGridFlag || !_this.gridTradeFlag)) {\n          _this.orderType = 1;\n        }\n      }); // 监听下单成功\n\n      this.$bus.$on('ORDER_CREATE', function () {\n        _this.pagination.page = 1;\n\n        _this.getData();\n      });\n    },\n    gridClose: function gridClose() {\n      this.gridDoliog = false;\n    },\n    // 请求订单数据\n    getData: function getData(auto) {\n      if (this.symbolCurrent && this.isLogin) {\n        var url = this.$store.state.url.cointran.orderNew;\n\n        if (this.orderType === 2) {\n          url = this.$store.state.url.ordercenter.historyNew;\n        } else if (this.orderType === 3) {\n          // 如果是网格直接请求网格接口\n          url = 'quant/getStrategyList';\n        }\n\n        if (this.moduleType === 'lever') {\n          url = this.$store.state.url.lever.new;\n\n          if (this.orderType === 2) {\n            url = this.$store.state.url.lever.all;\n          }\n        }\n\n        var symbolArr = this.symbolCurrent.split('/');\n        var symbol = symbolArr[0].toLowerCase() + symbolArr[1].toLowerCase();\n        var data = {\n          url: url,\n          orderType: this.orderType,\n          params: {\n            symbol: symbol,\n            pageSize: this.pagination.pageSize\n          }\n        };\n\n        if (this.orderType === 3) {\n          data.hostType = 'quant';\n          data.params.symbol = this.symbolCurrent;\n          data.params.status = this.filterGridStatus;\n        }\n\n        if (this.orderIdArrar.length && this.orderType === 2) {\n          data.params.idList = this.orderIdArrar;\n        } else {\n          data.params.page = this.pagination.page;\n        }\n\n        if (auto) {\n          data.auto = true;\n        }\n\n        this.$store.dispatch('getOrderListData', data);\n      }\n    },\n    // 轮训请求数据\n    intervalGet: function intervalGet() {\n      var _this2 = this;\n\n      if (this.filterGridStatus) {\n        clearInterval(this.getDataInter);\n        this.getDataInter = setInterval(function () {\n          _this2.getData(true);\n        }, this.timer);\n      } else {\n        clearInterval(this.getDataInter);\n        this.getDataInter = null;\n      }\n    },\n    // 网格交易数据格式化\n    formGridData: function formGridData(data) {\n      var _this3 = this;\n\n      var dataArray = data || [];\n      var newData = [];\n\n      if (dataArray.length) {\n        dataArray.forEach(function (item) {\n          var tableData = null;\n          var symbolArr = item.symbol.split('/'); // 网格状态 0:启动中 1:正在执行 2:停止中 3:已关闭\n\n          if (_this3.filterGridStatus.toString() === '0') {\n            tableData = {\n              id: item.id,\n              data: [formatTime(item.ctime), [{\n                text: \"\".concat(getCoinShowName(symbolArr[0], _this3.coinList), \"/\").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 总投入\n              [{\n                text: \"\".concat(fixD(item.configParamMap.totalQuoteAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \" + \").concat(fixD(item.configParamMap.totalBaseAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[0], _this3.coinList))\n              }], // 已产生利润\n              [{\n                text: \"\".concat(fixD(item.totalProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \"(\").concat(fixD(item.totalProfitRate, 2), \"%)\")\n              }], // 持仓盈亏\n              [{\n                text: \"\".concat(fixD(item.positionProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 年华收益率\n              [{\n                text: \"\".concat(fixD(item.annualizedYield, 2), \"%\")\n              }], // 运行时长\n              [{\n                text: _this3.setTime(item.startTime, item.endTime)\n              }], [{\n                type: 'link',\n                text: _this3.$t('trade.view'),\n                // 详情\n                eventType: 'gridDetail'\n              }]]\n            };\n          } else if (_this3.filterGridStatus.toString() === '1') {\n            tableData = {\n              id: item.id,\n              data: [formatTime(item.ctime), [{\n                text: \"\".concat(getCoinShowName(symbolArr[0], _this3.coinList), \"/\").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 总投入\n              [{\n                text: \"\".concat(fixD(item.configParamMap.totalQuoteAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \" + \").concat(fixD(item.configParamMap.totalBaseAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[0], _this3.coinList))\n              }], // 已产生利润\n              [{\n                text: \"\".concat(fixD(item.totalProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \"(\").concat(fixD(item.totalProfitRate, 2), \"%)\")\n              }], // 持仓盈亏\n              [{\n                text: \"\".concat(fixD(item.positionProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 年华收益率\n              [{\n                text: \"\".concat(fixD(item.annualizedYield, 2), \"%\")\n              }], // 运行时长\n              [{\n                text: _this3.setTime(item.startTime)\n              }], [{\n                type: 'link',\n                text: _this3.$t('trade.view'),\n                // 详情\n                eventType: 'gridDetail'\n              }, {\n                type: 'link',\n                text: _this3.$t('gridTrade.close'),\n                // 终止网格\n                eventType: 'gridCancel',\n                classes: 'grid_btn'\n              }]]\n            };\n          }\n\n          if (tableData) {\n            newData.push(tableData);\n          }\n        });\n        return newData;\n      }\n\n      return [];\n    },\n    setTime: function setTime(startTime, endTime) {\n      if (!Number(startTime)) {\n        return \"0\".concat(this.$t('otcDetailOrder.day'), \"0\").concat(this.$t('gridTrade.hours'), \"0\").concat(this.$t('otcDetailOrder.min'));\n      }\n\n      var dateEnd = new Date().getTime();\n\n      if (endTime) {\n        dateEnd = endTime;\n      }\n\n      var dateDiff = dateEnd - startTime; // 时间差的毫秒数\n\n      var day = Math.floor(dateDiff / (24 * 3600 * 1000)); // 计算出相差天数\\\n\n      var leave1 = dateDiff % (24 * 3600 * 1000); // 计算天数后剩余的毫秒数\n\n      var hours = Math.floor(leave1 / (3600 * 1000)); // 计算出小时数\n      // 计算相差分钟数\n\n      var leave2 = leave1 % (3600 * 1000); // 计算小时数后剩余的毫秒数\n\n      var minutes = Math.floor(leave2 / (60 * 1000)); // 计算相差分钟数\n\n      function s(t) {\n        return t < 10 && t > 0 ? \"0\".concat(t) : t;\n      }\n\n      return \"\".concat(s(day)).concat(this.$t('otcDetailOrder.day')).concat(s(hours)).concat(this.$t('gridTrade.hours')).concat(s(minutes)).concat(this.$t('otcDetailOrder.min'));\n    },\n    elementClick: function elementClick(type, data) {\n      if (type === 'cancel') {\n        this.cancelOrderEvent(data);\n      } else if (type === 'gridDetail') {\n        this.gridItemId = data;\n        this.gridDoliog = true;\n      } else if (type === 'gridCancel') {\n        this.gridItemId = data;\n        this.gridCancelDoliog = true;\n      } else {\n        this.getSubTableData(data);\n      }\n    },\n    // 终止网格\n    gridCancelEvent: function gridCancelEvent() {\n      var _this4 = this;\n\n      this.axios({\n        url: 'quant/stopStrategy',\n        hostType: 'quant',\n        method: 'post',\n        params: {\n          strategyId: this.gridItemId\n        }\n      }).then(function (rep) {\n        if (rep.code.toString() === '0') {\n          _this4.getData(); // 重新请求资产\n\n\n          _this4.$store.dispatch('assetsExchangeData', {\n            auto: false,\n            coinSymbols: _this4.coinSymbols\n          }); // 撤单成功 提示\n\n\n          _this4.$bus.$emit('tip', {\n            text: rep.msg,\n            type: 'success'\n          });\n        } else {\n          _this4.$bus.$emit('tip', {\n            text: rep.msg,\n            type: 'error'\n          });\n        }\n\n        _this4.gridCancelDoliog = false;\n      });\n    }\n  }\n};",null]}