{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/table/Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/table/Table.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getComplexType } from '../../../utils';\r\n\r\nexport default {\r\n  name: 'c-table',\r\n  props: {\r\n    h5Width: {\r\n      type: String,\r\n      default: '800px',\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    // 表头数据列表\r\n    columns: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    // 表格数据列表\r\n    dataList: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    // 展开数据\r\n    subContent: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    // 整个表格根元素的class\r\n    classes: {\r\n      type: [String, Array],\r\n      default: () => [],\r\n    },\r\n    // 表头class\r\n    headClasses: {\r\n      type: [String, Array],\r\n      default: () => [],\r\n    },\r\n    // 表内容class\r\n    bodyClasses: {\r\n      type: [String, Array],\r\n      default: () => [],\r\n    },\r\n    // 表格每一行class\r\n    lineClasses: {\r\n      type: [String, Array],\r\n      default: () => ['b—3-bd'],\r\n    },\r\n    // 表格每一行的hover class\r\n    lineClassesHover: {\r\n      type: [String, Array],\r\n      default: () => [],\r\n    },\r\n    // 大于多少条后出现滚动条\r\n    lineNumber: {\r\n      type: Number,\r\n      default: 20,\r\n    },\r\n    // 表格每一行的高度\r\n    cellHeight: {\r\n      type: Number,\r\n      default: 50,\r\n    },\r\n    // 表头高度\r\n    headHeight: {\r\n      type: Number,\r\n      default: 30,\r\n    },\r\n    // sub 表头\r\n    subColumns: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    // sub 表的自定义class\r\n    subClass: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    subContentId: {\r\n      type: [Number, String],\r\n    },\r\n    subLoading: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    colorMap: {\r\n      type: Object,\r\n      default: () => {},\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      // 是否排序\r\n      isSorte: false,\r\n      // 排序 使用的Key\r\n      sorteKey: null,\r\n      // 排序方向\r\n      sortType: null,\r\n      // 表头单元格的宽度\r\n      cellWidth: [],\r\n      // sub 显示的 id\r\n      subPpenId: null,\r\n      subIsOpen: 0,\r\n      // 滚动条配置\r\n      ops: {\r\n        rail: {\r\n          gutterOfSide: '0px',\r\n        },\r\n      },\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.setCellWidth();\r\n    this.$bus.$on('WINFOW_ON_RESIIZE', () => {\r\n      this.setCellWidth();\r\n    });\r\n  },\r\n  computed: {\r\n    classBoxStyle() {\r\n      // const max = window.matchMedia('(max-width:960px)');\r\n      let str = 'width: 100%;';\r\n      // if (max.matches) {\r\n      str += `min-width: ${this.h5Width}`;\r\n      // }\r\n      return str;\r\n    },\r\n    // 表格 根目录 class\r\n    classBox() {\r\n      const cls = this.isType(this.classes) === 'Array'\r\n        ? [...this.classes] : this.classes;\r\n      return ['common-table', 'a-5-bg', cls];\r\n    },\r\n    // 表头 class\r\n    classHead() {\r\n      const cls = this.isType(this.headClasses) === 'Array'\r\n        ? [...this.headClasses] : this.headClasses;\r\n      return ['table-head', 'a-3-bd', cls];\r\n    },\r\n    // 表格行 class\r\n    classLine() {\r\n      const cls = this.isType(this.lineClasses) === 'Array'\r\n        ? [...this.lineClasses] : this.lineClasses;\r\n      return ['a-3-bd', cls];\r\n    },\r\n    // 表格 数据列表 设置排序\r\n    tableDataList() {\r\n      if (!this.dataList || !this.dataList.length) return [];\r\n      if (this.isSorte) {\r\n        return this.sortType === 'down'\r\n          ? this.quickSort(this.dataList)\r\n          : this.quickSort(this.dataList).reverse();\r\n      }\r\n      return this.dataList;\r\n    },\r\n    // 获取表头传入的宽\r\n    columnsWidth() {\r\n      const [...columns] = this.columns;\r\n      const arr = [];\r\n      columns.forEach((item, i) => {\r\n        const obj = { index: i };\r\n        if (item.width) {\r\n          obj.width = item.width;\r\n        }\r\n        if (item.align) {\r\n          obj['text-align'] = item.align;\r\n        }\r\n        if (item.styleClass) {\r\n          obj.styleClass = item.styleClass;\r\n        }\r\n        arr.push(obj);\r\n      });\r\n      return arr;\r\n    },\r\n    // 表格内容 高度 超出高度 出现滚动条\r\n    tableBodyHeight() {\r\n      if (this.tableDataList.length <= this.lineNumber) {\r\n        return false;\r\n      }\r\n      return { height: `${this.lineNumber * this.cellHeight}px` };\r\n    },\r\n  },\r\n  watch: {\r\n    // 监听表格数据的变化\r\n    dataList(val) {\r\n      setTimeout(() => {\r\n        // 重新设置表头单元格的宽度\r\n        this.setCellWidth();\r\n      }, 0);\r\n      if (val) {\r\n        // 设置成默认排序\r\n        // this.isSorte = false;\r\n        // 排序 使用的Key\r\n        // this.sorteKey = null;\r\n        // 排序方向\r\n        // this.sortType = null;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    isObjectType(element) {\r\n      return getComplexType(element) === 'Object';\r\n    },\r\n    isObjectTypeJoinClass(element) {\r\n      return this.isObjectType(element) && element.class ? element.class : '';\r\n    },\r\n    isObjectTypeJoinStyle(element) {\r\n      return this.isObjectType(element) && element.style ? element.style : '';\r\n    },\r\n    isObjectTypeJoinText(element) {\r\n      return this.isObjectType(element) && element.text\r\n        ? element.text\r\n        : element;\r\n    },\r\n    onChaneForm(item, id, val) {\r\n      const data = {};\r\n      data[id] = val;\r\n      this.$emit('elementClick', item.eventType, data);\r\n    },\r\n    listMouseOver(e) {\r\n      const { colorMap } = this;\r\n      e.target.style.backgroundColor = colorMap['a-4-bg'];\r\n    },\r\n    listMouseOut(e) {\r\n      e.target.style.backgroundColor = 'transparent';\r\n    },\r\n    enter(index) {\r\n      this.hoverIndex = index;\r\n    },\r\n    leave() {\r\n      this.hoverIndex = null;\r\n    },\r\n    lineClassesH(index) {\r\n      if (index === this.hoverIndex) {\r\n        return this.lineClassesHover;\r\n      }\r\n      return null;\r\n    },\r\n    isType(obj) {\r\n      const types = Object.prototype.toString.call(obj);\r\n      if (types === '[object Array]') {\r\n        return 'Array';\r\n      }\r\n      if (types === '[object Object]') {\r\n        return 'Object';\r\n      }\r\n      return 'string';\r\n    },\r\n    // 表头文字 居中\r\n    cellStyleTh(item) {\r\n      return {\r\n        'text-align': item.align,\r\n      };\r\n    },\r\n    cellStyleClass(index) {\r\n      if (this.columnsWidth.length) {\r\n        let obj = {};\r\n        this.columnsWidth.forEach((item) => {\r\n          if (item.index === index && item.styleClass) {\r\n            obj = item.styleClass;\r\n          }\r\n        });\r\n        return obj;\r\n      }\r\n      return false;\r\n    },\r\n    // 设置 单元格 的宽度\r\n    cellStyleTd(index) {\r\n      if (this.columnsWidth.length) {\r\n        let obj = {};\r\n        this.columnsWidth.forEach((item) => {\r\n          if (item.index === index) {\r\n            obj = item;\r\n          }\r\n        });\r\n        return obj;\r\n      }\r\n      return false;\r\n    },\r\n    // 设置表头单元格的宽度\r\n    setCellWidth() {\r\n      const tdFefsKeys = Object.keys(this.$refs);\r\n      this.cellWidth = [];\r\n      tdFefsKeys.forEach((item) => {\r\n        if (item.indexOf('td') !== -1) {\r\n          if (this.$refs[item][0]) {\r\n            this.cellWidth.push(this.$refs[item][0].offsetWidth);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    // 行 点击事件\r\n    lineClickEvent(item) {\r\n      this.$emit('lineClick', item);\r\n    },\r\n    // 按钮 点击事件\r\n    elementClickEvent(item, id) {\r\n      this.$emit('elementClick', item.eventType, id);\r\n      if (item.type === 'link') {\r\n        this.$router.push(item.links);\r\n      }\r\n    },\r\n    // 点击排序事件\r\n    sorteChane(key, asynSorte) {\r\n      if (asynSorte) {\r\n        this.isSorte = true;\r\n        this.sortType = this.sortType === 'down' ? 'up' : 'down';\r\n        if (this.sorteKey !== key) {\r\n          this.sortType = 'down';\r\n          this.sorteKey = key;\r\n        }\r\n      }\r\n      this.$emit('sortOnChange', { key: this.sorteKey, type: this.sortType });\r\n    },\r\n    getSortValue(itemArr) {\r\n      let val = null;\r\n      if (this.isType(itemArr) === 'Array') {\r\n        itemArr.forEach((option) => {\r\n          if (this.isType(option) === 'Array') {\r\n            option.forEach((data) => {\r\n              if (data.key === this.sorteKey) {\r\n                val = data.sortVal;\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n      return parseFloat(val);\r\n    },\r\n    // 排序\r\n    quickSort(datas) {\r\n      const [...dataArray] = datas;\r\n      if (!dataArray.length) {\r\n        return dataArray;\r\n      }\r\n      return dataArray.sort(\r\n        (a, b) => this.getSortValue(b.data) - this.getSortValue(a.data),\r\n      );\r\n    },\r\n    // 展开 sub 表格\r\n    opentSubCOntent(item, ids) {\r\n      this.subIsOpen = this.subPpenId !== ids ? 1 : 0;\r\n      this.$emit('elementClick', item.eventType, {\r\n        id: ids,\r\n        open: this.subPpenId !== ids ? 1 : 0,\r\n      });\r\n      this.subPpenId = this.subPpenId === ids ? null : ids;\r\n    },\r\n  },\r\n};\r\n",null]}