{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/modules/trade/market/market.js","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/modules/trade/market/market.js","mtime":1646052851746},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { getCoinShowName, myStorage } from '@/utils';\nexport default {\n  name: 'market',\n  data: function data() {\n    return {\n      marketDataList: [],\n      dataList: [],\n      dataList_bar: [],\n      symbolList: [],\n      // 当前选中的市场\n      marketCurrent: myStorage.get('markTitle'),\n      // 获取当前币对\n      symbolCurrent: myStorage.get('sSymbolName'),\n      // 排序\n      sortName: null,\n      sortType: null,\n      // 筛选\n      listfilterVal: null,\n      // 自选币对\n      mySymbolList: myStorage.get('mySymbol') || [],\n      setMyMarketSwitch: true,\n      // 市场横向滚动参数\n      slidePosition: 0,\n      maxPosition: 0,\n      // 是否有主区\n      maincoinFlag: false,\n      // 是否有创新区\n      newcoinFlag: false,\n      // 是否有观察区\n      seecoinFlag: false,\n      // 是否有解封区\n      unsealcoinFlag: false,\n      // 是否有减半区\n      halvecoinFlag: false,\n      // 在自选币对已经取消的\n      cancelStoreSymbol: []\n    };\n  },\n  props: {\n    moduleType: {\n      type: String,\n      default: 'ex'\n    }\n  },\n  computed: {\n    marketClass: function marketClass() {\n      if (this.moduleType === 'lever') {\n        return 'lever-market';\n      }\n\n      return '';\n    },\n    marketList: function marketList() {\n      if (this.$store.state.baseData.market) {\n        if (this.moduleType === 'ex') {\n          return this.$store.state.baseData.market.marketSort;\n        }\n\n        if (this.moduleType === 'lever') {\n          var keysArr = this.$store.state.baseData.market.marketSort;\n          var marketDataObj = this.$store.state.baseData.market.market;\n          var newSort = [];\n\n          if (keysArr && marketDataObj) {\n            keysArr.forEach(function (item) {\n              var syArrkeyArr = Object.keys(marketDataObj[item]);\n\n              if (syArrkeyArr.length) {\n                syArrkeyArr.forEach(function (symbolName) {\n                  if (marketDataObj[item][symbolName].is_open_lever && newSort.indexOf(item) < 0) {\n                    newSort.push(item);\n                  }\n                });\n              }\n            });\n          }\n\n          return newSort;\n        }\n      }\n\n      return [];\n    },\n    isLogin: function isLogin() {\n      return this.$store.state.baseData.isLogin;\n    },\n    optionalSymbolServerOpen: function optionalSymbolServerOpen() {\n      return this.$store.state.baseData.optional_symbol_server_open;\n    },\n    // 全部币种列表\n    coinList: function coinList() {\n      if (this.$store.state.baseData && this.$store.state.baseData.market) {\n        return this.$store.state.baseData.market.coinList;\n      }\n\n      return null;\n    }\n  },\n  watch: {\n    marketList: function marketList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.maxPosition = _this.$refs.marketUl.offsetWidth - _this.$refs.marketBar.offsetWidth;\n      });\n    },\n    // 搜索\n    listfilterVal: function listfilterVal(val) {\n      this.setData();\n\n      if (val) {\n        var reg = new RegExp(val, 'gim');\n        this.dataList = this.dataList_bar.filter(function (item) {\n          if (item.showSymbol) {\n            return item.showSymbol.symbol.match(reg);\n          }\n\n          return item.symbol.symbol.match(reg);\n        });\n      } else {\n        this.dataList = this.dataList_bar;\n      }\n    },\n    isLogin: function isLogin(val) {\n      if (val) {\n        this.mySymbolList = myStorage.get('mySymbol') || [];\n      }\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      if (this.moduleType === 'lever') {\n        this.marketCurrent = myStorage.get('leverMarkTitle');\n        this.symbolCurrent = myStorage.get('leverSymbolName');\n      }\n\n      this.$bus.$on('extend', function () {\n        _this2.shrinkBlock();\n      });\n      setTimeout(function () {\n        if (_this2.$refs.marketUl && _this2.$refs.marketBar) {\n          _this2.maxPosition = _this2.$refs.marketUl.offsetWidth - _this2.$refs.marketBar.offsetWidth;\n        }\n\n        _this2.$nextTick(function () {\n          var step = _this2.marketList.indexOf(_this2.marketCurrent);\n\n          if (step > 3) {\n            _this2.slideMarket('right', step - 3);\n          }\n        });\n      }, 0);\n      this.$bus.$on('SYMBOL_LIST', function (data) {\n        if (data) {\n          _this2.symbolList = data;\n          _this2.maincoinFlag = false;\n          _this2.newcoinFlag = false;\n          _this2.seecoinFlag = false;\n          _this2.unsealcoinFlag = false;\n          _this2.halvecoinFlag = false;\n          _this2.sortName = null;\n          _this2.sortType = null; // this.listfilterVal = '';\n\n          _this2.setData();\n        }\n      }); // 接收24小时行情数据\n\n      this.$bus.$on('MARKET_DATA', function (data) {\n        _this2.marketDataList = data;\n\n        _this2.setData();\n      });\n    },\n    symbolTitle: function symbolTitle(data) {\n      return [\"\".concat(getCoinShowName(data.symbol, this.coinList), \"/\").concat(getCoinShowName(data.unit, this.coinList))];\n    },\n    countSymbolItemState: function countSymbolItemState(item, v) {\n      var i = item.newcoinFlag === v;\n      var state = v === 0 ? !item.newcoinFlag || i : i;\n      return state;\n    },\n    unsealCountSymbolItemState: function unsealCountSymbolItemState(item) {\n      var symbol = item.symbol.symbol;\n      var state = false;\n\n      if (this.coinList[symbol] && this.coinList[symbol].isOvercharge && this.coinList[symbol].isOvercharge.toString() === '1') {\n        state = true;\n      }\n\n      return state;\n    },\n    setData: function setData() {\n      var _this3 = this;\n\n      var dataList = [];\n      var keyarr = Object.keys(this.symbolList);\n      this.maincoinFlag = false;\n      this.newcoinFlag = false;\n      this.seecoinFlag = false;\n      this.unsealcoinFlag = false;\n      this.halvecoinFlag = false;\n      keyarr.forEach(function (item) {\n        var _this3$symbolList$ite = _this3.symbolList[item],\n            isShow = _this3$symbolList$ite.isShow,\n            newcoinFlag = _this3$symbolList$ite.newcoinFlag;\n\n        if (_this3.marketDataList[item]) {\n          if (isShow || _this3.listfilterVal || _this3.marketCurrent === 'myMarket') {\n            var symbol = _this3.marketDataList[item].symbol.symbol; // 解封区\n\n            if (_this3.coinList[symbol] && _this3.coinList[symbol].isOvercharge && _this3.coinList[symbol].isOvercharge.toString() === '1') {\n              _this3.unsealcoinFlag = true;\n            }\n\n            if (newcoinFlag === 0) {\n              _this3.maincoinFlag = true;\n            }\n\n            if (newcoinFlag === 1) {\n              _this3.newcoinFlag = true;\n            }\n\n            if (newcoinFlag === 2) {\n              _this3.seecoinFlag = true;\n            }\n\n            if (newcoinFlag === 3 && _this3.coinList[symbol] && !_this3.coinList[symbol].isOvercharge) {\n              _this3.halvecoinFlag = true;\n            }\n\n            _this3.marketDataList[item].isShow = isShow;\n            dataList.push(_this3.marketDataList[item]);\n          }\n        }\n      });\n\n      if (this.sortType === 'down') {\n        dataList.sort(function (a, b) {\n          return parseFloat(b[_this3.sortName]) - parseFloat(a[_this3.sortName]);\n        });\n      }\n\n      if (this.sortType === 'up') {\n        dataList.sort(function (a, b) {\n          return parseFloat(a[_this3.sortName]) - parseFloat(b[_this3.sortName]);\n        });\n      }\n\n      if (!this.sortType) {\n        dataList.sort(function (a, b) {\n          return a.sort - b.sort;\n        });\n      }\n\n      if (this.listfilterVal) {\n        var reg = new RegExp(this.listfilterVal, 'gim');\n        this.dataList = this.dataList_bar.filter(function (item) {\n          if (item.showSymbol) {\n            return item.showSymbol.symbol.match(reg);\n          }\n\n          return item.symbol.symbol.match(reg);\n        });\n      } else {\n        this.dataList = dataList;\n      }\n\n      this.dataList_bar = dataList;\n    },\n    shrinkBlock: function shrinkBlock() {\n      var _this4 = this;\n\n      this.$emit('shrinkBlock');\n      this.$bus.$emit('shrinkBlock');\n      this.$nextTick(function () {\n        if (_this4.$refs.marketUl && _this4.$refs.marketBar) {\n          _this4.maxPosition = _this4.$refs.marketUl.offsetWidth - _this4.$refs.marketBar.offsetWidth;\n        }\n      });\n    },\n    serachShrinkBlock: function serachShrinkBlock() {\n      // this.$refs.serachInp.focus();\n      this.$emit('serachShrinkBlock');\n      this.$refs.tradeFind.focusFn();\n    },\n    inputchanges: function inputchanges(v) {\n      this.listfilterVal = v;\n    },\n    // 切换市场\n    switchMarket: function switchMarket(data) {\n      this.cancelStoreSymbol = [];\n      this.marketCurrent = data;\n      this.$bus.$emit('ON_MARKET_SWITCH', data);\n    },\n    // 切换币对\n    switchSymbol: function switchSymbol(data) {\n      // 判断 tradingview 已经初始化完成\n      // if (window.tvWidget) {\n      this.symbolCurrent = data;\n      this.$bus.$emit('ON_SYMBOL_SWITCH', data); // }\n    },\n    // 币对排序\n    sorteEvent: function sorteEvent(key) {\n      var _this5 = this;\n\n      this.$nextTick(function () {\n        if (!_this5.sortName) {\n          _this5.sortName = key;\n          _this5.sortType = 'down';\n\n          _this5.setData();\n        } else if (_this5.sortType === 'down') {\n          _this5.sortName = key;\n          _this5.sortType = 'up';\n\n          _this5.setData();\n        } else if (_this5.sortType === 'up') {\n          _this5.sortName = null;\n          _this5.sortType = null;\n\n          _this5.setData();\n        }\n\n        _this5.dataList_bar = _this5.dataList;\n      });\n    },\n    // 设置 自选币对\n    setMyMarket: function setMyMarket(symbol) {\n      var _this6 = this;\n\n      var url = this.$store.state.url.common.optional_symbol;\n\n      if (this.optionalSymbolServerOpen === 1) {\n        url = this.$store.state.url.common.optional_symbols;\n      } // 防止重复点击\n\n\n      if (!this.setMyMarketSwitch) return;\n      this.setMyMarketSwitch = false;\n\n      if (this.marketCurrent === 'myMarket') {\n        this.cancelStoreSymbol.push(symbol);\n      } else {\n        this.cancelStoreSymbol = [];\n      }\n\n      var mySymbol = myStorage.get('mySymbol') || [];\n      var addOrDelete = true;\n\n      if (mySymbol.length && mySymbol.indexOf(symbol) > -1) {\n        mySymbol = mySymbol.filter(function (item) {\n          return item !== symbol;\n        });\n        addOrDelete = false;\n      } else {\n        mySymbol.push(symbol);\n        addOrDelete = true;\n      }\n\n      if (this.optionalSymbolServerOpen === 1 && this.isLogin) {\n        this.axios({\n          url: url,\n          headers: {},\n          params: {\n            operationType: addOrDelete === true ? '1' : '2',\n            // 0批量添加 1单个添加 2单个删除\n            symbols: symbol\n          },\n          method: 'post'\n        }).then(function (data) {\n          if (data.code === '0') {\n            _this6.setMyMarketSwitch = true;\n            _this6.mySymbolList = mySymbol;\n            myStorage.set('mySymbol', mySymbol);\n          } else {\n            _this6.$bus.$emit('tip', {\n              text: data.msg,\n              type: 'error'\n            });\n          }\n        });\n      } else {\n        this.setMyMarketSwitch = true;\n        this.mySymbolList = mySymbol;\n        myStorage.set('mySymbol', mySymbol);\n      }\n    },\n    slideMarket: function slideMarket(type) {\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var position = parseFloat(this.slidePosition);\n      var width = this.$refs.marketBar.offsetWidth * step / 2;\n\n      if (type === 'left') {\n        position += width;\n\n        if (position > 0) {\n          position = 0;\n        }\n      } else {\n        position -= width;\n\n        if (position < -this.maxPosition) {\n          position = -this.maxPosition;\n        }\n      }\n\n      this.slidePosition = \"\".concat(position, \"px\");\n    }\n  }\n};",null]}