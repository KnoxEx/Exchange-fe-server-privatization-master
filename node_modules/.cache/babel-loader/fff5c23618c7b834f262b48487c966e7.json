{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/trade/gridDialog/GridTabel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/trade/gridDialog/GridTabel.vue","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toArray from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/toArray\";\nimport _toConsumableArray from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getComplexType } from 'blockchain-ui-privatization/utils';\nexport default {\n  name: 'GridTabel',\n  props: {\n    h5Width: {\n      type: String,\n      default: '800px'\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 表头数据列表\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 表格数据列表\n    dataList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 展开数据\n    subContent: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 整个表格根元素的class\n    classes: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    // 表头class\n    headClasses: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    // 表内容class\n    bodyClasses: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    // 表格每一行class\n    lineClasses: {\n      type: [String, Array],\n      default: function _default() {\n        return ['b—3-bd'];\n      }\n    },\n    // 表格每一行的hover class\n    lineClassesHover: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    // 大于多少条后出现滚动条\n    lineNumber: {\n      type: Number,\n      default: 20\n    },\n    // 表格每一行的高度\n    cellHeight: {\n      type: Number,\n      default: 50\n    },\n    // 表头高度\n    headHeight: {\n      type: Number,\n      default: 30\n    },\n    // sub 表头\n    subColumns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // sub 表的自定义class\n    subClass: {\n      type: String,\n      default: ''\n    },\n    subContentId: {\n      type: [Number, String]\n    },\n    subLoading: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: Object,\n      default: function _default() {},\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      // 是否排序\n      isSorte: false,\n      // 排序 使用的Key\n      sorteKey: null,\n      // 排序方向\n      sortType: null,\n      // 表头单元格的宽度\n      cellWidth: [],\n      // sub 显示的 id\n      subPpenId: null,\n      subIsOpen: 0,\n      // 滚动条配置\n      ops: {\n        rail: {\n          gutterOfSide: '0px'\n        }\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.setCellWidth();\n    this.$bus.$on('WINFOW_ON_RESIIZE', function () {\n      _this.setCellWidth();\n    });\n  },\n  computed: {\n    classBoxStyle: function classBoxStyle() {\n      // const max = window.matchMedia('(max-width:960px)');\n      var str = 'width: 100%;'; // if (max.matches) {\n\n      str += \"min-width: \".concat(this.h5Width); // }\n\n      return str;\n    },\n    // 表格 根目录 class\n    classBox: function classBox() {\n      var cls = this.isType(this.classes) === 'Array' ? _toConsumableArray(this.classes) : this.classes;\n      return ['common-table', 'a-5-bg', cls];\n    },\n    // 表头 class\n    classHead: function classHead() {\n      var cls = this.isType(this.headClasses) === 'Array' ? _toConsumableArray(this.headClasses) : this.headClasses;\n      return ['table-head', 'a-3-bd', cls];\n    },\n    // 表格行 class\n    classLine: function classLine() {\n      var cls = this.isType(this.lineClasses) === 'Array' ? _toConsumableArray(this.lineClasses) : this.lineClasses;\n      return ['a-3-bd', cls];\n    },\n    // 表格 数据列表 设置排序\n    tableDataList: function tableDataList() {\n      if (!this.dataList || !this.dataList.length) return [];\n\n      if (this.isSorte) {\n        return this.sortType === 'down' ? this.quickSort(this.dataList) : this.quickSort(this.dataList).reverse();\n      }\n\n      return this.dataList;\n    },\n    // 获取表头传入的宽\n    columnsWidth: function columnsWidth() {\n      var _this$columns = _toArray(this.columns),\n          columns = _this$columns.slice(0);\n\n      var arr = [];\n      columns.forEach(function (item, i) {\n        var obj = {\n          index: i\n        };\n\n        if (item.width) {\n          obj.width = item.width;\n        }\n\n        if (item.align) {\n          obj['text-align'] = item.align;\n        }\n\n        if (item.styleClass) {\n          obj.styleClass = item.styleClass;\n        }\n\n        arr.push(obj);\n      });\n      return arr;\n    },\n    // 表格内容 高度 超出高度 出现滚动条\n    tableBodyHeight: function tableBodyHeight() {\n      if (this.tableDataList.length <= this.lineNumber) {\n        return false;\n      }\n\n      return {\n        height: \"\".concat(this.lineNumber * this.cellHeight, \"px\")\n      };\n    }\n  },\n  watch: {\n    // 监听表格数据的变化\n    dataList: function dataList(val) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        // 重新设置表头单元格的宽度\n        _this2.setCellWidth();\n      }, 0);\n\n      if (val) {// 设置成默认排序\n        // this.isSorte = false;\n        // 排序 使用的Key\n        // this.sorteKey = null;\n        // 排序方向\n        // this.sortType = null;\n      }\n    }\n  },\n  methods: {\n    isObjectType: function isObjectType(element) {\n      return getComplexType(element) === 'Object';\n    },\n    isObjectTypeJoinClass: function isObjectTypeJoinClass(element) {\n      return this.isObjectType(element) && element.class ? element.class : '';\n    },\n    isObjectTypeJoinStyle: function isObjectTypeJoinStyle(element) {\n      return this.isObjectType(element) && element.style ? element.style : '';\n    },\n    isObjectTypeJoinText: function isObjectTypeJoinText(element) {\n      return this.isObjectType(element) && element.text ? element.text : element;\n    },\n    onChaneForm: function onChaneForm(item, id, val) {\n      var data = {};\n      data[id] = val;\n      this.$emit('elementClick', item.eventType, data);\n    },\n    listMouseOver: function listMouseOver(e) {\n      var colorMap = this.colorMap;\n      e.target.style.backgroundColor = colorMap['a-4-bg'];\n    },\n    listMouseOut: function listMouseOut(e) {\n      e.target.style.backgroundColor = 'transparent';\n    },\n    enter: function enter(index) {\n      this.hoverIndex = index;\n    },\n    leave: function leave() {\n      this.hoverIndex = null;\n    },\n    lineClassesH: function lineClassesH(index) {\n      if (index === this.hoverIndex) {\n        return this.lineClassesHover;\n      }\n\n      return null;\n    },\n    isType: function isType(obj) {\n      var types = Object.prototype.toString.call(obj);\n\n      if (types === '[object Array]') {\n        return 'Array';\n      }\n\n      if (types === '[object Object]') {\n        return 'Object';\n      }\n\n      return 'string';\n    },\n    // 表头文字 居中\n    cellStyleTh: function cellStyleTh(item) {\n      return {\n        'text-align': item.align\n      };\n    },\n    cellStyleClass: function cellStyleClass(index) {\n      if (this.columnsWidth.length) {\n        var obj = {};\n        this.columnsWidth.forEach(function (item) {\n          if (item.index === index && item.styleClass) {\n            obj = item.styleClass;\n          }\n        });\n        return obj;\n      }\n\n      return false;\n    },\n    // 设置 单元格 的宽度\n    cellStyleTd: function cellStyleTd(index) {\n      if (this.columnsWidth.length) {\n        var obj = {};\n        this.columnsWidth.forEach(function (item) {\n          if (item.index === index) {\n            obj = item;\n          }\n        });\n        return obj;\n      }\n\n      return false;\n    },\n    // 设置表头单元格的宽度\n    setCellWidth: function setCellWidth() {\n      var _this3 = this;\n\n      var tdFefsKeys = Object.keys(this.$refs);\n      this.cellWidth = [];\n      tdFefsKeys.forEach(function (item) {\n        if (item.indexOf('td') !== -1) {\n          if (_this3.$refs[item][0]) {\n            _this3.cellWidth.push(_this3.$refs[item][0].offsetWidth);\n          }\n        }\n      });\n    },\n    // 行 点击事件\n    lineClickEvent: function lineClickEvent(item) {\n      this.$emit('lineClick', item);\n    },\n    // 按钮 点击事件\n    elementClickEvent: function elementClickEvent(item, id) {\n      this.$emit('elementClick', item.eventType, id);\n\n      if (item.type === 'link') {\n        this.$router.push(item.links);\n      }\n    },\n    // 点击排序事件\n    sorteChane: function sorteChane(key, asynSorte) {\n      if (asynSorte) {\n        this.isSorte = true;\n        this.sortType = this.sortType === 'down' ? 'up' : 'down';\n\n        if (this.sorteKey !== key) {\n          this.sortType = 'down';\n          this.sorteKey = key;\n        }\n      }\n\n      this.$emit('sortOnChange', {\n        key: this.sorteKey,\n        type: this.sortType\n      });\n    },\n    getSortValue: function getSortValue(itemArr) {\n      var _this4 = this;\n\n      var val = null;\n\n      if (this.isType(itemArr) === 'Array') {\n        itemArr.forEach(function (option) {\n          if (_this4.isType(option) === 'Array') {\n            option.forEach(function (data) {\n              if (data.key === _this4.sorteKey) {\n                val = data.sortVal;\n              }\n            });\n          }\n        });\n      }\n\n      return parseFloat(val);\n    },\n    // 排序\n    quickSort: function quickSort(datas) {\n      var _this5 = this;\n\n      var _datas = _toArray(datas),\n          dataArray = _datas.slice(0);\n\n      if (!dataArray.length) {\n        return dataArray;\n      }\n\n      return dataArray.sort(function (a, b) {\n        return _this5.getSortValue(b.data) - _this5.getSortValue(a.data);\n      });\n    },\n    // 展开 sub 表格\n    opentSubCOntent: function opentSubCOntent(item, ids) {\n      this.subIsOpen = this.subPpenId !== ids ? 1 : 0;\n      this.$emit('elementClick', item.eventType, {\n        id: ids,\n        open: this.subPpenId !== ids ? 1 : 0\n      });\n      this.subPpenId = this.subPpenId === ids ? null : ids;\n    }\n  }\n};",null]}