{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/depth/depth.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/depth/depth.js","mtime":1640855673740},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { fixD, nul, division, thousandsComma as _thousandsComma } from '@/utils';\nexport default {\n  name: 'market',\n  data: function data() {\n    return {\n      wsData: {},\n      // 当前深度\n      activeDepat: 0,\n      depatHover: 0,\n      isShowDepat: false,\n      cellWidth: [120, 90, 90],\n      // 收起状态 盘口 和 实时成交显示哪个 ？\n      shrinksDdpthNewShow: 'D',\n      // 卖盘 高度\n      sellHeight: 235,\n      // 买盘 高度\n      buyHeight: 210,\n      // 显示条数\n      sellLineNumber: 10,\n      buyLineNumber: 10,\n      // 当前价格\n      activePrice: null,\n      priceClsss: null\n    };\n  },\n  computed: {\n    templateLayoutType: function templateLayoutType() {\n      return this.$store.state.baseData.templateLayoutType;\n    },\n    // 价格 数量 累计\n    theadList: function theadList() {\n      return [this.$t('futures.depth.theadList1'), // 价格\n      \"\".concat(this.$t('futures.depth.theadList2'), \" (\").concat(this.coUnit, \")\"), // '数量',\n      \"\".concat(this.$t('futures.depth.theadList3'), \" (\").concat(this.coUnit, \")\") // '总计',\n      ];\n    },\n    // 当前合约信息\n    contractInfo: function contractInfo() {\n      return this.$store.state.future.contractInfo;\n    },\n    // 深度级别列表\n    depathList: function depathList() {\n      if (this.contractInfo) {\n        var d = this.contractInfo.coinResultVo.depth;\n\n        if (d === ['0', '0', '0']) {\n          return ['0'];\n        }\n\n        return this.contractInfo.coinResultVo.depth;\n      }\n\n      return ['3', '2', '1'];\n    },\n    // 当前币对\n    symbolCurrent: function symbolCurrent() {\n      return this.$store.state.future.coTypeSymbol;\n    },\n    // 当前合约面值\n    multiplier: function multiplier() {\n      return Number(this.$store.state.future.multiplier);\n    },\n    // 合约数量单位\n    coUnit: function coUnit() {\n      return this.$store.state.future.coUnit;\n    },\n    // 数量单位类型Number\n    coUnitType: function coUnitType() {\n      return this.$store.state.future.coUnitType;\n    },\n    // 合约数量精度\n    volfix: function volfix() {\n      return this.$store.state.future.volfix;\n    },\n    // 合约币对价格精度\n    pricefix: function pricefix() {\n      return this.$store.state.future.pricefix;\n    },\n    // 标记价格、指数价格、资金费率\n    publicMarkertInfo: function publicMarkertInfo() {\n      var publicMarkertInfo = this.$store.state.future.publicMarkertInfo;\n\n      if (publicMarkertInfo) {\n        return {\n          // 标记价格\n          tagPrice: this.fixPrice(publicMarkertInfo.tagPrice),\n          // 指数价格\n          indexPrice: this.fixPrice(publicMarkertInfo.indexPrice)\n        };\n      }\n\n      return {\n        indexPrice: '--'\n      };\n    },\n    dataList: function dataList() {\n      var _this = this;\n\n      if (this.wsData) {\n        var data = this.wsData; // console.log(data);\n\n        var dataTypeKey = Object.keys(data);\n        var depthListData = {};\n        var maxTotal = 0;\n\n        if (dataTypeKey.length) {\n          dataTypeKey.forEach(function (item) {\n            var objItem = data[item];\n            var totalNum = 0;\n            var maxval = 0;\n            var dataArr = [];\n            var objKeys = null;\n\n            if (item === 'asks') {\n              objKeys = Object.keys(objItem).sort(function (a, b) {\n                return a - b;\n              });\n            } else {\n              objKeys = Object.keys(objItem).sort(function (a, b) {\n                return b - a;\n              });\n            } // 去掉 价格为零的\n\n\n            objKeys.forEach(function (itemKey) {\n              var itemArr = objItem[itemKey];\n\n              if (dataArr.length < 10) {\n                // 获取最大的数量\n                maxval = maxval < itemArr[1] ? itemArr[1] : maxval;\n                totalNum += itemArr[1];\n                var total = totalNum;\n                var vol = itemArr[1]; // 标的货币\n\n                if (_this.coUnitType === 1 && totalNum && _this.multiplier) {\n                  total = fixD(nul(totalNum, _this.multiplier), _this.volfix);\n                  vol = fixD(nul(vol, _this.multiplier), _this.volfix);\n                }\n\n                var objd = {\n                  // 总量\n                  total: total,\n                  // 价格\n                  price: fixD(itemArr[0], _this.pricefix),\n                  // 数量\n                  vol: vol,\n                  // 是否有变化\n                  diff: itemArr[2]\n                }; // 处理增量数据\n\n                if (data.newData && data.newData.indexOf(itemArr[0]) < 0) {\n                  objd.diff = 0;\n                }\n\n                if (vol > 0) {\n                  dataArr.push(objd);\n                }\n              }\n            });\n            depthListData[item] = dataArr;\n\n            if (maxTotal < maxval) {\n              maxTotal = maxval;\n            }\n          });\n          var asksMaxValue = 0;\n          var buysMaxValue = 0;\n\n          if (depthListData.asks && depthListData.asks.length) {\n            var index = depthListData.asks.length - 1;\n            asksMaxValue = depthListData.asks[index].total;\n          }\n\n          if (depthListData.buys && depthListData.buys.length) {\n            var _index = depthListData.buys.length - 1;\n\n            buysMaxValue = depthListData.buys[_index].total;\n          }\n\n          var maxTotalValue = Math.max(asksMaxValue, buysMaxValue);\n          return {\n            depthMaxNumber: maxTotalValue,\n            asksData: depthListData.asks.reverse(),\n            buyData: depthListData.buys\n          };\n        }\n      }\n\n      return {\n        asksData: [],\n        buyData: [],\n        depthMaxNumber: null\n      };\n    },\n    //  买一\n    buyOne: function buyOne() {\n      if (this.dataList && this.dataList.buyData.length) {\n        return this.swNumber(this.dataList.buyData[0].price);\n      }\n\n      return 0;\n    },\n    // 卖一\n    sellOne: function sellOne() {\n      if (this.dataList && this.dataList.asksData.length) {\n        return this.swNumber(this.dataList.asksData[0].price);\n      }\n\n      return 0;\n    },\n    // 获取当前合约最新价格（下单模块使用）\n    activeNewPrice: function activeNewPrice() {\n      var value = 0;\n\n      if (this.buyOne && this.sellOne && this.activePrice) {\n        value = this.medianValue(this.buyOne, this.sellOne, this.activePrice);\n      } else if (!this.buyOne && this.sellOne && this.activePrice) {\n        value = this.meanValue(this.sellOne, this.activePrice);\n      } else if (this.buyOne && !this.sellOne && this.activePrice) {\n        value = this.meanValue(this.buyOne, this.activePrice);\n      } else if (this.buyOne && this.sellOne && !this.activePrice) {\n        value = this.meanValue(this.buyOne, this.sellOne);\n      } else {\n        var arr = [this.buyOne, this.sellOne, this.activePrice];\n        arr.forEach(function (item) {\n          if (item) {\n            value = item;\n          }\n        });\n      }\n\n      return value;\n    }\n  },\n  watch: {\n    activeNewPrice: function activeNewPrice(val) {\n      this.$bus.$emit('ACTIVE_NEW_PRICE', val);\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      // 监听 深度数据\n      this.$bus.$on('DEPTH_DATA', function (data) {\n        // console.log(data);\n        _this2.wsData = data;\n      });\n      this.$bus.$on('activeWsData', function (data) {\n        if (data.close && data.close !== '--') {\n          _this2.activePrice = Number(data.close);\n        } else {\n          _this2.activePrice = '--';\n        }\n\n        _this2.priceClsss = data.class;\n      });\n    },\n    // 新价精度\n    fixPrice: function fixPrice(value) {\n      if (value) {\n        return fixD(value, this.pricefix);\n      }\n\n      return '--';\n    },\n    fixDepthNumber: function fixDepthNumber(val) {\n      if (val === 0 || val === '0') {\n        return 1;\n      }\n\n      if (val === 1 || val === '1') {\n        return 0.1;\n      }\n\n      var n = Number(val) - 1;\n      var num = 0;\n      var b = num.toFixed(n);\n      return \"\".concat(b, \"1\");\n    },\n    // 盘口 和 实时成交 切换\n    switchBlock: function switchBlock(type) {\n      this.shrinksDdpthNewShow = type;\n    },\n    handMouseenter: function handMouseenter(id) {\n      this.depatHover = id;\n    },\n    switchDepat: function switchDepat(id) {\n      this.activeDepat = id;\n      this.isShowDepat = false;\n      this.$bus.$emit('DEPTH_VALUE', this.activeDepat);\n    },\n    handMouseleave: function handMouseleave() {\n      this.depatHover = '';\n    },\n    // 转数字\n    swNumber: function swNumber(val) {\n      if (parseFloat(val).toString() !== 'NaN') {\n        return parseFloat(val);\n      }\n\n      return false;\n    },\n    // 三个数获取中间值\n    medianValue: function medianValue(a, b, c) {\n      if ((b - a) * (a - c) >= 0) {\n        return a;\n      }\n\n      if ((a - b) * (b - c) >= 0) {\n        return b;\n      }\n\n      return c;\n    },\n    // 两个数获取平均\n    meanValue: function meanValue(a, b) {\n      return division(a + b, 2);\n    },\n    thousandsComma: function thousandsComma(num) {\n      if (num) {\n        return _thousandsComma(num);\n      }\n\n      return num;\n    }\n  }\n};",null]}