{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/components/calculator/calculator.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/components/calculator/calculator.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\n\n/*\r\n@ 计算器\r\n@author HDD */\nimport { imgMap, colorMap, division, nul, fixD, fixInput, add, cut, thousandsComma as _thousandsComma } from '@/utils';\nexport default {\n  name: 'calculatorMode',\n  data: function data() {\n    return {\n      imgMap: imgMap,\n      colorMap: colorMap,\n      marginModel: 1,\n      // 隐藏底部按钮\n      haveOption: false,\n      tableLoading: false,\n      // 是否加载成功\n      dialogConfirmLoading: false,\n      //  表格数据\n      tableDataList: [],\n      // 选中的类型\n      categoryType: 1,\n      // 下单方向\n      sideType: 1,\n      // 表单\n      formData_1: {\n        title: '',\n        units: this.priceUnit,\n        fix: 8,\n        errorText: null,\n        value: null,\n        isShow: true\n      },\n      formData_2: {\n        title: '',\n        units: this.priceUnit,\n        fix: 8,\n        errorText: null,\n        value: null,\n        isShow: true\n      },\n      formData_3: {\n        title: '',\n        units: '',\n        fix: 8,\n        errorText: null,\n        value: null,\n        isShow: true\n      },\n      // 杠杆\n      stepPosition: 1,\n      currenttage: 1,\n      movement: 0,\n      // 杠杆值\n      leverage: 0,\n      // 最小杠杆倍数\n      minLeverage: 1,\n      // 最大杠杆倍数\n      maxLeverage: 100,\n      // 当前杠杆最高可持有仓位上限\n      maxNumber: 0,\n      // 开仓保证金\n      openMargin: 0.00,\n      openMargin_opi: 0,\n      openMarginClass: '',\n      // 收益额\n      revenue: 0.00,\n      revenue_opi: 0,\n      revenueClass: '',\n      // 平仓价格\n      closePrice: 0.00,\n      closePriceClass: '',\n      // 强平价格\n      forceClosePrice: 0.00,\n      forceClosePriceClass: '',\n      forceClosePriceNUm: true,\n      // 维持保证金率列表\n      ladderList: [],\n      // 头寸列表\n      leverCeiling: {},\n      // 杠杆输入框选中Class\n      inputActiveClass: ''\n    };\n  },\n  props: {\n    isShow: {\n      default: false,\n      type: Boolean\n    },\n    close: {\n      default: function _default() {},\n      type: Function\n    },\n    dataInfo: {\n      default: function _default() {},\n      type: Object\n    }\n  },\n  computed: {\n    lanText: function lanText() {\n      return {\n        text1: this.$t('futures.calculator.text1'),\n        // 计算器\"\n        text2: this.$t('futures.calculator.text2'),\n        // 杠杆\"\n        text3: this.$t('futures.calculator.text3'),\n        // 当前杠杆最高可持有头寸数\"\n        text4: this.$t('futures.calculator.text4'),\n        // 计算\"\n        text5: this.$t('futures.calculator.text5'),\n        // 计算结果\"\n        text6: this.$t('futures.calculator.text6'),\n        // 开仓保证金\"\n        text7: this.$t('futures.calculator.text7'),\n        // 收益额\"\n        text8: this.$t('futures.calculator.text8'),\n        // 回报率\"\n        text9: this.$t('futures.calculator.text9'),\n        // 平仓价格\"\n        text10: this.$t('futures.calculator.text10'),\n        // 无法达到该收益率\"\n        text11: this.$t('futures.calculator.text11'),\n        // 强平价格\"\n        text12: this.$t('futures.calculator.text12'),\n        // 开仓价格\"\n        text13: this.$t('futures.calculator.text13'),\n        // 平仓价格\"\n        text14: this.$t('futures.calculator.text14'),\n        // 数量\"\n        text15: this.$t('futures.calculator.text15'),\n        // 张\"\n        text16: this.$t('futures.calculator.text16'),\n        // 收益\"\n        text17: this.$t('futures.calculator.text17'),\n        // 多仓\"\n        text18: this.$t('futures.calculator.text18'),\n        // 空仓\"\n        text19: this.$t('futures.calculator.text19'),\n        // 买入做多\"\n        text20: this.$t('futures.calculator.text20'),\n        // 卖出做空\"\n        text21: this.$t('futures.calculator.text21'),\n        // 仓位数量\"\n        text22: this.$t('futures.calculator.text22'),\n        // 保证金数量\"\n        text23: this.$t('futures.calculator.text23'),\n        // 保证金不足以开仓\n        text24: this.$t('futures.calculator.text24') // 不会被强制平仓\n\n      };\n    },\n    // 用户配置信息\n    userConfig: function userConfig() {\n      return this.$store.state.future.futureUserConfig;\n    },\n    // 当前合约信息\n    contractInfo: function contractInfo() {\n      return this.$store.state.future.contractInfo;\n    },\n    // 当前合约ID\n    contractId: function contractId() {\n      return this.$store.state.future.contractId;\n    },\n    // 当前合约方向（1正向、0反向）\n    contractSide: function contractSide() {\n      if (this.contractInfo) {\n        return this.contractInfo.contractSide;\n      }\n\n      return 1;\n    },\n    // 当前合约保证金汇率\n    marginRate: function marginRate() {\n      if (this.contractInfo) {\n        return this.contractInfo.marginRate;\n      }\n\n      return 1;\n    },\n    // 数量单位类型Number(1标的货币 2张)\n    coUnitType: function coUnitType() {\n      return this.$store.state.future.coUnitType;\n    },\n    // 合约数量单位\n    volUnit: function volUnit() {\n      return this.$store.state.future.coUnit;\n    },\n    // 当前合约数量精度\n    volfix: function volfix() {\n      if (this.coUnitType === 1) {\n        return this.$store.state.future.volfix;\n      }\n\n      return 0;\n    },\n    volfix_two: function volfix_two() {\n      return this.$store.state.future.volfix;\n    },\n    // *\n    // 当前合约价格单位\n    priceUnit: function priceUnit() {\n      return this.$store.state.future.priceUnit;\n    },\n    // 当前合约面值\n    multiplier: function multiplier() {\n      return Number(this.$store.state.future.multiplier) || 1;\n    },\n    // 当前合约价格精度\n    pricefix: function pricefix() {\n      return this.$store.state.future.pricefix;\n    },\n    // 当前合约保证金币种\n    marginCoin: function marginCoin() {\n      if (this.contractInfo) {\n        return this.contractInfo.marginCoin;\n      }\n\n      return '';\n    },\n    // 当前合约保证金币种精度\n    marginCoinFix: function marginCoinFix() {\n      if (this.contractInfo && this.contractInfo.coinResultVo) {\n        return this.contractInfo.coinResultVo.marginCoinPrecision;\n      }\n\n      return 4;\n    },\n    // 用户信息配置-可持有仓位上限\n    // leverCeiling() {\n    //   if (this.userConfig) {\n    //     return this.userConfig.leverCeiling;\n    //   }\n    //   return null;\n    // },\n    // 类型（收益，平仓价格， 强平价格）\n    categoryTypeList: function categoryTypeList() {\n      return [{\n        id: 1,\n        text: this.lanText.text16,\n        // '收益',\n        classes: this.categoryType === 1 ? 'u-8-bg' : 'a-3-bg'\n      }, {\n        id: 2,\n        text: this.lanText.text13,\n        // '平仓价格',\n        classes: this.categoryType === 2 ? 'u-8-bg' : 'a-3-bg'\n      }, {\n        id: 3,\n        text: this.lanText.text11,\n        // '强平价格',\n        classes: this.categoryType === 3 ? 'u-8-bg' : 'a-3-bg'\n      }];\n    },\n    // 类型（收益，平仓价格， 强平价格）\n    sideTypeList: function sideTypeList() {\n      if (this.categoryType === 3) {\n        return [{\n          id: 1,\n          text: this.lanText.text17,\n          // '多仓',\n          classes: this.sideType === 1 ? 'u-1-bg' : 'a-3-bg'\n        }, {\n          id: 2,\n          text: this.lanText.text18,\n          // '空仓',\n          classes: this.sideType === 2 ? 'u-4-bg' : 'a-3-bg'\n        }];\n      }\n\n      return [{\n        id: 1,\n        text: this.lanText.text19,\n        // '买入做多',\n        classes: this.sideType === 1 ? 'u-1-bg' : 'a-3-bg'\n      }, {\n        id: 2,\n        text: this.lanText.text20,\n        // '卖出做空',\n        classes: this.sideType === 2 ? 'u-4-bg' : 'a-3-bg'\n      }];\n    },\n    // 杠杆选项\n    itemLvaue: function itemLvaue() {\n      return division(this.maxLeverage, 5);\n    },\n    // 杠杆\n    feeValue: function feeValue() {\n      return division(this.maxLeverage, 100);\n    },\n    // 是否禁止提交\n    dialogConfirmDisabled: function dialogConfirmDisabled() {\n      return !this.formVerify();\n    },\n    // 回报率\n    reportRate: function reportRate() {\n      // 回报率 = 收益额 / 保证金 * 100%\n      if (this.openMargin_opi && this.revenue_opi) {\n        return fixD(this.revenue_opi / this.openMargin_opi * 100, 2);\n      }\n\n      return 0;\n    },\n    reportRateClass: function reportRateClass() {\n      if (this.reportRate) {\n        if (Number(this.reportRate) > 0) {\n          return 'u-1-cl';\n        }\n\n        if (Number(this.reportRate) < 0) {\n          return 'u-4-cl';\n        }\n      }\n\n      return '';\n    },\n    // 标记价格\n    tagPrice: function tagPrice() {\n      var publicMarkertInfo = this.$store.state.future.publicMarkertInfo;\n\n      if (publicMarkertInfo) {\n        // 标记价格\n        return publicMarkertInfo.tagPrice;\n      }\n\n      return 0;\n    }\n  },\n  watch: {\n    dataInfo: function dataInfo(val) {\n      if (val.brokerId) {\n        this.getStopList();\n        this.initForm();\n      }\n    },\n    isShow: function isShow(val) {\n      if (val) {\n        this.init();\n      }\n\n      this.initForm();\n    },\n    'formData_1.value': function formData1(value) {\n      if (value && Number(value)) {\n        this.formData_1.errorText = null;\n      }\n    },\n    'formData_2.value': function formData2(value) {\n      if (value && Number(value)) {\n        this.formData_2.errorText = null;\n      }\n    },\n    'formData_3.value': function formData3(value) {\n      if (value && Number(value)) {\n        this.formData_3.errorText = null;\n      }\n    },\n    currenttage: function currenttage(val) {\n      if (val || val === 0) {\n        if (val > 100) {\n          this.currenttage = 100;\n        }\n\n        if (val < 2) {\n          this.leverage = 1;\n        } else {\n          this.leverage = Math.round(nul(this.currenttage, this.feeValue));\n        }\n      } else {\n        this.leverage = '';\n      }\n    },\n    leverage: function leverage(val) {\n      if (val) {\n        this.leverage = fixInput(val, 0);\n\n        if (Number(val) > this.maxLeverage) {\n          this.leverage = this.maxLeverage;\n        }\n\n        this.setPosition();\n        this.setMaxNumber();\n      }\n    }\n  },\n  methods: {\n    init: function init() {\n      // 初始化表单\n      this.initForm(); // 获取阶梯设置\n\n      this.getladderList();\n\n      if (this.userConfig) {\n        this.leverage = this.userConfig.nowLevel;\n        this.minLeverage = this.userConfig.minLevel;\n        this.maxLeverage = this.userConfig.maxLevel;\n      } else {\n        this.leverage = 20;\n      }\n\n      document.onmouseup = function () {\n        document.onmousemove = null;\n      };\n    },\n    // 设置表单参数\n    initForm: function initForm() {\n      this.openMargin = 0.00;\n      this.revenue = 0.00;\n      this.closePrice = 0.00;\n      this.forceClosePrice = 0.00;\n      this.openMarginClass = '';\n      this.revenueClass = '';\n      this.closePriceClass = '';\n      this.forceClosePriceClass = ''; //\n\n      this.formData_1.value = null;\n      this.formData_2.value = null;\n      this.formData_3.value = null;\n      this.formData_1.errorText = null;\n      this.formData_2.errorText = null;\n      this.formData_3.errorText = null;\n      this.formData_1.title = this.lanText.text12; // '开仓价格';\n\n      this.formData_2.title = this.lanText.text13; // '平仓价格';\n\n      this.formData_3.title = this.lanText.text14; // '数量';\n\n      this.formData_1.units = this.priceUnit;\n      this.formData_2.units = this.priceUnit;\n      this.formData_3.units = this.volUnit;\n      this.formData_1.fix = this.pricefix;\n      this.formData_2.fix = this.pricefix;\n      this.formData_3.fix = this.volfix;\n      this.formData_3.isShow = true;\n\n      if (this.categoryType === 2) {\n        this.formData_2.title = this.lanText.text8; // '回报率';\n\n        this.formData_2.units = '%';\n        this.formData_2.fix = 2;\n        this.formData_3.isShow = false;\n      }\n\n      if (this.categoryType === 3) {\n        this.formData_2.title = this.lanText.text21; // '仓位数量';\n\n        this.formData_3.title = this.lanText.text22; // '保证金数量';\n\n        this.formData_2.units = this.volUnit;\n        this.formData_3.units = this.marginCoin;\n        this.formData_2.fix = this.volfix;\n        this.formData_3.fix = this.marginCoinFix;\n      }\n    },\n    // 表单输入事件\n    changeInput: function changeInput(type, value) {\n      this[type].value = value;\n    },\n    // 表单验证\n    formVerify: function formVerify() {\n      if (!this.formData_1.value || !this.formData_2.value) {\n        return false;\n      }\n\n      if (this.categoryType !== 2 && !this.formData_3.value) {\n        return false;\n      }\n\n      return true;\n    },\n    // 提交订单\n    submit: function submit() {\n      if (!this.formVerify()) return; // 计算收益\n\n      var openPrice = this.formData_1.value; // 开仓价格\n\n      var closePrice = this.formData_2.value; // 平仓价格 || 回报率 || 3:仓位数量\n\n      var volume = this.setNumber(this.formData_3.value); // 数量 || 3:保证金数量\n\n      if (this.categoryType === 1) {\n        // 开仓保证金**（this.contractSide 1：正向  0：反向）\n        // 正向合约：所需保证金=初始保证金 = 数量 * 开仓价格 / 杠杆 / 保证金汇率\n        // 反向合约：所需保证金=初始保证金 = 数量 / 开仓价格 / 杠杆 / 保证金汇率\n        var v1 = this.contractSide === 1 ? nul(volume, openPrice) : division(volume, openPrice);\n        var v2 = division(division(v1, this.leverage), this.marginRate);\n        this.openMargin_opi = v2;\n        this.openMargin = fixD(v2, this.marginCoinFix);\n\n        if (Number(this.openMargin) > 0) {\n          this.openMarginClass = 'u-1-cl';\n        }\n\n        if (Number(this.openMargin) < 0) {\n          this.openMarginClass = 'u-4-cl';\n        } // 收益额\n        // 正向合约：\n        //   买入做多 收益额=（平仓价格 - 开仓价格）* 数量 / 保证金汇率\n        //   卖出做空 收益额=（平仓价格 - 开仓价格）* 数量 / 保证金汇率 * -1\n        // 反向合约：\n        //   买入做多 收益额=（1/平仓价格 - 1/开仓价格）* 数量 / 保证金汇率 * -1\n        //   卖出做空 收益额=（1/平仓价格 - 1/开仓价格）* 数量 / 保证金汇率\n\n\n        var n2;\n\n        if (this.contractSide === 1) {\n          n2 = closePrice - openPrice;\n        } else {\n          n2 = division(1, closePrice) - division(1, openPrice);\n        }\n\n        var n3 = division(nul(n2, volume), this.marginRate); // 买入做多\n\n        var revenue = this.contractSide === 1 ? n3 : n3 * -1;\n\n        if (this.sideType === 2) {\n          // 卖出做空\n          revenue = this.contractSide === 1 ? n3 * -1 : n3;\n        }\n\n        this.revenue_opi = revenue;\n        this.revenue = fixD(revenue, this.marginCoinFix);\n\n        if (Number(this.revenue) > 0) {\n          this.revenueClass = 'u-1-cl';\n        }\n\n        if (Number(this.revenue) < 0) {\n          this.revenueClass = 'u-4-cl';\n        } // this.contractSide === 1\n\n      } // 计算平仓价格\n\n\n      if (this.categoryType === 2) {\n        // 平仓价格\n        // （单位：计价货币）\n        // 正向合约：\n        // 买入做多 平仓价格 = 开仓价格 *（杠杆 + 回报率） / 杠杆\n        // 卖出做空 平仓价格 = 开仓价格 *（杠杆 - 回报率） / 杠杆\n        // 反向合约：\n        // 买入做多 平仓价格 = 开仓价格 * 杠杆  /  （杠杆 - 回报率）\n        // 卖出做空 平仓价格 = 开仓价格 * 杠杆  /  （杠杆 + 回报率）\n        var reportRate = division(closePrice, 100); // 杠杆 + 回报率\n\n        var M1 = add(this.leverage, reportRate); // 杠杆 - 回报率\n\n        if (this.contractSide === 1 && this.sideType === 2 || this.contractSide === 0 && this.sideType === 1) {\n          M1 = cut(this.leverage, reportRate);\n        }\n\n        var value; // 正向\n\n        if (this.contractSide === 1) {\n          value = division(nul(openPrice, M1), this.leverage);\n        } else {\n          value = division(nul(openPrice, this.leverage), M1);\n        }\n\n        if (value <= 0) {\n          this.closePrice = 'none';\n        } else {\n          this.closePrice = fixD(value, this.pricefix);\n\n          if (Number(this.closePrice) > 0) {\n            this.closePriceClass = 'u-1-cl';\n          }\n\n          if (Number(this.closePrice) < 0) {\n            this.closePriceClass = 'u-4-cl';\n          }\n        }\n      }\n\n      if (this.categoryType === 3) {\n        // 强平价格\n        // （单位：计价货币）\n        // 正向合约：\n        // 多仓 强平价格 = （保证金数量 / 保证金汇率 - 仓位数量 * 开仓价格） / （（维持保证金率 + 手续费率 - 1）* 仓位数量）\n        // 空仓 强平价格 = （保证金数量 / 保证金汇率 + 仓位数量 * 开仓价格） / （（维持保证金率 + 手续费率 + 1）* 仓位数量 ）\n        // 反向合约：\n        // 多仓 强平价格 = （（维持保证金率 + 手续费率 + 1）* 仓位数量）/ （保证金数量 / 保证金汇率 - 仓位数量 / 开仓价格）\n        // 空仓 强平价格 = （（维持保证金率 + 手续费率 - 1）* 仓位数量）/ （保证金数量 / 保证金汇率 + 仓位数量 / 开仓价格）\n        // 维持保证金率 = （仓位数量 * 标记价格）所在的挡位的维持保证金率\n        // 手续费=0.00075\n        // this.marginRate  保证金汇率\n        closePrice = this.setNumber(this.formData_2.value); // 3:仓位数量\n\n        volume = this.formData_3.value; // 3:保证金数量\n\n        var sRate = 0.00075; // 手续费\n\n        var Y1 = closePrice * this.tagPrice; // 仓位数量 * 标记价格\n\n        var mRate = this.getladderValue(Y1); // 获取维持保证金率\n        // 保证金数量 / 保证金汇率\n\n        var Y2 = division(volume, this.marginRate); // 正向 = 仓位数量 * 开仓价格\n        // 反向 = 仓位数量 / 开仓价格\n\n        var Y3 = this.contractSide === 1 ? nul(closePrice, openPrice) : division(closePrice, openPrice); // 正向 多仓 || 反向 空仓 = 保证金数量 / 保证金汇率 - 仓位数量 * 开仓价格 :\n\n        var Y4 = cut(Y2, Y3); // 正向 多仓 || 反向 空仓 = （维持保证金率 + 手续费率 - 1）\n\n        var Y5 = cut(add(mRate, sRate), 1); //  正向 空仓 || 反向 多仓\n\n        if (this.contractSide === 1 && this.sideType === 2 || this.contractSide === 0 && this.sideType === 1) {\n          // 保证金数量 / 保证金汇率 + 仓位数量 * 开仓价格\n          Y4 = add(Y2, Y3); // 维持保证金率 + 手续费率 + 1\n\n          Y5 = add(add(mRate, sRate), 1);\n        } // Y5 * 仓位数量\n\n\n        var Y6 = nul(Y5, closePrice);\n\n        var _value = this.contractSide === 1 ? division(Y4, Y6) : division(Y6, Y4); // 多仓：强平价格>开仓价格 时 不显示强平价格，显示：保证金不足以开仓！\n\n\n        if (this.sideType === 1 && _value > openPrice) {\n          this.forceClosePrice = this.lanText.text23; // '保证金不足以开仓';\n\n          this.forceClosePriceNUm = false;\n          this.forceClosePriceClass = 'u-4-cl';\n        } else if (this.sideType === 2 && _value < openPrice) {\n          this.forceClosePrice = this.lanText.text23; // '保证金不足以开仓';\n\n          this.forceClosePriceNUm = false;\n          this.forceClosePriceClass = 'u-4-cl';\n        } else {\n          this.forceClosePrice = this.thousandsComma(fixD(_value, this.pricefix));\n          this.forceClosePriceNUm = true;\n\n          if (Number(_value) > 0) {\n            this.forceClosePriceClass = 'u-1-cl';\n          }\n\n          if (Number(_value) < 0) {\n            // 不会被强制平仓\n            this.forceClosePrice = this.lanText.text24;\n            this.forceClosePriceNUm = false;\n            this.forceClosePriceClass = 'u-4-cl';\n          }\n        }\n      }\n    },\n    // 设置数量（把张换成量）\n    setNumber: function setNumber(volume) {\n      // 如果当前数量单位是张\n      if (this.coUnitType === 2 && volume && this.multiplier) {\n        return fixD(nul(volume, this.multiplier), this.volfix_two);\n      }\n\n      return volume;\n    },\n    // 切换 /收益/平仓价格/强平价格\n    switchType: function switchType(type, id) {\n      if (this[type] !== id) {\n        this[type] = id;\n        this.initForm();\n        this.openMargin_opi = 0;\n        this.revenue_opi = 0;\n      }\n    },\n    // 设置最大持仓上限\n    setMaxNumber: function setMaxNumber() {\n      var num = 0;\n\n      if (this.leverCeiling) {\n        var keyArr = Object.keys(this.leverCeiling);\n        keyArr.sort(function (a, b) {\n          return parseFloat(a) - parseFloat(b);\n        });\n        var nextL = 0;\n\n        for (var index = 0; index < keyArr.length; index += 1) {\n          if (Number(this.leverage) > nextL && Number(this.leverage) <= keyArr[index]) {\n            num = this.leverCeiling[keyArr[index]];\n          }\n\n          nextL = keyArr[index];\n        } // 标的货币\n\n\n        if (this.coUnitType === 1) {\n          this.maxNumber = fixD(num, this.volfix);\n        } // 张\n\n\n        if (this.coUnitType === 2) {\n          this.maxNumber = fixD(division(num, this.multiplier), 0);\n        }\n      }\n    },\n    // 设置滑竿位置\n    setPosition: function setPosition() {\n      if (this.leverage) {\n        if (this.leverage < 2) {\n          this.stepPosition = 0;\n        } else {\n          this.stepPosition = division(this.leverage, this.feeValue);\n        }\n      } else {\n        this.stepPosition = 1;\n      }\n    },\n    onmousedownCick: function onmousedownCick(e) {\n      var bar = this.$refs.dragStepWrap;\n      var barLeft = bar.getBoundingClientRect().x;\n      var oevent = e || window.event;\n      var leftVal = oevent.clientX - barLeft;\n      var stepPosition = parseInt(nul(division(leftVal, bar.offsetWidth), 100), 0);\n      this.stepPosition = stepPosition < 1 ? 1 : stepPosition;\n      this.currenttage = stepPosition < 1 ? 1 : stepPosition;\n    },\n    // 杠杆滑动\n    onmousedown: function onmousedown(event) {\n      var _this = this;\n\n      var oevent = event || window.event;\n      var self = this.$refs.dragStep;\n      var bar = this.$refs.dragStepWrap;\n      var leftVal = oevent.clientX - self.offsetLeft;\n\n      document.onmousemove = function (e) {\n        oevent = e || window.event;\n        var movement = oevent.clientX - leftVal;\n\n        if (movement < 0) {\n          movement = 0;\n        } else if (movement > bar.offsetWidth) {\n          movement = bar.offsetWidth;\n        }\n\n        var stepPosition = parseInt(nul(division(movement, bar.offsetWidth), 100), 0);\n        _this.stepPosition = stepPosition < 1 ? 1 : stepPosition;\n        _this.currenttage = stepPosition < 1 ? 1 : stepPosition;\n\n        document.onmouseup = function () {\n          document.onmousemove = null;\n        };\n      };\n\n      document.onmouseup = function () {\n        document.onmousemove = null;\n      };\n    },\n    // 点击 滑动到指定倍数位置\n    dragStep: function dragStep(index) {\n      this.stepPosition = nul(index, 20);\n      this.currenttage = nul(index, 20);\n      this.$emit('levelChange', index);\n    },\n    // 乘法\n    nulFun: function nulFun(val1, val2) {\n      return Math.round(nul(val1, val2));\n    },\n    // 获取当前维持保证金率的值\n    getladderValue: function getladderValue(value) {\n      var rate = 0;\n\n      if (this.ladderList && this.ladderList.length) {\n        rate = this.ladderList[this.ladderList.length - 1].minMarginRate;\n\n        if (value === 0) {\n          rate = this.ladderList[0].minMarginRate;\n        } else {\n          this.ladderList.forEach(function (item) {\n            if (value > item.minPositionValue && value <= item.maxPositionValue) {\n              rate = item.minMarginRate;\n            }\n          });\n        }\n      }\n\n      return rate;\n    },\n    // 获取阶梯设置列表\n    getladderList: function getladderList() {\n      var _this2 = this;\n\n      this.axios({\n        url: this.$store.state.url.futures.getLadderInfo,\n        method: 'post',\n        hostType: 'co',\n        params: {\n          contractId: this.contractId\n        }\n      }).then(function (rs) {\n        _this2.tableLoading = false;\n\n        if (rs.code === '0' && rs.data) {\n          if (rs.data.ladderList) {\n            _this2.ladderList = rs.data.ladderList.ladderList || [];\n          }\n\n          if (rs.data.leverList) {\n            var leverListInfor = rs.data.leverList;\n            _this2.minLeverage = leverListInfor.minLever;\n            _this2.maxLeverage = leverListInfor.maxLever;\n          }\n\n          if (rs.data.leverCeiling) {\n            _this2.leverCeiling = rs.data.leverCeiling;\n          }\n\n          if (!_this2.userConfig) {\n            _this2.leverage = 20;\n          }\n        }\n      });\n    },\n    // 加\n    add: function add() {\n      if (Number(this.leverage) < Number(this.maxLeverage)) {\n        var leverage = Number(this.leverage) + 1;\n        this.leverage = leverage;\n      }\n    },\n    // 减\n    subtract: function subtract() {\n      if (Number(this.leverage) > 1) {\n        var leverage = Number(this.leverage) - 1;\n        this.leverage = leverage;\n      }\n    },\n    thousandsComma: function thousandsComma(num) {\n      if (num) {\n        return _thousandsComma(num);\n      }\n\n      return num;\n    }\n  }\n};",null]}