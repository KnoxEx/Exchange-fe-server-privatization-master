{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/components/positionLis/positionLis.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/components/positionLis/positionLis.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\r\n@ 持仓列表\r\n@author HDD */\nimport { nul, division, fixD, fixInput, thousandsComma as _thousandsComma, myStorage } from '@/utils';\nexport default {\n  name: 'positionList',\n  data: function data() {\n    return {\n      // 修改保证金弹框\n      isShowDialog: false,\n      formLisValue: {},\n      // 持仓列表\n      tableDataList: null,\n      // 平仓提交数据\n      submitData: {},\n      // 修改保证金数据\n      editMargindata: {},\n      // 二次确认数据\n      confirmData: {},\n      // 是否显示二次确认弹框\n      forcedReminderShow: false,\n      // 防止二次提交\n      submitFlag: true,\n      // 止盈止损弹框\n      stopOrderShow: false,\n      // 止盈止损张数\n      stopOrderdata: {},\n      cellWidth: [],\n      // class\n      activeLineId: '',\n      activeLineClass: '',\n      // 只显示当前合约开关\n      isShowCurPosition: myStorage.get('isShowCurPosition'),\n      // 显示已结算盈亏弹框\n      isAmountDialog: false,\n      // 已结算盈亏弹框数据\n      activeAmountData: {},\n      // 去掉已结算盈亏弹框的按钮\n      ishaveOption: false // positionListNumber: 0,\n\n    };\n  },\n  watch: {\n    positionList: function positionList(val) {\n      if (val && val.length) {\n        this.tableDataList = this.formPosition();\n      } else {\n        this.tableDataList = null;\n      }\n\n      this.setCellWidth();\n    },\n    userConfig: function userConfig(val, old) {\n      if (val && old) {\n        this.formLisValue = {};\n        this.$store.dispatch('getPositionList');\n        this.tableDataList = this.formPosition();\n      }\n    },\n    positionListNumber: function positionListNumber(val) {\n      this.$bus.$emit('positionListNumber', val);\n    }\n  },\n  computed: {\n    lanText: function lanText() {\n      return {\n        columns1: this.$t('futures.positionLis.columns1'),\n        columns2: this.$t('futures.positionLis.columns2'),\n        columns3: this.$t('futures.positionLis.columns3'),\n        columns4: this.$t('futures.positionLis.columns4'),\n        columns5: this.$t('futures.positionLis.columns5'),\n        columns6: this.$t('futures.positionLis.columns6'),\n        columns7: this.$t('futures.positionLis.columns7'),\n        columns8: this.$t('futures.positionLis.columns8'),\n        columns9: this.$t('futures.positionLis.columns9'),\n        columns10: this.$t('futures.positionLis.columns10'),\n        text1: this.$t('futures.positionLis.text1'),\n        text2: this.$t('futures.positionLis.text2'),\n        text3: this.$t('futures.positionLis.text3'),\n        text4: this.$t('futures.positionLis.text4'),\n        text5: this.$t('futures.positionLis.text5'),\n        text6: this.$t('futures.positionLis.text6'),\n        text7: this.$t('futures.positionLis.text7'),\n        text8: this.$t('futures.positionLis.text8'),\n        text9: this.$t('futures.positionLis.text9'),\n        text10: this.$t('futures.positionLis.text10'),\n        text11: this.$t('futures.positionLis.text11'),\n        text12: this.$t('futures.positionLis.text12'),\n        text13: this.$t('futures.positionLis.text13'),\n        text14: this.$t('futures.positionLis.text14'),\n        text15: this.$t('futures.positionLis.text15'),\n        text16: this.$t('futures.positionLis.text16'),\n        text17: this.$t('futures.positionLis.text17'),\n        text18: this.$t('futures.positionLis.text18'),\n        text19: this.$t('futures.positionLis.text19'),\n        text20: this.$t('futures.positionLis.text20'),\n        text21: this.$t('futures.positionLis.text21'),\n        text22: this.$t('futures.positionLis.text22'),\n        text23: this.$t('futures.positionLis.text23'),\n        text24: this.$t('futures.positionLis.text24'),\n        text25: this.$t('futures.positionLis.text25'),\n        text26: this.$t('futures.positionLis.text26')\n      };\n    },\n    // 表头\n    columns: function columns() {\n      // '量 ' : '张'\n      var coUnittext = this.coUnitType === 1 ? this.lanText.text4 : this.lanText.text5;\n      return [{\n        title: this.lanText.columns1 // '合约',\n\n      }, {\n        title: \"\".concat(this.lanText.columns2, \"(\").concat(coUnittext, \")\"),\n        // 仓位/可平\n        promptText: this.lanText.text6\n      }, {\n        title: this.lanText.columns3,\n        // '成本价',\n        promptText: this.lanText.text7\n      }, {\n        title: this.lanText.columns4,\n        // '标记价格',\n        promptText: this.lanText.text8\n      }, {\n        title: this.lanText.columns5,\n        // '强平价格',\n        promptText: this.lanText.text9\n      }, {\n        title: this.lanText.columns6,\n        // '占用保证金',\n        promptText: this.lanText.text10\n      }, {\n        title: this.lanText.columns7,\n        // '保证金率',\n        promptText: this.lanText.text11\n      }, {\n        title: this.lanText.columns8,\n        // '盈亏/收益率',\n        promptText: this.lanText.text12\n      }, {\n        title: this.lanText.text26 // '已结算盈亏',\n\n      }, {\n        title: this.lanText.columns9,\n        // '快速平仓',\n        classes: 'close-position'\n      }, {\n        title: this.lanText.columns10,\n        // '止盈止损',\n        promptText: this.lanText.text13\n      }];\n    },\n    // 用户配置信息\n    userConfig: function userConfig() {\n      return this.$store.state.future.futureUserConfig;\n    },\n    // 合约列表 MAP\n    contractListMap: function contractListMap() {\n      return this.$store.state.future.contractListMap;\n    },\n    // 当前合约ID\n    contractId: function contractId() {\n      return this.$store.state.future.contractId;\n    },\n    // 持仓列表\n    positionList: function positionList() {\n      return this.$store.state.future.positionList || [];\n    },\n    // 合约数量精度\n    volfix: function volfix() {\n      return this.$store.state.future.volfix;\n    },\n    // 数量单位类型Number（1标的货币 2张）\n    coUnitType: function coUnitType() {\n      return this.$store.state.future.coUnitType;\n    },\n    // 当前合约面值\n    multiplier: function multiplier() {\n      return Number(this.$store.state.future.multiplier);\n    },\n    // 合约数量单位\n    volUnit: function volUnit() {\n      return this.$store.state.future.coUnit;\n    },\n    // 合约币对价格精度\n    pricefix: function pricefix() {\n      return this.$store.state.future.pricefix;\n    },\n    positionTypeList: function positionTypeList() {\n      // ['', '全仓', '逐仓'];\n      return ['', this.lanText.text14, this.lanText.text15];\n    },\n    volumePlaceholder: function volumePlaceholder() {\n      // '输入数量' : '输入张数';\n      return this.coUnitType === 1 ? this.lanText.text24 : this.lanText.text25;\n    },\n    positionListNumber: function positionListNumber() {\n      if (this.tableDataList) {\n        var keyArr = Object.keys(this.tableDataList);\n        return keyArr.length;\n      }\n\n      return 0;\n    }\n  },\n  methods: {\n    // 设置表头单元格的宽度\n    setCellWidth: function setCellWidth() {\n      var _this = this;\n\n      var tdFefsKeys = Object.keys(this.$refs);\n      this.cellWidth = [];\n      tdFefsKeys.forEach(function (item) {\n        if (item.indexOf('td') !== -1) {\n          if (_this.$refs[item][0]) {\n            _this.cellWidth.push(\"\".concat(_this.$refs[item][0].offsetWidth, \"px\"));\n          }\n        }\n      });\n    },\n    // 当前合约名称\n    activeContractName: function activeContractName(data) {\n      var name = '';\n      var text = '';\n\n      if (data) {\n        var nameText = data.symbol ? data.symbol.replace('-', '') : '';\n\n        if (data.contractType !== 'E') {\n          text = \"-\".concat(data.marginCoin);\n        }\n\n        name = \"\".concat(nameText).concat(text);\n      }\n\n      return name;\n    },\n    // 设置精度\n    fixDset: function fixDset(value, fix) {\n      if (value && fix.toString()) {\n        return fixD(value, fix);\n      }\n\n      return '0.00';\n    },\n    // 设置精度 + 符号\n    fixDSign: function fixDSign(value, fix) {\n      if (value && fix.toString()) {\n        if (Number(value) > 0) {\n          return \"+\".concat(fixD(value, fix));\n        }\n\n        return fixD(value, fix);\n      }\n\n      return '0.00';\n    },\n    // 设置 标的货币单位的数量 还是 张数\n    setVolume: function setVolume(vol, fix, multiplier) {\n      var volume = vol; // 标的货币\n\n      if (this.coUnitType === 1 && multiplier) {\n        // 算出标的货币数量（数量 * 合约面值）\n        volume = fixD(nul(vol, multiplier), fix);\n      }\n\n      return volume;\n    },\n    // 获取仓位的合约和币对配置的信息\n    activeContractInfo: function activeContractInfo(name) {\n      if (this.contractListMap) {\n        return this.contractListMap[name];\n      }\n\n      return null;\n    },\n    // 换算百分比\n    setRate: function setRate(data) {\n      if (data) {\n        return \"\".concat(this.fixDset(nul(data, 100), 2), \"%\");\n      }\n\n      return '0.00%';\n    },\n    lineClass: function lineClass(contractId) {\n      if (contractId !== this.activeLineId) {\n        this.activeLineId = contractId;\n        var classes = this.activeLineClass === 'u-15-bg' ? '' : 'u-15-bg';\n        this.activeLineClass = classes;\n        return this.activeLineClass;\n      }\n\n      return this.activeLineClass;\n    },\n    // 格式化持有仓位\n    formPosition: function formPosition() {\n      var _this2 = this;\n\n      var arr = {};\n      var activeArr = {};\n\n      if (this.positionList && this.positionList.length) {\n        this.positionList.forEach(function (item) {\n          if (!_this2.isShowCurPosition || _this2.isShowCurPosition && item.contractId === _this2.contractId) {\n            _this2.activeLineId = '';\n            _this2.activeLineClass = '';\n\n            var activeData = _this2.activeContractInfo(item.contractName);\n\n            if (!activeData) return false;\n\n            var activeName = _this2.activeContractName(activeData);\n\n            var key = \"\".concat(activeName).concat(item.orderSide);\n            var priceVal = null;\n            var volumeVal = null;\n\n            if (_this2.formLisValue && _this2.formLisValue[key]) {\n              priceVal = _this2.formLisValue[key].price;\n              volumeVal = _this2.formLisValue[key].volume;\n            }\n\n            var sideClass = {\n              bg: 'u-1-bg',\n              color: 'u-1-cl'\n            };\n\n            if (item.orderSide === 'SELL') {\n              sideClass = {\n                bg: 'u-4-bg',\n                color: 'u-4-cl'\n              };\n            } // 强平价格\n\n\n            var reducePrice;\n\n            if (item.reducePrice && item.reducePrice <= 0) {\n              reducePrice = '--';\n            } else {\n              reducePrice = _this2.fixDset(item.reducePrice, activeData.priceFix);\n            } // 合约面值 ： 张\n\n\n            var coUnit = _this2.coUnitType === 1 ? activeData.multiplierCoin : _this2.lanText.text5; // '张';\n            // marginRate\n\n            var obj = {\n              positionId: item.id,\n              key: key,\n              contractName: item.contractName,\n              sideText: item.orderSide === 'SELL' ? _this2.lanText.text16 : _this2.lanText.text17,\n              // '空' : '多',\n              // 数量精度\n              volfix: activeData.volfix,\n              // 价格精度\n              priceFix: activeData.priceFix,\n              // classs\n              lineClass: _this2.lineClass(item.contractId),\n              // 合约名称\n              name: activeName,\n              // 合约ID\n              contractId: item.contractId,\n              // 合约币对\n              symbol: item.symbol,\n              // 买入卖出方向\n              orderSide: item.orderSide,\n              // 买卖Class\n              sideClass: sideClass,\n              // 杠杆\n              leverageLevel: item.leverageLevel,\n              // 仓位模式（1全仓 2逐仓）\n              positionType: item.positionType,\n              // 仓位模式文案（1全仓 2逐仓）\n              positionTypeText: _this2.positionTypeList[item.positionType],\n              // 数量单位\n              coUnit: coUnit,\n              // 张数\n              positionVolumeOriginal: item.positionVolume,\n              // 合约面值\n              multiplier: activeData.multiplier,\n              // 仓位数量\n              positionVolume: _this2.setVolume(item.positionVolume, activeData.volfix, activeData.multiplier),\n              // 可平数量\n              canCloseVolume: _this2.setVolume(item.canCloseVolume, activeData.volfix, activeData.multiplier),\n              // 开仓均价\n              openAvgPrice: _this2.fixDset(item.openAvgPrice, activeData.priceFix),\n              // 标记价格\n              indexPrice: _this2.fixDset(item.indexPrice, activeData.priceFix),\n              // 强平价格\n              reducePrice: reducePrice,\n              // 保证金\n              holdAmount: _this2.fixDset(item.holdAmount, activeData.mCionFix),\n              // 保证金币种\n              marginCoin: activeData.marginCoin,\n              // 保证金率\n              marginRate: _this2.setRate(item.marginRate),\n              // 盈亏\n              openRealizedAmount: _this2.fixDset(item.openRealizedAmount, activeData.mCionFix),\n              openRealizedClass: item.openRealizedAmount < 0 ? 'u-4-cl' : 'u-1-cl',\n              // 回报率\n              returnRate: _this2.setRate(item.returnRate),\n              returnRateClass: item.returnRate < 0 ? 'u-4-cl' : 'u-1-cl',\n              // 可用\n              canUseAmount: _this2.fixDset(item.canUseAmount, activeData.mCionFix),\n              // 可减少保证金\n              canSubMarginAmount: _this2.fixDset(item.canSubMarginAmount, activeData.mCionFix),\n              // 限价\n              price: priceVal,\n              volume: volumeVal,\n              // 已盈\n              realizedAmount: item.realizedAmount,\n              // 未盈\n              unRealizedAmount: item.unRealizedAmount,\n              // 阶梯最低维持保证金率\n              keepRate: item.keepRate,\n              // 平仓最大手续费率\n              maxFeeRate: item.maxFeeRate,\n              // 当前合约价格单位\n              quote: activeData.quote,\n              // 已结算盈亏\n              profitRealizedAmount: _this2.fixDSign(item.profitRealizedAmount, activeData.mCionFix),\n              // 持仓结算\n              settleProfit: _this2.fixDSign(item.settleProfit, activeData.mCionFix),\n              // 手续费\n              tradeFee: _this2.fixDSign(item.tradeFee, activeData.mCionFix),\n              // 资金费用\n              capitalFee: item.capitalFee && item.capitalFee !== '0' ? _this2.fixDSign(item.capitalFee, activeData.mCionFix) : '--',\n              // 平仓盈亏\n              closeProfit: item.closeProfit && item.closeProfit !== '0' ? _this2.fixDSign(item.closeProfit, activeData.mCionFix) : '--',\n              // 分摊金额\n              shareAmount: item.shareAmount && item.shareAmount !== '0' ? _this2.fixDSign(item.shareAmount, activeData.mCionFix) : '--'\n            };\n\n            if (_this2.contractId === item.contractId) {\n              activeArr[key] = obj;\n            } else {\n              arr[key] = obj;\n            }\n          }\n\n          return false;\n        });\n      }\n\n      return Object.assign(activeArr, arr);\n    },\n    // 输入平仓价格\n    priceChange: function priceChange(e, data) {\n      var _this3 = this;\n\n      var value = e.target.value;\n      var price = fixInput(value, data.priceFix) || '';\n      this.$nextTick(function () {\n        _this3.tableDataList[data.key].price = price;\n      });\n\n      if (!this.formLisValue[data.key]) {\n        this.formLisValue[data.key] = {\n          price: price\n        };\n      } else {\n        this.formLisValue[data.key].price = price;\n      }\n    },\n    // 输入平仓数量\n    volumeChange: function volumeChange(e, data) {\n      var _this4 = this;\n\n      var value = e.target.value;\n      var volume = fixInput(value, 0);\n\n      if (this.coUnitType === 1) {\n        volume = fixInput(value, data.volfix);\n      }\n\n      this.$nextTick(function () {\n        _this4.tableDataList[data.key].volume = volume;\n      });\n\n      if (!this.formLisValue[data.key]) {\n        this.formLisValue[data.key] = {\n          volume: volume\n        };\n      } else {\n        this.formLisValue[data.key].volume = volume;\n      }\n    },\n    // 平仓提交\n    closeOrder: function closeOrder(type, data) {\n      var canCloseVolume = data.canCloseVolume,\n          volume = data.volume,\n          price = data.price;\n\n      if (!price && type === 1) {\n        // 请输入价格\n        this.$bus.$emit('tip', {\n          text: this.lanText.text18,\n          type: 'error'\n        });\n        return false;\n      }\n\n      if (!volume) {\n        // 请输入数量\n        this.$bus.$emit('tip', {\n          text: this.lanText.text19,\n          type: 'error'\n        });\n        return false;\n      }\n\n      if (Number(volume) > Number(canCloseVolume)) {\n        // 超出可平数量\n        this.$bus.$emit('tip', {\n          text: this.lanText.text20,\n          type: 'error'\n        });\n        return false;\n      }\n\n      var submitVolume = volume; // 计算提交时 使用的数量[张]\n\n      if (this.coUnitType === 1) {\n        submitVolume = fixD(division(volume, data.multiplier), 0);\n      }\n\n      this.submitData = {\n        contractId: data.contractId,\n        // 合约ID\n        positionType: data.positionType,\n        // 持仓类型(1 全仓，2 仓逐)\n        side: data.orderSide === 'SELL' ? 'BUY' : 'SELL',\n        // 买卖方向（buy 买入，sell 卖出）\n        leverageLevel: data.leverageLevel,\n        // 杠杆倍数\n        price: price,\n        // 平仓价格(市价单传0)\n        volume: submitVolume,\n        // 平仓数量\n        open: 'CLOSE',\n        type: type,\n        // 订单类型 (1 limit， 2 market)\n        triggerPrice: null,\n        isConditionOrder: false // 是否是条件单\n\n      }; // 判断用户是否设置了开启二次确认\n\n      if (this.userConfig && this.userConfig.pcSecondConfirm) {\n        // 确认按钮class\n        var sideClass = 'u-4-bg';\n        var sideText = this.lanText.text21; // '卖出平多';\n\n        if (data.orderSide === 'SELL') {\n          sideText = this.lanText.text22; // '买入平空';\n\n          sideClass = 'u-1-bg';\n        }\n\n        this.confirmData = {\n          // 价格\n          price: type === 1 ? \"\".concat(price, \" \").concat(data.quote) : this.lanText.text23,\n          // '市价',\n          //  数量\n          vol: \"\".concat(volume, \" \").concat(data.coUnit),\n          // 保证金\n          marginCoin: \"0.00 \".concat(data.marginCoin),\n          // 币种\n          symbol: data.symbol.replace('-', ''),\n          // 订单类型Number（1限价单、2市价单、3条件单）\n          currentCategory: type,\n          // 确认按钮文案（买入做多...）\n          sideText: sideText,\n          // 确认按钮颜色class\n          sideClass: sideClass,\n          // 是否是开仓市价单\n          isOpenAndIsMarket: false,\n          // 条件单 触发价\n          triggerPrice: ''\n        };\n        this.forcedReminderShow = true;\n      } else {\n        this.dialogConfirmLoading = true;\n        this.submit();\n      }\n\n      return false;\n    },\n    // 下单提交\n    submit: function submit() {\n      var _this5 = this;\n\n      if (this.submitFlag) {\n        this.submitFlag = false;\n        this.axios({\n          url: this.$store.state.url.futures.orderCreate,\n          hostType: 'co',\n          method: 'post',\n          params: this.submitData\n        }).then(function (_ref) {\n          var code = _ref.code,\n              msg = _ref.msg;\n\n          if (code.toString() === '0') {\n            _this5.formLisValue = {};\n\n            _this5.$store.dispatch('getUserConfig');\n\n            _this5.forcedReminderShow = false;\n            var timer = setTimeout(function () {\n              _this5.$store.dispatch('getPositionList');\n            }, 500);\n            clearTimeout(timer);\n\n            _this5.$bus.$emit('tip', {\n              text: msg,\n              type: 'success'\n            });\n          } else {\n            _this5.$bus.$emit('tip', {\n              text: msg,\n              type: 'error'\n            });\n          }\n\n          _this5.dialogConfirmLoading = false;\n          _this5.submitFlag = true;\n        }).catch(function () {\n          _this5.submitFlag = true;\n        });\n      }\n    },\n    // 下单二次确认提交\n    submitOrder: function submitOrder(data) {\n      var _this6 = this;\n\n      // 如果勾选了下次不再提醒\n      if (data) {\n        this.axios({\n          url: this.$store.state.url.futures.editUserPageConfig,\n          hostType: 'co',\n          method: 'post',\n          params: {\n            pcSecondConfirm: 0,\n            contractId: this.contractId\n          }\n        }).then(function (_ref2) {\n          var code = _ref2.code,\n              msg = _ref2.msg;\n\n          if (code.toString() === '0') {\n            _this6.$store.dispatch('getUserConfig');\n          } else {\n            _this6.$bus.$emit('tip', {\n              text: msg,\n              type: 'error'\n            });\n          }\n        });\n      }\n\n      this.dialogConfirmLoading = true;\n      this.submit();\n    },\n    // 显示保证金弹框\n    openMarginDialog: function openMarginDialog(item) {\n      var activeData = this.activeContractInfo(item.contractName);\n\n      var obj = _objectSpread(_objectSpread({}, item), activeData);\n\n      this.editMargindata = obj;\n      this.isShowDialog = true;\n    },\n    // 显示止盈止损弹框\n    showStopOrder: function showStopOrder(item) {\n      var activeData = this.activeContractInfo(item.contractName);\n\n      var obj = _objectSpread(_objectSpread({}, item), activeData);\n\n      this.stopOrderdata = obj;\n      this.stopOrderShow = true;\n    },\n    // 弹框取消\n    dialogClose: function dialogClose() {\n      this.isShowDialog = false; // 关闭强制提醒（二次确认）弹框\n\n      this.forcedReminderShow = false; // 关闭 止盈止损弹框\n\n      this.stopOrderShow = false; // 关闭 已结算盈亏弹框\n\n      this.isAmountDialog = false;\n    },\n    thousandsComma: function thousandsComma(num) {\n      if (num) {\n        return _thousandsComma(num);\n      }\n\n      return num;\n    },\n    // 显示已结算盈亏弹框\n    isShowAmountDialog: function isShowAmountDialog(data) {\n      this.activeAmountData = data;\n      this.isAmountDialog = true;\n    },\n    // 已结算盈亏颜色\n    profitClass: function profitClass(val) {\n      if (val) {\n        if (val.indexOf('+') > -1) {\n          return 'u-1-cl';\n        }\n\n        return 'u-4-cl';\n      }\n\n      return 'b-1-cl';\n    },\n    init: function init() {\n      var _this7 = this;\n\n      this.$bus.$emit('positionListNumber', this.positionListNumber);\n\n      if (myStorage.get('isShowCurPosition') === undefined) {\n        this.isShowCurPosition = true;\n      }\n\n      if (this.positionList && this.positionList.length) {\n        this.tableDataList = this.formPosition();\n      } else {\n        this.tableDataList = null;\n      }\n\n      setTimeout(function () {\n        _this7.setCellWidth();\n      }, 500); // 监听 浏览器窗口大小改变\n\n      this.$bus.$on('WINFOW_ON_RESIIZE', function () {\n        _this7.setCellWidth();\n      }); // 监听 只显示当前合约\n\n      this.$bus.$on('isShowCurPosition', function (data) {\n        _this7.isShowCurPosition = data;\n        _this7.tableDataList = _this7.formPosition();\n      });\n    }\n  }\n};",null]}