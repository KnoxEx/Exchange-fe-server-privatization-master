{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/tradeForm.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/tradeForm.js","mtime":1641912189435},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _slicedToArray from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { fixD, division, getDigit, cut, thousandsComma as _thousandsComma, myStorage, nul } from '@/utils';\nexport default {\n  name: 'tradeForm',\n  data: function data() {\n    return {\n      // 按钮颜色class类型\n      showClassType: null,\n      // 交易类型 1开仓 2 平仓\n      transactionType: 1,\n      // 1 限价 2 市价 3 条件\n      currentCategory: 1,\n      // 是否是市价\n      isMarket: false,\n      // 只减仓\n      zhiJianCang: false,\n      // 百分比值\n      percentageVlaue: null,\n      // 百分比值鼠标移入效果\n      percentageVlaueHover: null,\n      // 下单按钮是否OK\n      isSubmitDisbled: false,\n      // 是否显示杠杆弹窗\n      leverageDialogShow: false,\n      // 是否显示 二次确认弹框\n      forcedReminderShow: false,\n      // 是否选中了订单类型\n      isCheckedOrdeType: null,\n      // 订单类型对象{}\n      ordeType: {},\n      // 鼠标移入订单类型对象\n      hoverOrdeType: {},\n      // buy买入、sell卖出？\n      sideType: null,\n      // 提交防止连击\n      submitFlag: true,\n      // 到期时间\n      expireTime: '14',\n      formData_1: {\n        title: '',\n        // '价格',\n        units: this.priceUnit,\n        fix: 8,\n        isShow: true,\n        errorText: null,\n        value: null\n      },\n      formData_2: {\n        title: '',\n        // '价格',\n        units: this.priceUnit,\n        fix: 8,\n        isShow: false,\n        errorText: null,\n        value: null\n      },\n      formData_3: {\n        title: '',\n        // '数量',\n        units: '',\n        // '张',\n        fix: 8,\n        isShow: true,\n        errorText: null,\n        value: null\n      },\n      // 下单提交数据\n      submitData: null,\n      // 二次确认数据\n      confirmData: {},\n      // 当前合约最新平均价\n      activeNewPrice: 0,\n      // 持仓模式 1：单向持仓 2：双向持仓\n      positionModel: myStorage.get('positionModel') || 2,\n      // 切换保证金模式弹框\n      depositDialogShow: false,\n      // 是否显示下单类型选项类表\n      ordeTypePtions: false\n    };\n  },\n  props: {},\n  computed: {\n    // 是否 是云合约在iframe中调用\n    isIframe: function isIframe() {\n      return this.$store.state.future.isIframe;\n    },\n    // 当前合约保证金模式\n    marginModelText: function marginModelText() {\n      if (this.userConfig) {\n        // 全仓 ： 逐仓\n        return this.userConfig.marginModel === 1 ? this.$t('futures.currentSymbol.marginModel1') : this.$t('futures.currentSymbol.marginModel2');\n      }\n\n      return this.$t('futures.currentSymbol.marginModel1');\n    },\n    lanText: function lanText() {\n      return {\n        mPrice: this.$t('futures.tradeForm.mPrice'),\n        textjz: this.$t('futures.tradeForm.textjz'),\n        text1: this.$t('futures.tradeForm.text1'),\n        text2: this.$t('futures.tradeForm.text2'),\n        text3: this.$t('futures.tradeForm.text3'),\n        text4: this.$t('futures.tradeForm.text4'),\n        text5: this.$t('futures.tradeForm.text5'),\n        text6: this.$t('futures.tradeForm.text6'),\n        text7: this.$t('futures.tradeForm.text7'),\n        text8: this.$t('futures.tradeForm.text8'),\n        text9: this.$t('futures.tradeForm.text9'),\n        text10: this.$t('futures.tradeForm.text10'),\n        text11: this.$t('futures.tradeForm.text11'),\n        text12: this.$t('futures.tradeForm.text12'),\n        text13: this.$t('futures.tradeForm.text13'),\n        text14: this.$t('futures.tradeForm.text14'),\n        text15: this.$t('futures.tradeForm.text15'),\n        text16: this.$t('futures.tradeForm.text16'),\n        text17: this.$t('futures.tradeForm.text17'),\n        text18: this.$t('futures.tradeForm.text18'),\n        text19: this.$t('futures.tradeForm.text19'),\n        text20: this.$t('futures.tradeForm.text20'),\n        text21: this.$t('futures.tradeForm.text21'),\n        text22: this.$t('futures.tradeForm.text22'),\n        text23: this.$t('futures.tradeForm.text23'),\n        text24: this.$t('futures.tradeForm.text24'),\n        text25: this.$t('futures.tradeForm.text25'),\n        text26: this.$t('futures.tradeForm.text26'),\n        text27: this.$t('futures.tradeForm.text27'),\n        text28: this.$t('futures.tradeForm.text28'),\n        text29: this.$t('futures.tradeForm.text29'),\n        text30: this.$t('futures.tradeForm.text30'),\n        text31: this.$t('futures.tradeForm.text31'),\n        text32: this.$t('futures.tradeForm.text32'),\n        text33: this.$t('futures.tradeForm.text33'),\n        text34: this.$t('futures.tradeForm.text34'),\n        text35: this.$t('futures.tradeForm.text35'),\n        text36: this.$t('futures.tradeForm.text36'),\n        text37: this.$t('futures.tradeForm.text37'),\n        text38: this.$t('futures.tradeForm.text38'),\n        text39: this.$t('futures.tradeForm.text39'),\n        text40: this.$t('futures.tradeForm.text40'),\n        text41: this.$t('futures.tradeForm.text41'),\n        text42: this.$t('futures.tradeForm.text42'),\n        text43: this.$t('futures.tradeForm.text43'),\n        text44: this.$t('futures.tradeForm.text44'),\n        text45: this.$t('futures.tradeForm.text45'),\n        text46: this.$t('futures.tradeForm.text46'),\n        text47: this.$t('futures.tradeForm.text47'),\n        text48: this.$t('futures.tradeForm.text48'),\n        text49: this.$t('futures.tradeForm.text49'),\n        text50: this.$t('futures.tradeForm.text50'),\n        text51: this.$t('futures.tradeForm.text51'),\n        text52: this.$t('futures.tradeForm.text52'),\n        text53: this.$t('futures.tradeForm.text53'),\n        text56: this.$t('futures.tradeForm.text56'),\n        text57: this.$t('futures.tradeForm.text57')\n      };\n    },\n    // 是否登录\n    isLogin: function isLogin() {\n      if (this.$store.state.baseData.isLogin) {\n        return this.$store.state.baseData.isLogin;\n      }\n\n      return false;\n    },\n    // 用户配置信息\n    userConfig: function userConfig() {\n      return this.$store.state.future.futureUserConfig;\n    },\n    // 持仓类型(1 全仓，2 仓逐)\n    marginModel: function marginModel() {\n      return this.userConfig ? this.userConfig.marginModel : 1;\n    },\n    // 当前合约ID\n    contractId: function contractId() {\n      return this.$store.state.future.contractId;\n    },\n    // 当前合约价格单位\n    priceUnit: function priceUnit() {\n      return this.$store.state.future.priceUnit;\n    },\n    // 当前合约价格精度\n    pricefix: function pricefix() {\n      return this.$store.state.future.pricefix;\n    },\n    // 到期时间\n    planTypeList: function planTypeList() {\n      return [{\n        name: this.lanText.text16,\n        // '24H',\n        id: '1'\n      }, {\n        name: this.lanText.text17,\n        // '7天',\n        id: '7'\n      }, {\n        name: this.lanText.text18,\n        // '14天',\n        id: '14'\n      }, {\n        name: this.lanText.text19,\n        // '30天',\n        id: '30'\n      }];\n    },\n    // 是否开通了合约交易\n    openContract: function openContract() {\n      return this.$store.state.future.openContract;\n    },\n    // 数量单位\n    volUnit: function volUnit() {\n      return this.$store.state.future.coUnit;\n    },\n    // 当前合约面值\n    multiplier: function multiplier() {\n      return Number(this.$store.state.future.multiplier) || 1;\n    },\n    // 当前合约名称\n    contractName: function contractName() {\n      return this.$store.state.future.contractName;\n    },\n    // 当前合约币对\n    contractSymbol: function contractSymbol() {\n      return this.$store.state.future.contractSymbol;\n    },\n    // 当前合约数量精度\n    volfix: function volfix() {\n      if (this.coUnitType === 1) {\n        return this.$store.state.future.volfix;\n      }\n\n      return 0;\n    },\n    // 数量单位类型Number 1标的货币, 2张\n    coUnitType: function coUnitType() {\n      return this.$store.state.future.coUnitType;\n    },\n    // 当前合约信息\n    contractInfo: function contractInfo() {\n      return this.$store.state.future.contractInfo;\n    },\n    // 当前合约币对信息\n    coinResultVo: function coinResultVo() {\n      if (this.contractInfo) {\n        return this.contractInfo.coinResultVo;\n      }\n\n      return {};\n    },\n    // 标的货币（数量单位 base）\n    baseCoin: function baseCoin() {\n      if (this.contractInfo) {\n        return this.contractInfo.base;\n      }\n\n      return null;\n    },\n    // 计价货币\n    quoteCoin: function quoteCoin() {\n      if (this.contractInfo) {\n        return this.contractInfo.quote;\n      }\n\n      return null;\n    },\n    // 标的货币（合约面值单位）\n    multiplierCoin: function multiplierCoin() {\n      if (this.contractInfo) {\n        return this.contractInfo.multiplierCoin;\n      }\n\n      return null;\n    },\n    // 标的货币精度（合约面值）\n    multiplierFix: function multiplierFix() {\n      if (this.contractInfo) {\n        return getDigit(this.contractInfo.multiplier);\n      }\n\n      return 4;\n    },\n    // 当前合约保证金币种\n    marginCoin: function marginCoin() {\n      if (this.contractInfo) {\n        return this.contractInfo.marginCoin;\n      }\n\n      return '';\n    },\n    // 当前合约保证金币种精度\n    marginCoinFix: function marginCoinFix() {\n      if (this.contractInfo && this.contractInfo.coinResultVo) {\n        return this.contractInfo.coinResultVo.marginCoinPrecision;\n      }\n\n      return 4;\n    },\n    // 用户合约资产\n    accountBalanceMap: function accountBalanceMap() {\n      return this.$store.state.future.futureAccountBalance;\n    },\n    accountBalance: function accountBalance() {\n      if (this.accountBalanceMap && this.marginCoin) {\n        return this.accountBalanceMap[this.marginCoin];\n      }\n\n      return {};\n    },\n    // 可用\n    canUseAmount: function canUseAmount() {\n      if (this.isLogin && this.accountBalance && this.accountBalance.canUseAmount !== '--') {\n        return fixD(this.accountBalance.canUseAmount, this.marginCoinFix);\n      }\n\n      return 0;\n    },\n    // 当前合约杠杆倍数\n    nowLevel: function nowLevel() {\n      if (this.userConfig) {\n        return this.userConfig.nowLevel || 20;\n      }\n\n      return 20;\n    },\n    // 当前合约保证金汇率\n    marginRate: function marginRate() {\n      if (this.contractInfo && this.contractInfo.marginRate) {\n        return this.contractInfo.marginRate;\n      }\n\n      return 1;\n    },\n    // 当前合约方向（1正向、0反向）\n    contractSide: function contractSide() {\n      if (this.contractInfo) {\n        return this.contractInfo.contractSide;\n      }\n\n      return 1;\n    },\n    // 当前合约可平数量\n    activeCanClose: function activeCanClose() {\n      var activeCanClose = this.$store.state.future.activeCanClose;\n      var obj = {};\n\n      if (activeCanClose) {\n        obj = activeCanClose[this.contractName];\n      }\n\n      return obj;\n    },\n    // 仓位方向（开仓 还是平仓）\n    orderSide: function orderSide() {\n      var open = 'OPEN';\n\n      if (this.zhiJianCang || this.transactionType === 2) {\n        open = 'CLOSE';\n      }\n\n      return open;\n    },\n    // 百分比列表\n    percentageList: function percentageList() {\n      return [10, 20, 50, 100];\n    },\n    // 开仓 平仓 Tab\n    switchTradeTypeList: function switchTradeTypeList() {\n      return [{\n        id: 1,\n        text: this.lanText.text20,\n        // '开仓',\n        classes: this.transactionType === 1 ? 'u-8-bg b-1-cl' : 'a-8-bg b-2-cl'\n      }, {\n        id: 2,\n        text: this.lanText.text21,\n        // '平仓',\n        classes: this.transactionType === 2 ? 'u-8-bg b-1-cl' : 'a-8-bg b-2-cl'\n      }];\n    },\n    // 限价单\\市价单\\条件单\n    categoryList: function categoryList() {\n      return [{\n        id: 1,\n        text: this.lanText.text22,\n        // '限价单',\n        classes: this.currentCategory === 1 ? 'a-5-bg b-1-cl' : 'a-8-bg b-2-cl'\n      }, {\n        id: 2,\n        text: this.lanText.text23,\n        // '市价单',\n        classes: this.currentCategory === 2 ? 'a-5-bg b-1-cl' : 'a-8-bg b-2-cl'\n      }, {\n        id: 3,\n        text: this.lanText.text24,\n        // '条件单',\n        classes: this.currentCategory === 3 ? 'a-5-bg b-1-cl' : 'a-8-bg b-2-cl'\n      }];\n    },\n    // 可买 可卖标题文案\n    openableData: function openableData() {\n      if (this.zhiJianCang || this.transactionType === 2) {\n        return {\n          buyText: this.lanText.text25,\n          // '可平空',\n          sellText: this.lanText.text26 // '可平多',\n\n        };\n      }\n\n      return {\n        buyText: this.lanText.text27,\n        // '可买',\n        sellText: this.lanText.text28 // '可卖',\n\n      };\n    },\n    // 订单类型列表\n    ordeTypeList: function ordeTypeList() {\n      return [{\n        title: this.lanText.text29,\n        // '只做maker',\n        // '只做Maker（Post-Only）订单保证用户只做maker，该订单不会立即在市场成交，假如此委托会立即与已有委托单成交，那么此委托单将被立即取消。',\n        text: this.lanText.text30,\n        id: 5\n      }, {\n        title: 'IOC',\n        // text: 'IOC（Immediately or Cancel）订单若不能立即成交则立即取消未成交的部分。',\n        text: this.lanText.text31,\n        id: 3\n      }, {\n        title: 'FOK',\n        // text: 'FOK（Fill or Kill）订单若不能全部成交则立即全部取消。',\n        text: this.lanText.text32,\n        id: 4\n      }];\n    },\n    // login 按钮信息\n    loginButton: function loginButton() {\n      if (this.isLogin && !this.openContract) {\n        return {\n          text: this.lanText.text33,\n          // '开通合约交易',\n          class: 'u-8-bg buyBtn u-16-cl'\n        };\n      }\n\n      return {\n        text: this.lanText.text34,\n        // '登录后进行交易',\n        class: 'u-8-bg buyBtn u-16-cl'\n      };\n    },\n    // 按钮信息\n    buttosContent: function buttosContent() {\n      if (this.transactionType === 2 || this.zhiJianCang) {\n        return {\n          buyButton: {\n            text: this.lanText.text35,\n            // '买入平空',\n            class: 'u-1-bg buyBtn b-1-cl'\n          },\n          sellButton: {\n            text: this.lanText.text36,\n            // '卖出平多',\n            class: 'u-4-bg sellBtn b-1-cl'\n          }\n        };\n      }\n\n      if (this.positionModel === 2) {\n        return {\n          buyButton: {\n            text: this.lanText.text37,\n            // '买入开多',\n            class: 'u-1-bg buyBtn b-1-cl'\n          },\n          sellButton: {\n            text: this.lanText.text38,\n            // '卖出开空',\n            class: 'u-4-bg sellBtn b-1-cl'\n          }\n        };\n      }\n\n      return {\n        buyButton: {\n          text: this.lanText.text39,\n          // '买入做多',\n          class: 'u-1-bg buyBtn b-1-cl'\n        },\n        sellButton: {\n          text: this.lanText.text40,\n          // '卖出做空',\n          class: 'u-4-bg sellBtn b-1-cl'\n        }\n      };\n    },\n    // 是否是 市价开仓\n    isOpenAndIsMarket: function isOpenAndIsMarket() {\n      // 市价单 && 不是只减仓\n      // 条件市价 && 不是只减仓 && transactionType=== 1 开仓  2平仓\n      if ((this.currentCategory === 2 || this.isMarket) && !this.zhiJianCang && this.transactionType === 1) {\n        return true;\n      }\n\n      return false;\n    },\n    // 输入的价格\n    inputPrice: function inputPrice() {\n      // 市价\n      if (this.currentCategory === 2 || this.isMarket) {\n        return 0;\n      } // 条件单\n\n\n      if (this.currentCategory === 3) {\n        return this.formData_2.value;\n      }\n\n      return Number(this.formData_1.value);\n    },\n    // 数量(张数) || 市价的开仓价值\n    inputVolume: function inputVolume() {\n      // 限价的数量 and 市价的开仓价值\n      var volume = this.formData_3.value; // 如果单位是标记货币 && 不是市价开仓(开仓价值)\n\n      if (this.coUnitType === 1 && !this.isOpenAndIsMarket && volume) {\n        // 转换成张\n        volume = division(volume, this.multiplier);\n      }\n\n      return Number(volume) || 0;\n    },\n    // 条件单的触发价\n    triggerPrice: function triggerPrice() {\n      if (this.currentCategory === 3) {\n        return this.formData_1.value;\n      }\n\n      return null;\n    },\n    // 提交时的订单类型\n    submitOrderType: function submitOrderType() {\n      // 订单类型 (1 limit， 2 market，3 IOC，4 FOK，5 POST_ONLY)\n      var type = this.currentCategory;\n\n      if (this.currentCategory === 3) {\n        type = this.isMarket ? 2 : 1;\n      }\n\n      if (this.isCheckedOrdeType && this.ordeType && this.ordeType.id) {\n        type = this.ordeType.id;\n      }\n\n      return type;\n    },\n    // 开仓价值 约等于\n    worthRate: function worthRate() {\n      // 正向： 开仓价值 / 本交易所最新价格 / 保证金汇率(币)\n      // 正向： 开仓价值 / 本交易所最新价格 / 保证金汇率(张)\n      // 反向： 开仓价值 * 本交易所最新价格 / 保证金汇率(币)\n      // 反向： 开仓价值 * 本交易所最新价格 / 保证金汇率(张)\n      // this.marginRate：保证金汇率\n      // this.multiplier： 合约面值\n      var value = this.countPercentageVlaue() || this.inputVolume;\n      var V1 = '';\n\n      if (value && this.activeNewPrice) {\n        // 正向\n        if (this.contractSide === 1) {\n          V1 = division(value, this.activeNewPrice);\n        } else {\n          // 反向\n          V1 = nul(value, this.activeNewPrice);\n        }\n\n        if (V1) {\n          return fixD(division(V1, this.marginRate), this.multiplierFix);\n        }\n      }\n\n      return 0;\n    },\n    // 价值\n    worthValue: function worthValue() {\n      var volume = this.countPercentageVlaue() || this.inputVolume;\n      var price = this.formData_1.value;\n\n      if (this.currentCategory === 3) {\n        price = this.formData_2.value;\n      }\n\n      if (volume && price) {\n        volume = nul(volume, this.multiplier); // 正向合约\n\n        if (this.contractSide === 1) {\n          return fixD(nul(volume, price), this.pricefix);\n        } // 反向合约\n        // const { volfix } = this.$store.state.future;\n\n\n        return fixD(division(volume, price), this.marginCoinFix);\n      }\n\n      return 0;\n    }\n  },\n  watch: {\n    // 用户配置信息\n    userConfig: function userConfig(val) {\n      if (val) {\n        //\n        this.positionModel = val.positionModel; // 只减仓\n\n        this.zhiJianCang = false; // 交易类型 1开仓 2 平仓\n\n        this.transactionType = 1; // 1 限价 2 市价 3 条件\n        // this.currentCategory = 1;\n        // 条件单是否是市价\n\n        this.isMarket = false; // 只减仓\n\n        this.zhiJianCang = false; // 设置表单布局\n\n        this.setFormType(); // 清空表单内容\n\n        this.clearFormData();\n      }\n    },\n    // 合约ID\n    contractId: function contractId() {\n      // 清空表单内容\n      this.clearFormData();\n    },\n    'formData_1.value': function formData1(value) {\n      if (value && Number(value)) {\n        this.formData_1.errorText = null;\n      }\n    },\n    'formData_2.value': function formData2(value) {\n      if (value && Number(value)) {\n        this.formData_2.errorText = null;\n      }\n    },\n    'formData_3.value': function formData3(value) {\n      if (value && Number(value)) {\n        this.formData_3.errorText = null;\n      }\n    },\n    volUnit: function volUnit(val) {\n      if (val) {\n        this.setFormType();\n      }\n    },\n    ordeTypeList: function ordeTypeList() {\n      var _this$ordeTypeList = _slicedToArray(this.ordeTypeList, 1),\n          ordeType = _this$ordeTypeList[0];\n\n      this.ordeType = ordeType;\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      // 监听喜好设置\n      this.$bus.$on('set-future', function (data) {\n        if (data && data.positionModel) {\n          _this.positionModel = data.positionModel;\n        }\n      }); // 监听获取当前最新价格\n\n      this.$bus.$on('ACTIVE_NEW_PRICE', function (val) {\n        if (val) {\n          _this.activeNewPrice = val;\n        }\n      }); // 监听点击盘口的价格\n\n      this.$bus.$on('HANDEL_PRICE', function (val) {\n        if (val) {\n          _this.formData_1.value = val;\n        }\n      });\n      this.setFormType(); // 设置默认订单类型\n\n      this.$nextTick(function () {\n        var _this$ordeTypeList2 = _slicedToArray(_this.ordeTypeList, 1),\n            ordeType = _this$ordeTypeList2[0];\n\n        _this.ordeType = ordeType;\n      });\n    },\n    // 显示弹框\n    showDialog: function showDialog(type) {\n      this.$bus.$emit(type);\n    },\n    // 开启弹框\n    setShowDialog: function setShowDialog(type) {\n      // 显示开通合约交易弹框\n      if (this.userConfig && !this.userConfig.openContract) {\n        this.$bus.$emit('OPEN_FUTURE');\n        return false;\n      }\n\n      if (type === 'leverageDialogShow' && this.userConfig && !this.userConfig.levelCanSwitch) {\n        // 本合约当前存在委托，不可调整杠杆\n        this.$bus.$emit('tip', {\n          text: this.$t('futures.tradeForm.text54'),\n          type: 'error'\n        });\n        return false;\n      }\n\n      if (type === 'depositDialogShow' && this.userConfig && !this.userConfig.marginModelCanSwitch) {\n        // '本合约当前存在委托/仓位，不可调整仓位类型'\n        this.$bus.$emit('tip', {\n          text: this.$t('futures.tradeForm.text55'),\n          type: 'error'\n        });\n        return false;\n      }\n\n      if (!this.isLogin) {\n        this.$bus.$emit('tip', {\n          text: this.lanText.text34,\n          type: 'error'\n        });\n      } else {\n        this.$store.dispatch('getUserConfig');\n        this[type] = true;\n      }\n\n      return false;\n    },\n    // 切换 开仓  和 平仓\n    switchTradeType: function switchTradeType(type) {\n      if (this.transactionType !== type) {\n        this.transactionType = type;\n        this.setFormType();\n        this.clearFormData();\n      }\n    },\n    // 切换 /普通/高级限价/计划\n    selectCategory: function selectCategory(id) {\n      if (this.currentCategory !== id) {\n        this.currentCategory = id; // 条件单是否是市价\n\n        this.isMarket = false;\n        this.setFormType();\n        this.clearFormData();\n      }\n    },\n    // 条件单切换 市价 and 限价\n    selectMarket: function selectMarket() {\n      if (this.isMarket) {\n        this.formData_3.value = '';\n      }\n\n      this.isMarket = !this.isMarket;\n      this.setFormType();\n      this.clearFormData('isMarket');\n    },\n    // 清除百分比\n    clearPercentage: function clearPercentage() {\n      this.percentageVlaue = null;\n      this.formData_3.value = null;\n      this.formData_3.percentageVlaue = null;\n      this.formData_1.percentageVlaue = null;\n    },\n    // 设置百分比\n    setPercentageVlaue: function setPercentageVlaue(value) {\n      this.percentageVlaue = value;\n\n      if (this.formData_3.isShow) {\n        this.formData_3.percentageVlaue = value;\n        this.formData_3.value = null;\n        this.formData_3.errorText = null;\n      } else {\n        this.formData_1.percentageVlaue = value;\n        this.formData_1.value = null;\n        this.formData_1.errorText = null;\n      }\n    },\n    // 计算百分比的数量\n    countPercentageVlaue: function countPercentageVlaue(type) {\n      if (!this.percentageVlaue) return 0;\n      var canNumber = type === 'BUY' ? this.maxCanBuyNumber : this.maxCanSellNumber;\n      if (!canNumber) return 0;\n      var number = 0; //  市价 开仓 非只减仓\n\n      if (this.isOpenAndIsMarket) {\n        // 百分比*可用*杠杆 / 保证金汇率 = 仓位价值\n        var percentageVlaue = division(this.percentageVlaue, 100); // 百分比 * 可用\n\n        var Np = nul(percentageVlaue, this.canUseAmount); // 根据余额算出可开\n\n        var val1 = division(nul(Np, this.nowLevel), this.marginRate); // 根据杠杆限制算出可开\n\n        var val2 = type === 'BUY' ? nul(percentageVlaue, this.V1Buy) : nul(percentageVlaue, this.V1Sell);\n        var val3 = Number(val1) < Number(val2) ? val1 : val2;\n        number = fixD(val3, this.pricefix);\n      } else {\n        // 百分比*（可买 || 可卖）= 数量\n        number = nul(division(this.percentageVlaue, 100), canNumber); // 如果当前单位是标的货币\n\n        if (this.coUnitType === 1 && number) {\n          // 换算成（张）\n          number = fixD(division(number, this.multiplier), 0);\n        }\n\n        if (this.coUnitType === 2) {\n          number = fixD(number, 0);\n        }\n      }\n\n      return number;\n    },\n    // 设置表单\n    setFormType: function setFormType() {\n      this.formData_1.promptText = null;\n      this.formData_3.promptText = null; // 限价\n\n      if (this.currentCategory === 1) {\n        this.formData_1.isShow = true;\n        this.formData_1.title = this.lanText.text11; //  '委托价格';\n\n        this.formData_1.units = this.priceUnit;\n        this.formData_1.fix = this.pricefix;\n        this.formData_3.isShow = true;\n        this.formData_3.units = this.volUnit;\n        this.formData_3.fix = this.volfix;\n      } // 市价\n\n\n      if (this.currentCategory === 2) {\n        this.isCheckedOrdeType = false; // 平仓 || 只减仓\n\n        if (this.transactionType === 2 || this.zhiJianCang) {\n          this.formData_1.isShow = false;\n          this.formData_3.isShow = true;\n        } else {\n          this.formData_1.isShow = false;\n          this.formData_3.isShow = true;\n        }\n      } // 条件单\n\n\n      if (this.currentCategory === 3) {\n        this.formData_1.isShow = true;\n        this.formData_2.isShow = true;\n        this.formData_3.isShow = true;\n        this.formData_1.title = this.lanText.text12; // '触发价';\n        // '当该合约的最新成交价达到该价格时，系统将按照你设置的下单价格和下单数量为你下单。';\n\n        this.formData_1.promptText = this.lanText.text13;\n        this.formData_2.title = this.lanText.text11; // '委托价格';\n\n        this.formData_1.units = this.priceUnit;\n        this.formData_2.fix = this.pricefix;\n        this.formData_1.fix = this.pricefix;\n      } else {\n        this.formData_2.isShow = false;\n      } // 如果是市价开仓\n\n\n      if (this.isOpenAndIsMarket) {\n        this.formData_3.title = this.lanText.text14; // '开仓价值';\n        // '需要开的仓位的价值，仓位价值 = 仓位数量 * 成交价格，实际成交的仓位数量与成交时的成交价格有关。';\n\n        this.formData_3.promptText = this.lanText.text15; // 正向\n\n        if (this.contractSide === 1) {\n          this.formData_3.units = this.priceUnit;\n          this.formData_3.fix = this.pricefix;\n        } else {\n          // 反向\n          var volfix = this.$store.state.future.volfix;\n          this.formData_3.units = this.baseCoin;\n          this.formData_3.fix = volfix;\n        }\n      } else {\n        this.formData_3.title = this.lanText.text53; // '委托数量';\n\n        this.formData_3.units = this.volUnit;\n        this.formData_3.fix = this.volfix;\n      }\n\n      this.setHeight();\n    },\n    // 清除表单数据\n    clearFormData: function clearFormData(type) {\n      if (type !== 'isMarket') {\n        this.formData_1.value = null;\n      } // this.isMarket = false;\n\n\n      this.percentageVlaue = null;\n      this.formData_2.value = null;\n      this.formData_1.errorText = null;\n      this.formData_2.errorText = null;\n      this.formData_3.errorText = null;\n      this.formData_3.value = null; // 百分数\n\n      this.formData_1.percentageVlaue = null;\n      this.formData_3.percentageVlaue = null;\n      this.setHeight();\n    },\n    // 表单输入事件\n    changeInput: function changeInput(type, value) {\n      this[type].value = value;\n    },\n    // 多选框选择事件(只减仓)\n    checkoutClick: function checkoutClick(type) {\n      this.zhiJianCang = type;\n      this.setFormType();\n    },\n    // 多选框选择事件(只减仓)\n    checkedOrdeTypeclick: function checkedOrdeTypeclick(type) {\n      this.isCheckedOrdeType = type;\n    },\n    // 单选框 选择事件\n    radioClick: function radioClick(type) {\n      this.ordeType = type;\n      this.ordeTypePtions = false;\n    },\n    // 显示开通合约弹框/登录\n    loginButtonClick: function loginButtonClick() {\n      if (!this.isLogin) {\n        if (this.isIframe) {\n          window.parent.postMessage('login', '*');\n        } else {\n          this.$router.push('/login');\n        }\n      } else {\n        // 显示开通合约弹框\n        this.$bus.$emit('OPEN_FUTURE');\n      }\n    },\n    // 表单输入值大小验证\n    formNumberVerify: function formNumberVerify() {\n      var flag = true;\n      this.formData_1.errorText = null;\n      this.formData_2.errorText = null;\n      this.formData_3.errorText = null;\n      var sideType = this.sideType; // 当前输入的价格和最新价的比例 (当前价格 - 输入的价格) / 当前价格\n\n      if (this.inputPrice) {\n        var range = Math.abs(division(cut(this.activeNewPrice, this.inputPrice), this.activeNewPrice));\n        var priceRange = this.coinResultVo.priceRange; // 最大价格比例\n\n        var chaFlag = true;\n\n        if (sideType === 'SELL' && Number(this.inputPrice) < Number(this.activeNewPrice)) {\n          chaFlag = false;\n        }\n\n        if (sideType === 'BUY' && Number(this.inputPrice) > Number(this.activeNewPrice)) {\n          chaFlag = false;\n        }\n\n        if (range > priceRange && !chaFlag) {\n          if (this.currentCategory === 3) {\n            this.formData_2.errorText = this.lanText.text41; // '价格偏差太大！';\n          } else {\n            this.formData_1.errorText = this.lanText.text41; // '价格偏差太大！';\n          }\n\n          flag = false;\n        }\n      } // 数量\n\n\n      var vol = this.inputVolume;\n\n      if (this.percentageVlaue) {\n        vol = this.countPercentageVlaue(sideType);\n      }\n\n      if (vol) {\n        // 验证市价开仓\n        if (this.isOpenAndIsMarket) {\n          // 市价（开仓价值）\n          var _this$coinResultVo = this.coinResultVo,\n              maxMarketMoney = _this$coinResultVo.maxMarketMoney,\n              minOrderMoney = _this$coinResultVo.minOrderMoney;\n\n          if (vol > maxMarketMoney) {\n            // 超出单次最大下单金额，最多可输入\n            this.formData_3.errorText = \"\".concat(this.lanText.text42).concat(maxMarketMoney, \" \").concat(this.marginCoin);\n            flag = false;\n          }\n\n          if (vol < minOrderMoney) {\n            // 超出单次最小下单金额，最少需输入\n            var coin = this.marginCoin;\n\n            if (this.contractInfo.contractType !== 'E' && this.currentCategory === 2) {\n              coin = this.quoteCoin;\n            }\n\n            this.formData_3.errorText = \"\".concat(this.lanText.text43).concat(minOrderMoney, \" \").concat(coin);\n            flag = false;\n          } // 百分比 * 可用\n\n\n          var val1 = fixD(division(nul(this.canUseAmount, this.nowLevel), this.marginRate), this.pricefix);\n          var val2 = sideType === 'BUY' ? this.V1Buy : this.V1Sell;\n          var number = Number(val1) < Number(val2) ? Number(val1) : Number(val2);\n\n          if (vol > number) {\n            this.formData_3.errorText = \"\".concat(this.lanText.text57);\n            flag = false;\n            return false;\n          }\n        } else {\n          // 限价\n          var _this$coinResultVo2 = this.coinResultVo,\n              maxLimitVolume = _this$coinResultVo2.maxLimitVolume,\n              minOrderVolume = _this$coinResultVo2.minOrderVolume; //\n\n          var canMaxNumber = sideType === 'SELL' ? this.maxCanSellNumber : this.maxCanBuyNumber;\n          var canMaxNumberZhang = canMaxNumber;\n\n          if (this.coUnitType === 1 && !this.isOpenAndIsMarket && canMaxNumber) {\n            // 转换成张\n            canMaxNumberZhang = division(canMaxNumber, this.multiplier);\n          } // 超出最大数量\n\n\n          if (vol > Number(canMaxNumberZhang)) {\n            // 超出最大下单量，最多还可以下单\n            this.formData_3.errorText = \"\".concat(this.lanText.text56, \" \").concat(canMaxNumber, \" \").concat(this.volUnit);\n            flag = false;\n            return false;\n          }\n\n          if (vol > maxLimitVolume) {\n            var Tn = maxLimitVolume; // 如果是标记货币\n\n            if (this.coUnitType === 1) {\n              Tn = nul(maxLimitVolume, this.multiplier);\n            } // 超出单次最大下单量，最多可输入\n\n\n            this.formData_3.errorText = \"\".concat(this.lanText.text44).concat(Tn, \" \").concat(this.volUnit, \"\\uFF01\");\n            flag = false;\n          } // 超出最小数量\n\n\n          if (vol < minOrderVolume) {\n            var _Tn = minOrderVolume; // 如果是标记货币\n\n            if (this.coUnitType === 1) {\n              _Tn = nul(minOrderVolume, this.multiplier);\n            } // 超出单次最小下单量，最少需输入\n\n\n            this.formData_3.errorText = \"\".concat(this.lanText.text45).concat(_Tn, \" \").concat(this.volUnit, \"\\uFF01\");\n            flag = false;\n          } // 验证平仓数量 是否超出可平数量\n\n\n          if (this.zhiJianCang || this.transactionType === 2) {\n            // 可平数量\n            var Kp = sideType === 'SELL' ? Number(this.maxCanSellNumber) : Number(this.maxCanBuyNumber); // 如果当前单位是标的货币\n\n            if (this.coUnitType === 1) {\n              vol = nul(vol, this.multiplier);\n            }\n\n            if (vol > Kp) {\n              this.formData_3.errorText = this.lanText.text46; // '超出可平数量！';\n\n              flag = false;\n            }\n          }\n        }\n      }\n\n      this.setHeight();\n      return flag;\n    },\n    // 表单 非空 验证\n    formVerify: function formVerify() {\n      var flag = true;\n      var sideType = this.sideType; // 百分比数量\n\n      var BfbVol = this.countPercentageVlaue(sideType); // 验证限价\n\n      if (this.currentCategory === 1) {\n        if (!this.inputPrice) {\n          this.formData_1.errorText = this.lanText.text47; // '请输入价格!';\n\n          flag = false;\n        }\n\n        if (!this.inputVolume && !BfbVol) {\n          this.formData_3.errorText = this.lanText.text48; // '请输入数量!';\n\n          flag = false;\n        }\n      } // 验证市价\n\n\n      if (this.currentCategory === 2 && !BfbVol) {\n        if (!this.inputVolume && this.orderSide === 'OPEN') {\n          this.formData_3.errorText = this.lanText.text49; // '请输入开仓价值!';\n\n          flag = false;\n        }\n\n        if (!this.inputVolume && this.orderSide === 'CLOSE') {\n          this.formData_3.errorText = this.lanText.text48; // '请输入数量!';\n\n          flag = false;\n        }\n      } // 验证条件单\n\n\n      if (this.currentCategory === 3) {\n        // 触发价\n        if (!this.triggerPrice) {\n          this.formData_1.errorText = this.lanText.text50; // '请输入触发价!';\n\n          flag = false;\n        } // 价格\n\n\n        if (!this.inputPrice && !this.isMarket) {\n          this.formData_2.errorText = this.lanText.text47; // '请输入价格!';\n\n          flag = false;\n        } // 数量\n\n\n        if (!this.inputVolume && !this.isMarket && !BfbVol) {\n          this.formData_3.errorText = this.lanText.text48; // '请输入数量!';\n\n          flag = false;\n        }\n\n        if (!this.inputVolume && this.isMarket && this.orderSide === 'OPEN' && !BfbVol) {\n          this.formData_3.errorText = this.lanText.text49; // '请输入开仓价值!';\n\n          flag = false;\n        }\n      }\n\n      this.setHeight();\n      return flag;\n    },\n    // 验证保证金是否足够\n    amountVerify: function amountVerify() {\n      // 保证金数量\n      var marginCoinVol = this.canBuyCostNumber; // 确认按钮class\n\n      if (this.sideType === 'SELL') {\n        marginCoinVol = this.canSellCostNumber;\n      }\n\n      if (Number(marginCoinVol) > Number(this.canUseAmount)) {\n        // 保证金余额不足！\n        this.$bus.$emit('tip', {\n          text: this.lanText.text51,\n          type: 'error'\n        });\n        return false;\n      }\n\n      return true;\n    },\n    // 点击买入卖出按钮\n    submitForm: function submitForm(sideType) {\n      this.sideType = sideType; // 如果没有登录跳转登录页面\n\n      if (!this.isLogin) {\n        if (this.isIframe) {\n          window.parent.postMessage('login', '*');\n        } else {\n          this.$router.push('/login');\n        }\n      } // 表单非空验证\n\n\n      if (!this.formVerify()) return false; // 表单价格 数量 大小验证\n\n      if (!this.formNumberVerify(sideType)) return false; // 验证保证金余额是够足够\n\n      if (!this.amountVerify()) return false; // 百分比的数量 || 输入的数量 (张)\n\n      var volume = this.countPercentageVlaue(sideType) || this.inputVolume;\n      var submitVolume = volume; // 如果不是市价开仓\n\n      if (!this.isOpenAndIsMarket && submitVolume) {\n        // 转换成张\n        submitVolume = fixD(submitVolume, 0);\n      }\n\n      this.submitData = {\n        contractId: this.contractId,\n        // 合约ID\n        positionType: this.marginModel,\n        // 持仓类型(1 全仓，2 仓逐)\n        side: this.sideType,\n        // 买卖方向（buy 买入，sell 卖出）\n        leverageLevel: this.nowLevel,\n        // 杠杆倍数\n        price: this.inputPrice,\n        // 下单价格(市价单传0)\n        volume: submitVolume,\n        // 下单数量(开仓 市价单：开仓价值)\n        triggerPrice: this.triggerPrice,\n        // 触发价格\n        open: this.orderSide,\n        // 开平仓方向(open 开仓，close 平仓)\n        type: this.submitOrderType,\n        // 订单类型 (1 limit， 2 market，3 IOC，4 FOK，5 POST_ONLY)\n        isConditionOrder: this.currentCategory === 3 // 是否是条件单\n        // expireTime: this.expireTime, // 到期时间\n\n      }; // 判断用户是否设置了开启二次确认\n\n      if (this.userConfig && this.userConfig.pcSecondConfirm) {\n        var sideTypeData = this.buttosContent.buyButton; // 保证金数量\n\n        var marginCoinVol = this.canBuyCostNumber; // 确认按钮class\n\n        var sideClass = 'u-1-bg';\n\n        if (this.sideType === 'SELL') {\n          sideTypeData = this.buttosContent.sellButton;\n          marginCoinVol = this.canSellCostNumber;\n          sideClass = 'u-4-bg';\n        } // 数量\n\n\n        var vol = \"\".concat(volume, \" \").concat(this.volUnit); // 市价开仓\n\n        if (this.orderSide === 'OPEN' && (this.currentCategory === 2 || this.isMarket)) {\n          // 反向\n          var unit = this.contractInfo.base; // 正向\n\n          if (this.contractSide === 1) {\n            unit = this.priceUnit;\n          }\n\n          vol = \"\".concat(volume, \" \").concat(unit);\n        } else if (this.coUnitType === 1) {\n          // 如果当前单位是标的货币 就 把张 换算成 标的数量\n          vol = \"\".concat(fixD(nul(volume, this.multiplier), this.volfix), \" \").concat(this.volUnit);\n        }\n\n        this.confirmData = {\n          // 币种\n          symbol: this.contractSymbol,\n          // 订单类型Number（1限价单、2市价单、3条件单）\n          currentCategory: this.currentCategory,\n          // 确认按钮文案（买入做多...）\n          sideText: sideTypeData.text,\n          // 确认按钮颜色class\n          sideClass: sideClass,\n          // 是否是开仓市价单\n          isOpenAndIsMarket: this.isOpenAndIsMarket,\n          // 条件单 触发价\n          triggerPrice: \"\".concat(this.triggerPrice, \" \").concat(this.priceUnit),\n          // 价格\n          price: this.inputPrice ? \"\".concat(this.inputPrice, \" \").concat(this.priceUnit) : '市价',\n          // 数量\n          vol: vol,\n          marginCoin: \"\".concat(marginCoinVol, \" \").concat(this.marginCoin)\n        };\n        this.forcedReminderShow = true;\n      } else {\n        this.dialogConfirmLoading = true;\n        this.submit();\n      }\n\n      return false;\n    },\n    // 下单提交\n    submit: function submit() {\n      var _this2 = this;\n\n      if (this.submitFlag) {\n        this.submitFlag = false;\n        this.axios({\n          url: this.$store.state.url.futures.orderCreate,\n          hostType: 'co',\n          method: 'post',\n          params: this.submitData\n        }).then(function (_ref) {\n          var code = _ref.code,\n              msg = _ref.msg;\n\n          if (code.toString() === '0') {\n            _this2.clearFormData();\n\n            _this2.$store.dispatch('getUserConfig');\n\n            _this2.$store.dispatch('getPositionList');\n\n            _this2.forcedReminderShow = false;\n\n            _this2.$bus.$emit('CRAET-ORDER-SUCCESS');\n\n            _this2.$bus.$emit('tip', {\n              text: msg,\n              type: 'success'\n            });\n          } else {\n            _this2.$bus.$emit('tip', {\n              text: msg,\n              type: 'error'\n            });\n          }\n\n          _this2.dialogConfirmLoading = false;\n          _this2.submitFlag = true;\n        });\n      }\n    },\n    // 下单二次确认提交\n    submitOrder: function submitOrder(data) {\n      var _this3 = this;\n\n      if (data) {\n        this.axios({\n          url: this.$store.state.url.futures.editUserPageConfig,\n          hostType: 'co',\n          method: 'post',\n          params: {\n            pcSecondConfirm: 0,\n            contractId: this.contractId\n          }\n        }).then(function (_ref2) {\n          var code = _ref2.code,\n              msg = _ref2.msg;\n\n          if (code.toString() === '0') {\n            _this3.$store.dispatch('getUserConfig');\n          } else {\n            _this3.$bus.$emit('tip', {\n              text: msg,\n              type: 'error'\n            });\n          }\n        });\n      }\n\n      this.dialogConfirmLoading = true;\n      this.submit();\n    },\n    // 关闭弹窗\n    closeDialog: function closeDialog() {\n      // 关闭强制提醒（二次确认）弹框\n      this.forcedReminderShow = false; // 关闭杠杆弹窗\n\n      this.leverageDialogShow = false; // 关闭切换保证金模式弹框\n\n      this.depositDialogShow = false;\n    },\n    // 选择 到期时间\n    selectPlanType: function selectPlanType(val) {\n      this.expireTime = val;\n    },\n    setHeight: function setHeight() {\n      var _this4 = this;\n\n      var setTimer = setTimeout(function () {\n        var layoutHeight = document.getElementById('layoutBlockTrade') && document.getElementById('layoutBlockTrade').clientHeight;\n        var coTradeBoxHeight = document.getElementById('coTradeBox').clientHeight;\n        var syHeight = layoutHeight - coTradeBoxHeight - 15;\n\n        _this4.$bus.$emit('syHeight', syHeight);\n\n        clearTimeout(setTimer);\n        setTimer = null;\n      }, 100);\n    },\n    thousandsComma: function thousandsComma(num) {\n      if (num) {\n        return _thousandsComma(num);\n      }\n\n      return num;\n    },\n    evenHandMouseenter: function evenHandMouseenter(key, type) {\n      this[key] = type;\n    },\n    evenHandMouseleave: function evenHandMouseleave(key) {\n      this[key] = null;\n    }\n  }\n};",null]}