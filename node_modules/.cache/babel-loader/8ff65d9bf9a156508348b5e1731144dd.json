{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/utils/math.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/utils/math.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction add(arg1, arg2) {\n  var r1;\n  var r2;\n  var m = 0;\n\n  try {\n    r1 = arg1.toString().split('.')[1].length;\n  } catch (e) {\n    r1 = 0;\n  }\n\n  try {\n    r2 = arg2.toString().split('.')[1].length;\n  } catch (e) {\n    r2 = 0;\n  }\n\n  m = Math.pow(10, Math.max(r1, r2));\n  return (arg1 * m + arg2 * m) / m;\n}\n\nfunction cut(arg1, arg2) {\n  var r1;\n  var r2;\n  var m = 0;\n  var n = 0;\n\n  try {\n    r1 = arg1.toString().split('.')[1].length;\n  } catch (e) {\n    r1 = 0;\n  }\n\n  try {\n    r2 = arg2.toString().split('.')[1].length;\n  } catch (e) {\n    r2 = 0;\n  }\n\n  m = Math.pow(10, Math.max(r1, r2));\n  n = r1 >= r2 ? r1 : r2;\n  return ((arg1 * m - arg2 * m) / m).toFixed(n);\n}\n\nfunction nul(arg1, arg2) {\n  var m = 0;\n  var s1 = arg1.toString();\n  var s2 = arg2.toString();\n\n  try {\n    m += s1.split('.')[1].length;\n  } catch (e) {// console.log(e);\n  }\n\n  try {\n    m += s2.split('.')[1].length;\n  } catch (e) {// console.log(e);\n  }\n\n  return Number(s1.replace('.', '')) * Number(s2.replace('.', '')) / Math.pow(10, m);\n}\n\nfunction division(arg1, arg2) {\n  var t1 = 0;\n  var t2 = 0;\n  var r1 = 0;\n  var r2 = 0;\n\n  try {\n    t1 = arg1.toString().split('.')[1].length;\n  } catch (e) {// console.log(e);\n  }\n\n  try {\n    t2 = arg2.toString().split('.')[1].length;\n  } catch (e) {//  console.log(e);\n  }\n\n  r1 = Number(arg1.toString().replace('.', ''));\n  r2 = Number(arg2.toString().replace('.', ''));\n  return r1 / r2 * Math.pow(10, t2 - t1);\n}\n\nexport { add, // 加法\ncut, // 减法\nnul, // 乘法\ndivision // 除法\n};",null]}