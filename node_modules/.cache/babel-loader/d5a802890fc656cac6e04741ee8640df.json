{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/otcRelease/index/index.js","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/otcRelease/index/index.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { fixD, fixInput, imgMap, getCoinShowName } from '@/utils';\nexport default {\n  data: function data() {\n    return {\n      imgMap: imgMap,\n      jurisdictionObj: {\n        data: [],\n        // 数据\n        str: '',\n        // 文案\n        statusKey: '',\n        // 当前跳转状态\n        flag: false,\n        //\n        btnText: '',\n        // 确定按钮\n        btnLink: '',\n        // 确认文案\n        pass: true\n      },\n      backgroundImg: \"background: url(\".concat(imgMap.otcRelease, \") no-repeat right bottom\"),\n      accountList: [],\n      // 资产列表\n      symbol: null,\n      // 当前币种\n      symbolList: [],\n      // 币种列表\n      side: '',\n      // SELL出售 BUY购买\n      legalCurrency: '',\n      // 法币币种\n      legalCurrencyList: [],\n      // 法币select框\n      number: '',\n      // 数量\n      pricingMethod: '1',\n      // 定价方式\n      pricentMethod: '1',\n      barNum: 0,\n      // 溢价滚动条\n      autoPrice: '',\n      // 自定义价格\n      rates: null,\n      // 法币汇率\n      minPrice: '',\n      // 最小限额\n      maxPrice: '',\n      // 最大限额\n      tradeTime: '5',\n      // 付款时限\n      frequency: '0',\n      // 交易次数\n      days: '30',\n      // 失效时间\n      buyPaysList: [],\n      // 支付方式 (购买时)\n      sellPaysList: [],\n      // 收款方式 (出售时)\n      myBuyPaysList: [],\n      // 选择的支付方式\n      mySellPaysList: [],\n      // 选择的收款方式\n      confirmLoading: false,\n      // 提交按钮loading\n      reply: '',\n      // 自动回复\n      leavingText: '',\n      // 广告留言\n      successDialogFlag: false,\n      // 成功后的提示\n      precent: '',\n      blance: '--',\n      // 开启法币汇率时可用余额,\n      otcRateFlag: false,\n      // 是否开启法币汇率配置\n      otcRateList: [] // 对应法币汇率列表\n\n    };\n  },\n  watch: {\n    showSymbol: function showSymbol(v) {\n      var _this = this;\n\n      this.axios({\n        url: 'otc/rates',\n        method: 'post',\n        hostType: 'otc',\n        params: {\n          symbol: v\n        }\n      }).then(function (data) {\n        if (data.code.toString() === '0') {\n          _this.rates = data.data;\n        }\n      });\n    },\n    userInfo: function userInfo(v) {\n      if (v) {\n        this.jurisdiction();\n        this.initSellPaysList();\n        this.isSh();\n      }\n    },\n    // 格式化 数量的输入\n    number: function number(v) {\n      var _this2 = this;\n\n      var fix = 0;\n\n      if (this.market && this.market.coinList && typeof this.symbol === 'number') {\n        // 获取精度\n        Object.keys(this.market.coinList).forEach(function (citem) {\n          var _this2$market$coinLis = _this2.market.coinList[citem],\n              showPrecision = _this2$market$coinLis.showPrecision,\n              name = _this2$market$coinLis.name;\n\n          if (name === _this2.showSymbol) {\n            fix = showPrecision;\n          }\n        });\n        this.number = fixInput(v, fix);\n      }\n    },\n    precent: function precent(v) {\n      this.precent = fixInput(v, 2);\n    },\n    // 格式化 自定义价格\n    autoPrice: function autoPrice(v) {\n      var fix = this.priceFix;\n      this.autoPrice = fixInput(v, fix);\n    },\n    // 格式化 最小限额\n    minPrice: function minPrice(v) {\n      var fix = this.priceFix;\n      this.minPrice = fixInput(v, fix);\n    },\n    // 格式化 最大限额\n    maxPrice: function maxPrice(v) {\n      var fix = this.priceFix;\n      this.maxPrice = fixInput(v, fix);\n    },\n    // 付款期限\n    tradeTime: function tradeTime(v) {\n      this.tradeTime = fixInput(v, 0);\n    },\n    // 交易次数\n    frequency: function frequency(v) {\n      this.frequency = fixInput(v, 0);\n    },\n    market: function market(v) {\n      // 构建交易货币列表\n      if (v && this.otcPublicInfo) {\n        this.initSymbolList();\n      }\n    },\n    otcPublicInfo: function otcPublicInfo(v) {\n      // 构件法币列表\n      if (v) {\n        this.initLegalCurrencyList(); // 初始化法币\n\n        this.side = this.otcPublicInfo.defaultSeach; // 设置默认方向\n\n        this.initBuyPaysList(); // 初始化支付方式列表\n\n        if (this.market) {\n          this.initSymbolList();\n        }\n      }\n    }\n  },\n  computed: {\n    // 失效时间列表\n    daysList: function daysList() {\n      var day = this.$t('otcRelease.day');\n      return [{\n        value: \"2\".concat(day),\n        code: '2'\n      }, {\n        value: \"4\".concat(day),\n        code: '4'\n      }, {\n        value: \"7\".concat(day),\n        code: '7'\n      }, {\n        value: \"30\".concat(day),\n        code: '30'\n      }];\n    },\n    pricentMethodList: function pricentMethodList() {\n      return [{\n        value: this.$t('otcRelease.higher'),\n        code: '1'\n      }, {\n        value: this.$t('otcRelease.lower'),\n        code: '2'\n      }];\n    },\n    // 定价方式列表\n    pricingMethodList: function pricingMethodList() {\n      return [// 市场价(溢价)\n      {\n        value: this.$t('otcRelease.MarketPrice'),\n        code: '1'\n      }, // 自定义\n      {\n        value: this.$t('otcRelease.Custom'),\n        code: '2'\n      }];\n    },\n    rateUrl: function rateUrl() {\n      var url = '';\n\n      if (this.otcPublicInfo && this.otcPublicInfo.rateUrl) {\n        url = this.otcPublicInfo.rateUrl;\n      }\n\n      return url;\n    },\n    confirmDisabled: function confirmDisabled() {\n      var flag = true;\n      var priceF = true;\n\n      if (this.pricingMethod === '2') {\n        priceF = this.autoPriceObj.flag;\n      }\n\n      var payF = false;\n\n      if (this.side === 'SELL') {\n        payF = this.mySellPaysList.length;\n      } else {\n        payF = this.myBuyPaysList.length;\n      }\n\n      if (this.symbol && this.side.length && this.legalCurrency.length && this.numberObj.flag && priceF && this.precentObj.flag && this.minPriceObj.flag && this.maxPriceObj.flag && this.tradeTimeObj.flag && this.frequencyFlag && this.days.length && payF || this.confirmLoading) {\n        flag = false;\n      }\n\n      return flag;\n    },\n    precentPrice: function precentPrice() {\n      var precent = this.precent === '' ? 0 : this.precent;\n      var price = '--';\n\n      if (this.nowPrice !== '--') {\n        if (this.pricentMethod === '1') {\n          price = fixD(this.nowPrice * (1 + window.parseFloat(precent) / 100), this.priceFix);\n        } else {\n          price = fixD(this.nowPrice * (1 - window.parseFloat(precent) / 100), this.priceFix);\n        }\n      }\n\n      return price;\n    },\n    sum: function sum() {\n      var sum = 0;\n\n      if (this.number) {\n        if (this.pricingMethod === '1') {\n          sum = this.number * this.precentPrice;\n        } else {\n          sum = this.number * this.autoPrice;\n        }\n      }\n\n      return fixD(sum, this.priceFix);\n    },\n    priceFix: function priceFix() {\n      var fix = this.$store.state.baseData.defaultFiatPrecision;\n\n      if (this.market && this.market.coinList[this.showSymbol] && this.market.coinList[this.showSymbol].fiatPrecision && this.market.coinList[this.showSymbol].fiatPrecision[this.legalCurrency.toLowerCase()]) {\n        fix = this.market.coinList[this.showSymbol].fiatPrecision[this.legalCurrency.toLowerCase()];\n      }\n\n      return Number(fix);\n    },\n    // 当前单价\n    nowPrice: function nowPrice() {\n      var price = '--';\n\n      if (this.rates && this.rates.symbol === this.showSymbol && this.market && this.market.coinList) {\n        var fix = this.priceFix;\n        var nowP = this.rates[this.legalCurrency];\n        price = fixD(nowP, fix);\n      }\n\n      return price;\n    },\n    market: function market() {\n      return this.$store.state.baseData.market;\n    },\n    userInfo: function userInfo() {\n      return this.$store.state.baseData.userInfo;\n    },\n    otcPublicInfo: function otcPublicInfo() {\n      return this.$store.state.baseData.otcPublicInfo;\n    },\n    frequencyFlag: function frequencyFlag() {\n      if (this.frequency.length === 0) {\n        return false;\n      }\n\n      return true;\n    },\n    // 数量输入框 验证\n    numberObj: function numberObj() {\n      if (this.side === 'SELL') {\n        if (this.number.length === 0 || parseFloat(this.number) === 0) {\n          return {\n            flag: false,\n            errorFlag: false,\n            // 请输入数量\n            errorText: this.$t('otcRelease.PleaseEnterQuantity')\n          };\n        }\n\n        if (parseFloat(this.numberValue) >= parseFloat(this.number)) {\n          return {\n            flag: true,\n            errorFlag: false,\n            errorText: ''\n          };\n        }\n\n        if (parseFloat(this.numberValue) < parseFloat(this.number)) {\n          return {\n            flag: false,\n            errorFlag: true,\n            // 可用余额不足\n            errorText: this.$t('otcRelease.availableBalance')\n          };\n        }\n\n        return {\n          flag: false,\n          errorFlag: false,\n          errorText: ''\n        };\n      }\n\n      if (this.number.length === 0 || parseFloat(this.number) === 0) {\n        return {\n          flag: false,\n          errorFlag: false,\n          errorText: ''\n        };\n      }\n\n      return {\n        flag: true,\n        errorFlag: false,\n        errorText: ''\n      };\n    },\n    // 自定义价格 验证\n    autoPriceObj: function autoPriceObj() {\n      if (this.autoPrice.length === 0 || parseFloat(this.autoPrice) === 0) {\n        return {\n          flag: false,\n          errorFlag: false,\n          errorText: ''\n        };\n      }\n\n      return {\n        flag: true,\n        errorFlag: false,\n        errorText: ''\n      };\n    },\n    // 百分比验证\n    precentObj: function precentObj() {\n      if (this.precent > 50) {\n        return {\n          flag: false,\n          errorFlag: true,\n          errorText: this.$t('otcRelease.precentError')\n        };\n      }\n\n      return {\n        flag: true,\n        errorFlag: false,\n        errorText: ''\n      };\n    },\n    // 最小限额 验证\n    minPriceObj: function minPriceObj() {\n      if (this.minPrice.length === 0 || parseFloat(this.minPrice) === 0) {\n        return {\n          flag: false,\n          errorFlag: false,\n          errorText: ''\n        };\n      }\n\n      if (parseFloat(this.minPrice) > parseFloat(this.sum)) {\n        return {\n          flag: false,\n          errorFlag: true,\n          // 最小限额不得大于总金额\n          errorText: this.$t('otcRelease.minPriceError1')\n        };\n      }\n\n      if (parseFloat(this.minPrice) >= parseFloat(this.maxPrice)) {\n        return {\n          flag: false,\n          errorFlag: true,\n          // 最小限额不得大于或等于最大限额\n          errorText: this.$t('otcRelease.minPriceError2')\n        };\n      }\n\n      return {\n        flag: true,\n        errorFlag: false,\n        errorText: ''\n      };\n    },\n    // 最大限额 验证\n    maxPriceObj: function maxPriceObj() {\n      if (this.maxPrice.length === 0 || parseFloat(this.maxPrice) === 0) {\n        return {\n          flag: false,\n          errorFlag: false,\n          errorText: ''\n        };\n      }\n\n      if (parseFloat(this.maxPrice) > parseFloat(this.sum)) {\n        return {\n          flag: false,\n          errorFlag: true,\n          // 最大限额不得大于总金额\n          errorText: this.$t('otcRelease.maxPriceError1')\n        };\n      }\n\n      if (parseFloat(this.minPrice) >= parseFloat(this.maxPrice)) {\n        return {\n          flag: false,\n          errorFlag: true,\n          // 最大限额不得小于或等于最小限额\n          errorText: this.$t('otcRelease.maxPriceError2')\n        };\n      }\n\n      return {\n        flag: true,\n        errorFlag: false,\n        errorText: ''\n      };\n    },\n    // 付款时限 验证\n    tradeTimeObj: function tradeTimeObj() {\n      if (this.tradeTime.length === 0) {\n        return {\n          flag: false,\n          errorFlag: false,\n          // 请输入付款时限\n          errorText: this.$t('otcRelease.paymentTimeLimit')\n        };\n      }\n\n      if (parseFloat(this.tradeTime) < 5 || parseFloat(this.tradeTime) > 60) {\n        return {\n          flag: false,\n          errorFlag: true,\n          // 付款时限应当在 5-60 分钟\n          errorText: this.$t('otcRelease.paymentTimeError')\n        };\n      }\n\n      return {\n        flag: true,\n        errorFlag: false,\n        errorText: ''\n      };\n    },\n    // 页面上用于展示的交易货币\n    showSymbol: function showSymbol() {\n      var _this3 = this;\n\n      var v = '';\n\n      if (this.symbolList.length && typeof this.symbol === 'number') {\n        this.symbolList.forEach(function (item) {\n          if (item.index === _this3.symbol) {\n            v = item.name;\n          }\n        });\n      }\n\n      return v;\n    },\n    showCoin: function showCoin() {\n      var v = this.showSymbol;\n\n      if (this.market && this.market.coinList) {\n        v = getCoinShowName(v, this.market.coinList);\n      }\n\n      return v;\n    },\n    // 当前币种可用余额\n    numberValue: function numberValue() {\n      var _this4 = this;\n\n      var v = '--';\n\n      if (this.accountList && this.accountList.length && typeof this.symbol === 'number' && this.market && this.market.coinList && this.otcPublicInfo && this.otcPublicInfo.feeOtcList) {\n        this.accountList.forEach(function (item) {\n          if (item.coinSymbol === _this4.showSymbol) {\n            var normal = item.normal;\n            var symbolRate = 0;\n            var fix = 0; // 获取手续费\n\n            _this4.otcPublicInfo.feeOtcList.forEach(function (citem) {\n              if (citem.symbol === _this4.showSymbol) {\n                symbolRate = citem.rate;\n              }\n            }); // 获取精度\n\n\n            Object.keys(_this4.market.coinList).forEach(function (citem) {\n              var _this4$market$coinLis = _this4.market.coinList[citem],\n                  showPrecision = _this4$market$coinLis.showPrecision,\n                  name = _this4$market$coinLis.name;\n\n              if (name === _this4.showSymbol) {\n                fix = showPrecision;\n              }\n            });\n            v = fixD(normal / (1 + symbolRate), fix);\n          }\n        });\n      }\n\n      return v;\n    },\n    excheifFlag: function excheifFlag() {\n      return this.$store.state.baseData.exchief_project_switch;\n    },\n    navSymbolList: function navSymbolList() {\n      var _this5 = this;\n\n      var arr = [];\n\n      if (this.market && this.market.coinList) {\n        this.symbolList.forEach(function (item) {\n          arr.push({\n            name: getCoinShowName(item.name, _this5.market.coinList),\n            index: item.index\n          });\n        });\n      }\n\n      return arr;\n    }\n  },\n  methods: {\n    init: function init() {\n      this.initData(); // this.getOtcRateList();\n\n      this.precent = '';\n    },\n    alertClose: function alertClose() {\n      this.jurisdictionObj.flag = false;\n    },\n    alertConfirm: function alertConfirm() {\n      this.$router.push(this.jurisdictionObj.btnLink);\n    },\n    goNoPay: function goNoPay() {\n      this.$router.push('/personal/leaglTenderSet');\n    },\n    isSh: function isSh() {\n      if (this.userInfo.authLevel.toString() !== '1') {\n        // alert('请您先实名认证');\n        return;\n      }\n\n      if (this.userInfo.otcCompanyInfo && this.userInfo.userCompanyInfo) {\n        if (this.userInfo.otcCompanyInfo.status !== '0') {\n          if (this.userInfo.userCompanyInfo === '0') {// alert('请您申请成为商户');\n          }\n        }\n      }\n    },\n    initData: function initData() {\n      this.getAccountList();\n\n      if (this.market && this.otcPublicInfo) {\n        this.initSymbolList();\n      }\n\n      if (this.otcPublicInfo) {\n        this.initLegalCurrencyList(); // 初始化法币\n\n        this.side = this.otcPublicInfo.defaultSeach; // 设置默认方向\n\n        this.initBuyPaysList(); // 初始化支付方式列表\n      }\n\n      if (this.userInfo) {\n        this.jurisdiction();\n        this.initSellPaysList();\n        this.isSh();\n      }\n    },\n    jurisdiction: function jurisdiction() {\n      // const arr = [\n      //   { text: '绑定谷歌验证', flag: this.OpenGoogle },\n      //   { text: '绑定手机验证', flag: this.OpenMobile },\n      // ];\n      // let userInfo = {\n      //   authLevel: 1,\n      //   nickName: '1',\n      //   otcCompanyInfo: { status: 1 },\n      //   userCompanyInfo: { status: 0 }\n      // }\n      var data = []; // 请完成实名认证，设置昵称才能发布广告\n\n      var str = this.$t('otcRelease.jurisdictionTitle');\n      var _this$userInfo = this.userInfo,\n          otcCompanyInfo = _this$userInfo.otcCompanyInfo,\n          userCompanyInfo = _this$userInfo.userCompanyInfo,\n          nickName = _this$userInfo.nickName,\n          authLevel = _this$userInfo.authLevel;\n      var statusKey = '';\n      var btnText = '';\n      var btnLink = '';\n      var pass = true; // 实名认证\n\n      var authentication = this.$t('otcRelease.authentication');\n\n      if (authLevel.toString() === '1') {\n        data.push({\n          text: authentication,\n          flag: true,\n          key: 'authLevel'\n        });\n      } else {\n        data.push({\n          text: authentication,\n          flag: false,\n          key: 'authLevel'\n        });\n        statusKey = 'authLevel'; // 去认证\n\n        btnText = this.$t('otcRelease.DeCertification');\n        btnLink = '/personal';\n        pass = false;\n      } // 设置昵称\n\n\n      var SetNickname = this.$t('otcRelease.SetNickname');\n\n      if (nickName && nickName.length) {\n        data.push({\n          text: SetNickname,\n          flag: true,\n          key: 'nickName'\n        });\n      } else {\n        data.push({\n          text: SetNickname,\n          flag: false,\n          key: 'nickName'\n        });\n\n        if (!statusKey.length) {\n          statusKey = 'nickName'; // 去设置\n\n          btnText = this.$t('otcRelease.ToSetUp');\n          btnLink = '/personal/userManagement';\n          pass = false;\n        }\n      } // 申请商户\n\n\n      if (otcCompanyInfo.status.toString() !== '0') {\n        // 请完成实名认证，设置昵称并申请成为商家才能发布广告\n        str = this.$t('otcRelease.jurisdictionTitle2');\n        var ApplicationMerchant = this.$t('otcRelease.ApplicationMerchant');\n\n        if (userCompanyInfo.status.toString() !== '0') {\n          data.push({\n            text: ApplicationMerchant,\n            flag: true,\n            key: 'companyInfo'\n          });\n        } else {\n          data.push({\n            text: ApplicationMerchant,\n            flag: false,\n            key: 'companyInfo'\n          });\n\n          if (!statusKey.length) {\n            statusKey = 'companyInfo'; // 去申请\n\n            btnText = this.$t('otcRelease.ToApply');\n            btnLink = '/companyApplication';\n            pass = false;\n          }\n        }\n      }\n\n      var obj = {\n        data: data,\n        str: str,\n        statusKey: statusKey,\n        btnText: btnText,\n        btnLink: btnLink,\n        pass: pass,\n        flag: !!statusKey.length\n      };\n      this.jurisdictionObj = obj;\n    },\n    inputLineChange: function inputLineChange(value, name) {\n      this[name] = value;\n    },\n    // 获取列表\n    getAccountList: function getAccountList() {\n      var _this6 = this;\n\n      this.axios({\n        url: '/finance/otc_account_list'\n      }).then(function (data) {\n        if (data.code.toString() === '0') {\n          _this6.accountList = data.data.allCoinMap;\n        }\n      });\n    },\n    // 初始化 数字货币列表\n    initSymbolList: function initSymbolList() {\n      var list = [];\n      var coinList = this.market.coinList;\n\n      if (Array.isArray(coinList)) {\n        coinList = coinList.sort(function (a, b) {\n          return a.sort - b.sort;\n        });\n      }\n\n      Object.keys(coinList).forEach(function (item, index) {\n        if (coinList[item].otcOpen) {\n          // getCoinShowName(obj.name, this.market.coinList)\n          list.push({\n            name: item,\n            index: index + 1\n          });\n        }\n      });\n      this.symbolList = list;\n      this.initSymbol();\n    },\n    // 设置默认的数字货币\n    initSymbol: function initSymbol() {\n      var _this7 = this;\n\n      this.symbolList.forEach(function (item) {\n        if (item.name === _this7.otcPublicInfo.defaultCoin) {\n          _this7.symbol = item.index;\n        }\n      });\n    },\n    // 初始化交易的法币\n    initLegalCurrencyList: function initLegalCurrencyList() {\n      var list = [];\n      this.otcPublicInfo.paycoins.forEach(function (item) {\n        list.push({\n          value: item.title,\n          code: item.key\n        });\n      });\n      this.legalCurrency = this.otcPublicInfo.otcDefaultPaycoin;\n      this.legalCurrencyList = list;\n    },\n    // 初始化支付方式列表\n    initBuyPaysList: function initBuyPaysList() {\n      this.buyPaysList = this.otcPublicInfo.payments;\n    },\n    // 初始化收款方式列表\n    initSellPaysList: function initSellPaysList() {\n      var _this8 = this;\n\n      this.axios({\n        url: '/otc/payment/find',\n        hostType: 'otc',\n        params: {\n          isOpen: '1'\n        }\n      }).then(function (data) {\n        if (data.code.toString() === '0') {\n          var list = data.data;\n          var newList = [];\n          var obj = {};\n\n          if (_this8.excheifFlag) {\n            list.forEach(function (ele, i) {\n              if (!obj[list[i].payment]) {\n                newList.push(list[i]);\n                obj[list[i].payment] = true;\n              }\n            });\n            _this8.sellPaysList = newList;\n          } else {\n            _this8.sellPaysList = list;\n          }\n        }\n      });\n    },\n    // 重置 数量/定价方式/最小限额/最大限额/付款时限\n    reset: function reset() {\n      this.number = ''; // 重置数量\n\n      this.pricingMethod = '1'; // 重置定价方式\n\n      this.autoPrice = ''; // 重置自定义价格\n\n      this.minPrice = ''; // 重置最小限额\n\n      this.maxPrice = ''; // 重置最大限额\n\n      this.tradeTime = '5'; // 重置付款时限\n\n      this.frequency = '0'; // 重置交易次数\n\n      this.days = '30'; // 重置失效时间\n\n      this.myBuyPaysList = []; // 重置已选支付方式\n\n      this.mySellPaysList = []; // 重置已选收款方式\n\n      this.leavingText = ''; // 广告留言\n\n      this.reply = '';\n    },\n    // 切换币种\n    symbolChange: function symbolChange(item) {\n      if (this.symbol === item.index) {\n        return;\n      }\n\n      this.symbol = item.index;\n      this.side = this.otcPublicInfo.defaultSeach; // 重置广告类型\n\n      this.legalCurrency = this.otcPublicInfo.otcDefaultPaycoin; // 重置法币\n\n      if (this.otcRateFlag && this.excheifFlag) {\n        this.setBlance();\n      }\n\n      this.reset();\n    },\n    // 切换广告类型\n    sideChange: function sideChange(name) {\n      this.side = name;\n      this.legalCurrency = this.otcPublicInfo.otcDefaultPaycoin; // 重置法币\n\n      this.reset();\n\n      if (this.otcRateFlag && this.excheifFlag) {\n        this.setBlance();\n      }\n    },\n    // 切换法币\n    legalCurrencyChange: function legalCurrencyChange(item) {\n      this.legalCurrency = item.code;\n\n      if (this.otcRateFlag && this.excheifFlag) {\n        this.setBlance();\n      }\n\n      this.reset();\n    },\n    // 切换溢价方向\n    precentMethodChange: function precentMethodChange(item) {\n      this.pricentMethod = item.code;\n    },\n    // 切换定价方式\n    pricingMethodChange: function pricingMethodChange(item) {\n      this.pricingMethod = item.code;\n      this.autoPrice = this.nowPrice;\n      this.precent = '';\n      this.pricentMethod = '1';\n    },\n    // 溢价\n    barChange: function barChange(num) {\n      this.barNum = Number(num);\n    },\n    // 切换失效时间\n    daysChange: function daysChange(item) {\n      this.days = item.code;\n    },\n    // 支付方式点击\n    buyPayClick: function buyPayClick(item) {\n      if (this.myBuyPaysList.indexOf(item.key) !== -1) {\n        this.myBuyPaysList.splice(this.myBuyPaysList.indexOf(item.key), 1);\n      } else {\n        if (this.myBuyPaysList.length >= 3) {\n          // 最多可以选择三种支付方式\n          this.$bus.$emit('tip', {\n            text: this.$t('otcRelease.threePayment'),\n            type: 'warning'\n          });\n          return;\n        }\n\n        this.myBuyPaysList.push(item.key);\n      }\n    },\n    // 收款方式点击\n    sellPayClick: function sellPayClick(item) {\n      if (this.mySellPaysList.indexOf(item.payment) !== -1) {\n        this.mySellPaysList.splice(this.mySellPaysList.indexOf(item.payment), 1);\n      } else {\n        this.mySellPaysList.push(item.payment);\n      }\n    },\n    confirm: function confirm() {\n      var _this9 = this;\n\n      if (!this.jurisdictionObj.pass) {\n        this.jurisdictionObj.flag = true;\n        return;\n      }\n\n      var priceParams = {}; // 价格\n\n      if (this.pricingMethod === '1') {\n        priceParams = {\n          price: this.precentPrice,\n          priceRate: Math.abs(this.precent),\n          priceRateType: this.pricentMethod === '1' ? 2 : 3\n        };\n      } else {\n        priceParams = {\n          price: this.autoPrice,\n          priceRate: 0,\n          priceRateType: 0\n        };\n      }\n\n      var payments = [];\n\n      if (this.side === 'SELL') {\n        this.mySellPaysList.forEach(function (item) {\n          payments.push({\n            payment: item\n          });\n        });\n      } else {\n        this.myBuyPaysList.forEach(function (item) {\n          payments.push({\n            payment: item\n          });\n        });\n      }\n\n      var params = _objectSpread(_objectSpread({\n        coin: this.showSymbol,\n        // 交易币种\n        side: this.side,\n        // 方向\n        payCoin: this.legalCurrency,\n        // 法币\n        volume: this.number\n      }, priceParams), {}, {\n        // 价格\n        minTrade: this.minPrice,\n        // 最小限额\n        maxTrade: this.maxPrice,\n        // 最大限额\n        limitTime: this.tradeTime,\n        // 交易期限\n        dealVolume: this.frequency,\n        // 交易次数\n        days: this.days,\n        // 失效时间\n        payments: payments,\n        description: this.leavingText,\n        autoReply: this.reply\n      });\n\n      this.confirmLoading = true;\n      this.axios({\n        url: 'otc/wanted_save',\n        hostType: 'otc',\n        params: params\n      }).then(function (data) {\n        _this9.confirmLoading = false;\n\n        if (data.code.toString() === '0') {\n          _this9.successDialogFlag = true;\n        } else {\n          _this9.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    successDialogConfirm: function successDialogConfirm() {\n      this.initData();\n      this.reset();\n      this.successDialogFlag = false;\n    },\n    successDialogClose: function successDialogClose() {\n      this.$router.push('/');\n    },\n    // 获取法币汇率列表及开关\n    getOtcRateList: function getOtcRateList() {\n      var _this10 = this;\n\n      this.axios({\n        url: this.$store.state.url.common.otc_fee_rate_list\n      }).then(function (data) {\n        if (data.code.toString() === '0') {\n          _this10.otcRateFlag = Number(data.data.otc_fee_rate_type) === 2;\n          _this10.otcRateList = data.data.otc_fee_rate_list;\n\n          if (_this10.otcRateFlag && _this10.excheifFlag) {\n            _this10.setBlance();\n          }\n        }\n      });\n    },\n    // 获取对应法币汇率\n    setBlance: function setBlance() {\n      var _this11 = this;\n\n      if (this.accountList && this.accountList.length && typeof this.symbol === 'number' && this.market && this.market.coinList && this.otcPublicInfo && this.otcRateList) {\n        this.accountList.forEach(function (item) {\n          if (item.coinSymbol === _this11.showSymbol) {\n            var normal = item.normal;\n            var symbolRate = 0;\n            var fix = 0; // 获取手续费\n\n            _this11.otcRateList.forEach(function (citem) {\n              if (citem.symbol === _this11.showSymbol && citem.fiatCoin === _this11.legalCurrency) {\n                symbolRate = citem.rate;\n              }\n            }); // 获取精度\n\n\n            Object.keys(_this11.market.coinList).forEach(function (citem) {\n              var _this11$market$coinLi = _this11.market.coinList[citem],\n                  showPrecision = _this11$market$coinLi.showPrecision,\n                  name = _this11$market$coinLi.name;\n\n              if (name === _this11.showSymbol) {\n                fix = showPrecision;\n              }\n            });\n            _this11.blance = fixD(normal / (1 + symbolRate), fix);\n          }\n        });\n      }\n    }\n  }\n};",null]}