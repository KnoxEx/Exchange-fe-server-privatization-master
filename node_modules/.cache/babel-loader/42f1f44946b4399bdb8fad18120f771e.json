{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/vuex/future/future.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/vuex/future/future.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n// Created by 侯东东.\n//  云合约\nimport axios from '@/api/http/axios';\nimport { setCoMarket, myStorage, getDigit } from '@/utils';\nvar timer = null;\n\nvar setCoTypeSymbol = function setCoTypeSymbol(data) {\n  if (data) {\n    var arr = data.split('-');\n    return \"\".concat(arr[0], \"_\").concat(arr[1]).concat(arr[2]);\n  }\n\n  return null;\n};\n\nvar isIframe = false;\n/* eslint-disable */\n\nif (self !== top) {\n  isIframe = true;\n}\n\nexport default {\n  state: {\n    // 是否在iframe中\n    isIframe: isIframe,\n    // 合约列表\n    contractList: null,\n    // 合约列表 MAP\n    contractListMap: {},\n    // 合约币对列表\n    contractSymbolList: [],\n    // 存储当前合约信息\n    contractInfo: null,\n    // 前台公共实时信息\n    publicMarkertInfo: {},\n    // 存储当前合约名称\n    contractName: myStorage.get('contractName'),\n    // 存储当前合约币对\n    contractSymbol: null,\n    // 存储当前合约ID\n    contractId: myStorage.get('contractId'),\n    // 用户配置信息\n    futureUserConfig: null,\n    // 是否开通合约\n    openContract: true,\n    // 是否被冻结\n    transStatus: 0,\n    // 当前合约币对 小写带类型\n    coTypeSymbol: setCoTypeSymbol(myStorage.get('contractName')),\n    // 合约价格单位\n    priceUnit: '',\n    // 合约单位(标的货币||张)\n    coUnit: '',\n    // 合约单位类型 1标的货币, 2张 未登录默认是1\n    coUnitType: myStorage.get('coUnitType') || 2,\n    // 合约面值\n    multiplier: '',\n    // 服务器当前时间和本地时间的差\n    serveTimeDiff: 0,\n    // WS URL\n    wsUrl: null,\n    // 数量精度\n    volfix: 0,\n    // 价格精度\n    pricefix: 4,\n    // 保证金币种的精度\n    coinfix: 4,\n    // 合约资产\n    futureAccountBalance: {},\n    // 合约类型文案\n    contractTypeText: {\n      E: '永续',\n      W: '周',\n      N: '次周',\n      M: '月',\n      Q: '季度',\n      H: '混合'\n    },\n    // 合约保证金信息列表\n    marginCoinInfor: null,\n    // 持仓列表\n    positionList: null,\n    // 持仓列表\n    positionListNumber: null,\n    // 币种列表\n    marginCoinList: [],\n    // 可平数量列表 {BUY: 可凭多  SELL：可凭空}\n    activeCanClose: [],\n    // 当前委托列表\n    currentOrderLis: [],\n    // 当前普通单委托数量\n    orderCount: 0,\n    // 当前条件单委托数量\n    triggerOrderCount: 0\n  },\n  mutations: {\n    // 存储WS地址\n    WS_URL: function WS_URL(state, data) {\n      state.wsUrl = data;\n    },\n    // 存储合约列表\n    CO_PUBLIC_INFO: function CO_PUBLIC_INFO(state, data) {\n      state.contractList = data;\n    },\n    // 全部合约币对列表（发送WS send ）\n    CONTRACT_SYMBOL_LIST: function CONTRACT_SYMBOL_LIST(state, data) {\n      state.contractSymbolList = data;\n    },\n    //\n    SET_COUNIT_TYPE: function SET_COUNIT_TYPE(state, data) {\n      state.coUnitType = data;\n    },\n    SET_COUNIT_TEXT: function SET_COUNIT_TEXT(state, data) {\n      state.coUnit = data;\n    },\n    // 存储当前合约信息\n    ACTIVE_CONTRACT_DATA: function ACTIVE_CONTRACT_DATA(state, data) {\n      state.contractInfo = data; // 合约面值\n\n      state.multiplier = data.multiplier; // 数量精度 (合约面值后面的小数点的位数)\n\n      state.volfix = getDigit(data.multiplier); // 合约币对价格精度\n\n      state.pricefix = data.coinResultVo.symbolPricePrecision; // 保证金币种的精度\n\n      state.coinfix = data.coinResultVo.marginCoinPrecision; // 配置合约数量默认单位\n\n      if (!state.futureUserConfig) {\n        if (state.coUnitType === 1) {\n          state.coUnit = data.multiplierCoin;\n        } else {// state.coUnit = '张';\n        }\n      }\n\n      state.priceUnit = data.quote;\n    },\n    // 存储当前合约名称\n    CONTRACT_NAME: function CONTRACT_NAME(state, data) {\n      state.contractName = data;\n    },\n    // 存储当前合约币对\n    CONTRACT_SYMBOL: function CONTRACT_SYMBOL(state, data) {\n      state.contractSymbol = data;\n    },\n    // 存储当前合约ID\n    CONTRACT_ID: function CONTRACT_ID(state, data) {\n      state.contractId = data;\n    },\n    CONTRACT_TYPE_SYMBOL: function CONTRACT_TYPE_SYMBOL(state, data) {\n      state.coTypeSymbol = data;\n    },\n    // 存储用户配置信息\n    GET_USER_CONFIG: function GET_USER_CONFIG(state, data) {\n      // 是否开通了合约\n      state.openContract = !!data.openContract; // 是否被冻结\n\n      state.transStatus = data.transStatus; // 合约单位\n\n      state.coUnitType = data.coUnit;\n      myStorage.set('coUnitType', data.coUnit);\n\n      if (data.coUnit === 1) {\n        state.coUnit = data.multiplierCoin;\n      } else {// state.coUnit = '张';\n      } // 用户配置信息\n\n\n      state.futureUserConfig = data;\n    },\n    // 服务器当前时间和本地时间的差\n    SERVE_TIME_DIFF: function SERVE_TIME_DIFF(state, data) {\n      // 用户配置信息\n      state.serveTimeDiff = data;\n    },\n    // 前台公共实时信息\n    PUBLIC_MARKER_INFO: function PUBLIC_MARKER_INFO(state, data) {\n      state.publicMarkertInfo = data;\n    },\n    // 资产详情信息\n    ACCOUNT_BALANCE: function ACCOUNT_BALANCE(state, data) {\n      state.futureAccountBalance = data;\n    },\n    // 抽取 保证金币种信息列表\n    MARGIN_COIN_INFOR: function MARGIN_COIN_INFOR(state, data) {\n      state.marginCoinInfor = data;\n    },\n    POSITION_LIST: function POSITION_LIST(state, data) {\n      state.positionList = data;\n      state.positionListNumber = data ? data.length : 0;\n    },\n    // 币种列表\n    SYMBOL_LOST: function SYMBOL_LOST(state, data) {\n      state.marginCoinList = data;\n    },\n    // 可平数量列表\n    ACTIVE_CAN_CLOSE: function ACTIVE_CAN_CLOSE(state, data) {\n      state.activeCanClose = data;\n    },\n    // 合约列表信息 MAP\n    CONTRACT_LIST_MAP: function CONTRACT_LIST_MAP(state, data) {\n      state.contractListMap = data;\n    },\n    // 当前合约订单列表\n    CURRENT_OTDER_LIST: function CURRENT_OTDER_LIST(state, data) {\n      state.currentOrderLis = data;\n    },\n    // 当前普通单委托数量\n    ORDER_COUNT: function ORDER_COUNT(state, data) {\n      state.orderCount = data;\n    },\n    // 当前条件单委托数量\n    TRIGGER_ORDER_COUNT: function TRIGGER_ORDER_COUNT(state, data) {\n      state.triggerOrderCount = data;\n    }\n  },\n  actions: {\n    // 获取合约列表数据\n    getFutorePublicInfo: function getFutorePublicInfo(_ref) {\n      var commit = _ref.commit,\n          dispatch = _ref.dispatch;\n      axios({\n        url: this.state.url.futures.publicInfo,\n        method: 'post',\n        hostType: 'co'\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          var _rs$data = rs.data,\n              contractList = _rs$data.contractList,\n              marginCoinList = _rs$data.marginCoinList;\n          setCoMarket(contractList);\n          commit('WS_URL', rs.data.wsUrl); // 设置时间差\n\n          if (rs.data.currentTimeMillis) {\n            var now = new Date().getTime();\n            commit('SERVE_TIME_DIFF', rs.data.currentTimeMillis - now);\n          }\n\n          var contractListArr = [];\n\n          if (contractList && contractList.length) {\n            var symbolList = [];\n            var marginCoinInfor = {};\n            var contractListMap = {};\n            contractList.forEach(function (item) {\n              var dataItem = item;\n              var contractName = dataItem.contractName; // 发送WS send 的时候使用的币对名\n\n              var symbolArr = contractName.toLowerCase().split('-');\n              var symbol = \"\".concat(symbolArr[0], \"_\").concat(symbolArr[1]).concat(symbolArr[2]);\n              symbolList.push(symbol); // wsDatakey 接收WS 数据时 使用的Key\n\n              dataItem.wsDatakey = symbol;\n              contractListArr.push(dataItem);\n              contractListMap[contractName] = dataItem || {}; // 保证金币种精度\n\n              var _dataItem$coinResultV = dataItem.coinResultVo,\n                  marginCoinPrecision = _dataItem$coinResultV.marginCoinPrecision,\n                  symbolPricePrecision = _dataItem$coinResultV.symbolPricePrecision;\n              contractListMap[contractName].mCionFix = marginCoinPrecision; // 价格精度\n\n              contractListMap[contractName].priceFix = symbolPricePrecision; // 数量精度（标的货币时使用， 合约面值小数点后面的位数）\n\n              contractListMap[contractName].volfix = getDigit(dataItem.multiplier); // 抽取保证金币种信息\n\n              marginCoinInfor[dataItem.marginCoin] = {\n                // 保证金币种\n                marginCoin: dataItem.marginCoin,\n                // 保证金币种精度\n                marginCoinPrecision: dataItem.coinResultVo.marginCoinPrecision,\n                // 限制转入\n                fundsInStatus: dataItem.coinResultVo.fundsInStatus,\n                // 限制转出\n                fundsOutStatus: dataItem.coinResultVo.fundsOutStatus\n              };\n            }); // 全部合约列表\n\n            commit('CO_PUBLIC_INFO', contractListArr); // 全部合约币对列表（发送WS send ）\n\n            commit('CONTRACT_SYMBOL_LIST', symbolList); // 保存 保证金信息列表\n\n            commit('MARGIN_COIN_INFOR', marginCoinInfor); // 设置当前合约信息\n\n            dispatch('setActivePublicInfo'); // 币种列表\n\n            commit('SYMBOL_LOST', marginCoinList); // 合约列表信息 MAP\n\n            commit('CONTRACT_LIST_MAP', contractListMap);\n          }\n        }\n      });\n    },\n    // 存储当前合约信息\n    setActivePublicInfo: function setActivePublicInfo(_ref2) {\n      var commit = _ref2.commit,\n          state = _ref2.state,\n          dispatch = _ref2.dispatch;\n      var contractName = myStorage.get('contractName');\n      var contractList = state.contractList;\n      commit('CONTRACT_NAME', contractName);\n      contractList.forEach(function (item) {\n        if (contractName === item.contractName) {\n          // 当前合约ID\n          commit('CONTRACT_ID', item.id); // 当前合约币对大写 不带类型\n\n          commit('CONTRACT_SYMBOL', item.symbol.replace('-', '')); // 当前合约币对 小写加类型（WS的时候需要用到）\n\n          var coTypeSymbol = \"\".concat(item.contractType, \"_\").concat(item.symbol.replace('-', ''));\n          commit('CONTRACT_TYPE_SYMBOL', coTypeSymbol.toLowerCase()); // 当前合约信息\n\n          commit('ACTIVE_CONTRACT_DATA', item);\n          dispatch('getPublicMarkertInfo');\n        }\n      });\n    },\n    // 获取用户配置信息\n    getUserConfig: function getUserConfig(_ref3) {\n      var _this = this;\n\n      var commit = _ref3.commit,\n          state = _ref3.state;\n\n      if (!state.contractId) {\n        clearInterval(timer);\n        timer = setInterval(function () {\n          if (state.contractId) {\n            clearInterval(timer);\n            axios({\n              url: _this.state.url.futures.getUserConfig,\n              method: 'post',\n              hostType: 'co',\n              params: {\n                contractId: state.contractId\n              }\n            }).then(function (rs) {\n              if (rs.code === '0') {\n                commit('GET_USER_CONFIG', rs.data);\n              }\n            });\n          }\n        }, 500);\n      } else {\n        axios({\n          url: this.state.url.futures.getUserConfig,\n          method: 'post',\n          hostType: 'co',\n          params: {\n            contractId: state.contractId\n          }\n        }).then(function (rs) {\n          if (rs.code === '0') {\n            commit('GET_USER_CONFIG', rs.data);\n          }\n        });\n      }\n    },\n    // 获取前台公共实时信息\n    getPublicMarkertInfo: function getPublicMarkertInfo(_ref4) {\n      var commit = _ref4.commit,\n          state = _ref4.state;\n\n      if (state.contractId) {\n        axios({\n          url: this.state.url.futures.publicMarkertInfo,\n          method: 'post',\n          hostType: 'co',\n          params: {\n            contractId: state.contractId\n          }\n        }).then(function (rs) {\n          if (rs.code === '0') {\n            commit('PUBLIC_MARKER_INFO', rs.data);\n          }\n        });\n      }\n    },\n    // 请求合约资产\n    getAccountBalance: function getAccountBalance(_ref5) {\n      var commit = _ref5.commit,\n          state = _ref5.state;\n\n      if (state.contractInfo) {\n        axios({\n          url: this.state.url.futures.accountBalance,\n          method: 'post',\n          hostType: 'co',\n          params: {\n            marginCoin: state.contractInfo.marginCoin\n          }\n        }).then(function (rs) {\n          if (rs.code === '0') {\n            commit('ACCOUNT_BALANCE', rs.data.accounts[0]);\n          }\n        });\n      }\n    },\n    // 获取持仓列表+资产\n    getPositionList: function getPositionList(_ref6) {\n      var commit = _ref6.commit;\n      axios({\n        url: this.state.url.futures.getAssetsList,\n        method: 'post',\n        hostType: 'co',\n        params: {}\n      }).then(function (rs) {\n        if (rs.code === '0' && rs.data) {\n          var _rs$data2 = rs.data,\n              positionList = _rs$data2.positionList,\n              accountList = _rs$data2.accountList; // 资产列表\n\n          if (accountList && accountList.length) {\n            var data = {};\n            accountList.forEach(function (item) {\n              data[item.symbol] = item;\n            });\n            commit('ACCOUNT_BALANCE', data);\n          } else {\n            commit('ACCOUNT_BALANCE', null);\n          } // 持仓列表\n\n\n          commit('POSITION_LIST', positionList);\n\n          if (positionList && positionList.length) {\n            // 可平数量\n            var activeCanClose = {};\n            positionList.forEach(function (item) {\n              if (activeCanClose[item.contractName]) {\n                activeCanClose[item.contractName][item.orderSide] = item.canCloseVolume;\n              } else {\n                activeCanClose[item.contractName] = _defineProperty({}, item.orderSide, item.canCloseVolume);\n              }\n            }); // 可平数量\n\n            commit('ACTIVE_CAN_CLOSE', activeCanClose);\n          }\n        }\n      });\n    },\n    // 领取赠金\n    getReceiveCoupon: function getReceiveCoupon(_ref7) {\n      var dispatch = _ref7.dispatch;\n      axios({\n        url: this.state.url.futures.receiveCoupon,\n        method: 'post',\n        hostType: 'co',\n        params: {}\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          dispatch('getUserConfig');\n        }\n      });\n    },\n    // 获取用户委托计数\n    getUserOrderCount: function getUserOrderCount(_ref8) {\n      var commit = _ref8.commit,\n          state = _ref8.state;\n      axios({\n        url: this.state.url.futures.getUserOrderCount,\n        method: 'post',\n        hostType: 'co',\n        params: {\n          contractId: state.contractId\n        }\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          commit('ORDER_COUNT', rs.data.orderCount);\n          commit('TRIGGER_ORDER_COUNT', rs.data.triggerOrderCount);\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["/Users/h/partTimeJob/BlockChain-ui-privatization/PC/vuex/future/future.js"],"names":["axios","setCoMarket","myStorage","getDigit","timer","setCoTypeSymbol","data","arr","split","isIframe","self","top","state","contractList","contractListMap","contractSymbolList","contractInfo","publicMarkertInfo","contractName","get","contractSymbol","contractId","futureUserConfig","openContract","transStatus","coTypeSymbol","priceUnit","coUnit","coUnitType","multiplier","serveTimeDiff","wsUrl","volfix","pricefix","coinfix","futureAccountBalance","contractTypeText","E","W","N","M","Q","H","marginCoinInfor","positionList","positionListNumber","marginCoinList","activeCanClose","currentOrderLis","orderCount","triggerOrderCount","mutations","WS_URL","CO_PUBLIC_INFO","CONTRACT_SYMBOL_LIST","SET_COUNIT_TYPE","SET_COUNIT_TEXT","ACTIVE_CONTRACT_DATA","coinResultVo","symbolPricePrecision","marginCoinPrecision","multiplierCoin","quote","CONTRACT_NAME","CONTRACT_SYMBOL","CONTRACT_ID","CONTRACT_TYPE_SYMBOL","GET_USER_CONFIG","set","SERVE_TIME_DIFF","PUBLIC_MARKER_INFO","ACCOUNT_BALANCE","MARGIN_COIN_INFOR","POSITION_LIST","length","SYMBOL_LOST","ACTIVE_CAN_CLOSE","CONTRACT_LIST_MAP","CURRENT_OTDER_LIST","ORDER_COUNT","TRIGGER_ORDER_COUNT","actions","getFutorePublicInfo","commit","dispatch","url","futures","publicInfo","method","hostType","then","rs","code","currentTimeMillis","now","Date","getTime","contractListArr","symbolList","forEach","item","dataItem","symbolArr","toLowerCase","symbol","push","wsDatakey","mCionFix","priceFix","marginCoin","fundsInStatus","fundsOutStatus","setActivePublicInfo","id","replace","contractType","getUserConfig","clearInterval","setInterval","params","getPublicMarkertInfo","getAccountBalance","accountBalance","accounts","getPositionList","getAssetsList","accountList","orderSide","canCloseVolume","getReceiveCoupon","receiveCoupon","getUserOrderCount"],"mappings":"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","sourcesContent":["// Created by 侯东东.\r\n//  云合约\r\nimport axios from '@/api/http/axios';\r\nimport { setCoMarket, myStorage, getDigit } from '@/utils';\r\n\r\nlet timer = null;\r\n\r\nconst setCoTypeSymbol = (data) => {\r\n  if (data) {\r\n    const arr = data.split('-');\r\n    return `${arr[0]}_${arr[1]}${arr[2]}`;\r\n  }\r\n  return null;\r\n};\r\nlet isIframe = false;\r\n/* eslint-disable */\r\nif (self !== top) {\r\n  isIframe = true;\r\n}\r\n\r\nexport default {\r\n  state: {\r\n    // 是否在iframe中\r\n    isIframe,\r\n    // 合约列表\r\n    contractList: null,\r\n    // 合约列表 MAP\r\n    contractListMap: {},\r\n    // 合约币对列表\r\n    contractSymbolList: [],\r\n    // 存储当前合约信息\r\n    contractInfo: null,\r\n    // 前台公共实时信息\r\n    publicMarkertInfo: {},\r\n    // 存储当前合约名称\r\n    contractName: myStorage.get('contractName'),\r\n    // 存储当前合约币对\r\n    contractSymbol: null,\r\n    // 存储当前合约ID\r\n    contractId: myStorage.get('contractId'),\r\n    // 用户配置信息\r\n    futureUserConfig: null,\r\n    // 是否开通合约\r\n    openContract: true,\r\n    // 是否被冻结\r\n    transStatus: 0,\r\n    // 当前合约币对 小写带类型\r\n    coTypeSymbol: setCoTypeSymbol(myStorage.get('contractName')),\r\n    // 合约价格单位\r\n    priceUnit: '',\r\n    // 合约单位(标的货币||张)\r\n    coUnit: '',\r\n    // 合约单位类型 1标的货币, 2张 未登录默认是1\r\n    coUnitType: myStorage.get('coUnitType') || 2,\r\n    // 合约面值\r\n    multiplier: '',\r\n    // 服务器当前时间和本地时间的差\r\n    serveTimeDiff: 0,\r\n    // WS URL\r\n    wsUrl: null,\r\n    // 数量精度\r\n    volfix: 0,\r\n    // 价格精度\r\n    pricefix: 4,\r\n    // 保证金币种的精度\r\n    coinfix: 4,\r\n    // 合约资产\r\n    futureAccountBalance: {},\r\n    // 合约类型文案\r\n    contractTypeText: {\r\n      E: '永续',\r\n      W: '周',\r\n      N: '次周',\r\n      M: '月',\r\n      Q: '季度',\r\n      H: '混合',\r\n    },\r\n    // 合约保证金信息列表\r\n    marginCoinInfor: null,\r\n    // 持仓列表\r\n    positionList: null,\r\n    // 持仓列表\r\n    positionListNumber: null,\r\n    // 币种列表\r\n    marginCoinList: [],\r\n    // 可平数量列表 {BUY: 可凭多  SELL：可凭空}\r\n    activeCanClose: [],\r\n    // 当前委托列表\r\n    currentOrderLis: [],\r\n    // 当前普通单委托数量\r\n    orderCount: 0,\r\n    // 当前条件单委托数量\r\n    triggerOrderCount: 0,\r\n  },\r\n  mutations: {\r\n    // 存储WS地址\r\n    WS_URL(state, data) {\r\n      state.wsUrl = data;\r\n    },\r\n    // 存储合约列表\r\n    CO_PUBLIC_INFO(state, data) {\r\n      state.contractList = data;\r\n    },\r\n    // 全部合约币对列表（发送WS send ）\r\n    CONTRACT_SYMBOL_LIST(state, data) {\r\n      state.contractSymbolList = data;\r\n    },\r\n    //\r\n    SET_COUNIT_TYPE(state, data) {\r\n      state.coUnitType = data;\r\n    },\r\n    SET_COUNIT_TEXT(state, data) {\r\n      state.coUnit = data;\r\n    },\r\n    // 存储当前合约信息\r\n    ACTIVE_CONTRACT_DATA(state, data) {\r\n      state.contractInfo = data;\r\n      // 合约面值\r\n      state.multiplier = data.multiplier;\r\n      // 数量精度 (合约面值后面的小数点的位数)\r\n      state.volfix = getDigit(data.multiplier);\r\n      // 合约币对价格精度\r\n      state.pricefix = data.coinResultVo.symbolPricePrecision;\r\n      // 保证金币种的精度\r\n      state.coinfix = data.coinResultVo.marginCoinPrecision;\r\n      // 配置合约数量默认单位\r\n      if (!state.futureUserConfig) {\r\n        if (state.coUnitType === 1) {\r\n          state.coUnit = data.multiplierCoin;\r\n        } else {\r\n          // state.coUnit = '张';\r\n        }\r\n      }\r\n      state.priceUnit = data.quote;\r\n    },\r\n    // 存储当前合约名称\r\n    CONTRACT_NAME(state, data) {\r\n      state.contractName = data;\r\n    },\r\n    // 存储当前合约币对\r\n    CONTRACT_SYMBOL(state, data) {\r\n      state.contractSymbol = data;\r\n    },\r\n    // 存储当前合约ID\r\n    CONTRACT_ID(state, data) {\r\n      state.contractId = data;\r\n    },\r\n    CONTRACT_TYPE_SYMBOL(state, data) {\r\n      state.coTypeSymbol = data;\r\n    },\r\n    // 存储用户配置信息\r\n    GET_USER_CONFIG(state, data) {\r\n      // 是否开通了合约\r\n      state.openContract = !!data.openContract;\r\n      // 是否被冻结\r\n      state.transStatus = data.transStatus;\r\n      // 合约单位\r\n      state.coUnitType = data.coUnit;\r\n      myStorage.set('coUnitType', data.coUnit);\r\n      if (data.coUnit === 1) {\r\n        state.coUnit = data.multiplierCoin;\r\n      } else {\r\n        // state.coUnit = '张';\r\n      }\r\n      // 用户配置信息\r\n      state.futureUserConfig = data;\r\n    },\r\n    // 服务器当前时间和本地时间的差\r\n    SERVE_TIME_DIFF(state, data) {\r\n      // 用户配置信息\r\n      state.serveTimeDiff = data;\r\n    },\r\n    // 前台公共实时信息\r\n    PUBLIC_MARKER_INFO(state, data) {\r\n      state.publicMarkertInfo = data;\r\n    },\r\n    // 资产详情信息\r\n    ACCOUNT_BALANCE(state, data) {\r\n      state.futureAccountBalance = data;\r\n    },\r\n    // 抽取 保证金币种信息列表\r\n    MARGIN_COIN_INFOR(state, data) {\r\n      state.marginCoinInfor = data;\r\n    },\r\n    POSITION_LIST(state, data) {\r\n      state.positionList = data;\r\n      state.positionListNumber = data ? data.length : 0;\r\n    },\r\n    // 币种列表\r\n    SYMBOL_LOST(state, data) {\r\n      state.marginCoinList = data;\r\n    },\r\n    // 可平数量列表\r\n    ACTIVE_CAN_CLOSE(state, data) {\r\n      state.activeCanClose = data;\r\n    },\r\n    // 合约列表信息 MAP\r\n    CONTRACT_LIST_MAP(state, data) {\r\n      state.contractListMap = data;\r\n    },\r\n    // 当前合约订单列表\r\n    CURRENT_OTDER_LIST(state, data) {\r\n      state.currentOrderLis = data;\r\n    },\r\n    // 当前普通单委托数量\r\n    ORDER_COUNT(state, data) {\r\n      state.orderCount = data;\r\n    },\r\n    // 当前条件单委托数量\r\n    TRIGGER_ORDER_COUNT(state, data) {\r\n      state.triggerOrderCount = data;\r\n    },\r\n  },\r\n  actions: {\r\n    // 获取合约列表数据\r\n    getFutorePublicInfo({ commit, dispatch }) {\r\n      axios({\r\n        url: this.state.url.futures.publicInfo,\r\n        method: 'post',\r\n        hostType: 'co',\r\n      }).then((rs) => {\r\n        if (rs.code === '0') {\r\n          const { contractList, marginCoinList } = rs.data;\r\n          setCoMarket(contractList);\r\n          commit('WS_URL', rs.data.wsUrl);\r\n          // 设置时间差\r\n          if (rs.data.currentTimeMillis) {\r\n            const now = new Date().getTime();\r\n            commit('SERVE_TIME_DIFF', rs.data.currentTimeMillis - now);\r\n          }\r\n          const contractListArr = [];\r\n          if (contractList && contractList.length) {\r\n            const symbolList = [];\r\n            const marginCoinInfor = {};\r\n            const contractListMap = {};\r\n            contractList.forEach((item) => {\r\n              const dataItem = item;\r\n              const { contractName } = dataItem;\r\n              // 发送WS send 的时候使用的币对名\r\n              const symbolArr = contractName.toLowerCase().split('-');\r\n              const symbol = `${symbolArr[0]}_${symbolArr[1]}${symbolArr[2]}`;\r\n              symbolList.push(symbol);\r\n              // wsDatakey 接收WS 数据时 使用的Key\r\n              dataItem.wsDatakey = symbol;\r\n              contractListArr.push(dataItem);\r\n\r\n              contractListMap[contractName] = dataItem || {};\r\n              // 保证金币种精度\r\n              const { marginCoinPrecision, symbolPricePrecision } = dataItem.coinResultVo;\r\n              contractListMap[contractName].mCionFix = marginCoinPrecision;\r\n              // 价格精度\r\n              contractListMap[contractName].priceFix = symbolPricePrecision;\r\n              // 数量精度（标的货币时使用， 合约面值小数点后面的位数）\r\n              contractListMap[contractName].volfix = getDigit(dataItem.multiplier);\r\n\r\n              // 抽取保证金币种信息\r\n              marginCoinInfor[dataItem.marginCoin] = {\r\n                // 保证金币种\r\n                marginCoin: dataItem.marginCoin,\r\n                // 保证金币种精度\r\n                marginCoinPrecision: dataItem.coinResultVo.marginCoinPrecision,\r\n                // 限制转入\r\n                fundsInStatus: dataItem.coinResultVo.fundsInStatus,\r\n                // 限制转出\r\n                fundsOutStatus: dataItem.coinResultVo.fundsOutStatus,\r\n              };\r\n            });\r\n            // 全部合约列表\r\n            commit('CO_PUBLIC_INFO', contractListArr);\r\n            // 全部合约币对列表（发送WS send ）\r\n            commit('CONTRACT_SYMBOL_LIST', symbolList);\r\n            // 保存 保证金信息列表\r\n            commit('MARGIN_COIN_INFOR', marginCoinInfor);\r\n            // 设置当前合约信息\r\n            dispatch('setActivePublicInfo');\r\n            // 币种列表\r\n            commit('SYMBOL_LOST', marginCoinList);\r\n            // 合约列表信息 MAP\r\n            commit('CONTRACT_LIST_MAP', contractListMap);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    // 存储当前合约信息\r\n    setActivePublicInfo({ commit, state, dispatch }) {\r\n      const contractName = myStorage.get('contractName');\r\n      const { contractList } = state;\r\n      commit('CONTRACT_NAME', contractName);\r\n      contractList.forEach((item) => {\r\n        if (contractName === item.contractName) {\r\n          // 当前合约ID\r\n          commit('CONTRACT_ID', item.id);\r\n          // 当前合约币对大写 不带类型\r\n          commit('CONTRACT_SYMBOL', item.symbol.replace('-', ''));\r\n          // 当前合约币对 小写加类型（WS的时候需要用到）\r\n          const coTypeSymbol = `${item.contractType}_${item.symbol.replace('-', '')}`;\r\n          commit('CONTRACT_TYPE_SYMBOL', coTypeSymbol.toLowerCase());\r\n          // 当前合约信息\r\n          commit('ACTIVE_CONTRACT_DATA', item);\r\n          dispatch('getPublicMarkertInfo');\r\n        }\r\n      });\r\n    },\r\n    // 获取用户配置信息\r\n    getUserConfig({ commit, state }) {\r\n      if (!state.contractId) {\r\n        clearInterval(timer);\r\n        timer = setInterval(() => {\r\n          if (state.contractId) {\r\n            clearInterval(timer);\r\n            axios({\r\n              url: this.state.url.futures.getUserConfig,\r\n              method: 'post',\r\n              hostType: 'co',\r\n              params: {\r\n                contractId: state.contractId,\r\n              },\r\n            }).then((rs) => {\r\n              if (rs.code === '0') {\r\n                commit('GET_USER_CONFIG', rs.data);\r\n              }\r\n            });\r\n          }\r\n        }, 500);\r\n      } else {\r\n        axios({\r\n          url: this.state.url.futures.getUserConfig,\r\n          method: 'post',\r\n          hostType: 'co',\r\n          params: {\r\n            contractId: state.contractId,\r\n          },\r\n        }).then((rs) => {\r\n          if (rs.code === '0') {\r\n            commit('GET_USER_CONFIG', rs.data);\r\n          }\r\n        });\r\n      }\r\n    },\r\n    // 获取前台公共实时信息\r\n    getPublicMarkertInfo({ commit, state }) {\r\n      if (state.contractId) {\r\n        axios({\r\n          url: this.state.url.futures.publicMarkertInfo,\r\n          method: 'post',\r\n          hostType: 'co',\r\n          params: {\r\n            contractId: state.contractId,\r\n          },\r\n        }).then((rs) => {\r\n          if (rs.code === '0') {\r\n            commit('PUBLIC_MARKER_INFO', rs.data);\r\n          }\r\n        });\r\n      }\r\n    },\r\n    // 请求合约资产\r\n    getAccountBalance({ commit, state }) {\r\n      if (state.contractInfo) {\r\n        axios({\r\n          url: this.state.url.futures.accountBalance,\r\n          method: 'post',\r\n          hostType: 'co',\r\n          params: {\r\n            marginCoin: state.contractInfo.marginCoin,\r\n          },\r\n        }).then((rs) => {\r\n          if (rs.code === '0') {\r\n            commit('ACCOUNT_BALANCE', rs.data.accounts[0]);\r\n          }\r\n        });\r\n      }\r\n    },\r\n    // 获取持仓列表+资产\r\n    getPositionList({ commit }) {\r\n      axios({\r\n        url: this.state.url.futures.getAssetsList,\r\n        method: 'post',\r\n        hostType: 'co',\r\n        params: {},\r\n      }).then((rs) => {\r\n        if (rs.code === '0' && rs.data) {\r\n          const { positionList, accountList } = rs.data;\r\n          // 资产列表\r\n          if (accountList && accountList.length) {\r\n            const data = {};\r\n            accountList.forEach((item) => {\r\n              data[item.symbol] = item;\r\n            });\r\n            commit('ACCOUNT_BALANCE', data);\r\n          } else {\r\n            commit('ACCOUNT_BALANCE', null);\r\n          }\r\n\r\n          // 持仓列表\r\n          commit('POSITION_LIST', positionList);\r\n          if (positionList && positionList.length) {\r\n            // 可平数量\r\n            const activeCanClose = {};\r\n            positionList.forEach((item) => {\r\n              if (activeCanClose[item.contractName]) {\r\n                activeCanClose[item.contractName][item.orderSide] = item.canCloseVolume;\r\n              } else {\r\n                activeCanClose[item.contractName] = {\r\n                  [item.orderSide]: item.canCloseVolume,\r\n                };\r\n              }\r\n            });\r\n            // 可平数量\r\n            commit('ACTIVE_CAN_CLOSE', activeCanClose);\r\n          }\r\n        }\r\n      });\r\n    },\r\n    // 领取赠金\r\n    getReceiveCoupon({ dispatch }) {\r\n      axios({\r\n        url: this.state.url.futures.receiveCoupon,\r\n        method: 'post',\r\n        hostType: 'co',\r\n        params: {},\r\n      }).then((rs) => {\r\n        if (rs.code === '0') {\r\n          dispatch('getUserConfig');\r\n        }\r\n      });\r\n    },\r\n    // 获取用户委托计数\r\n    getUserOrderCount({ commit, state }) {\r\n      axios({\r\n        url: this.state.url.futures.getUserOrderCount,\r\n        method: 'post',\r\n        hostType: 'co',\r\n        params: {\r\n          contractId: state.contractId,\r\n        },\r\n      }).then((rs) => {\r\n        if (rs.code === '0') {\r\n          commit('ORDER_COUNT', rs.data.orderCount);\r\n          commit('TRIGGER_ORDER_COUNT', rs.data.triggerOrderCount);\r\n        }\r\n      });\r\n    },\r\n\r\n  },\r\n\r\n};\r\n"]}]}