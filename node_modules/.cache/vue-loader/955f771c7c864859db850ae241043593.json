{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/input_find/InputFind.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/input_find/InputFind.vue","mtime":1641740793770},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'c-inputFind',\r\n  data() {\r\n    return {\r\n      nowValue: '', // 内部双向数据绑定\r\n      maxLength: 100, // 最长长度\r\n      isHover: false,\r\n      isFocus: false,\r\n    };\r\n  },\r\n  props: {\r\n    name: { default: '', type: String }, // 名称标识\r\n    className: { default: '', type: String }, // class根容器\r\n    disabled: { default: false, type: Boolean }, // 是否为只读\r\n    promptText: { default: '', type: String }, // 提示文案\r\n    value: { default: '', type: String }, // 外部 v-model 传入的植\r\n    lightColour: { default: false, type: Boolean }, // 是否为浅色版\r\n    iconHide: { default: false, type: Boolean },\r\n    inputStyle: { default: '', type: String },\r\n  },\r\n  watch: {\r\n    nowValue(v) {\r\n      // 限制最长长度\r\n      if (v.length > this.maxLength) {\r\n        this.nowValue = v.substring(0, this.maxLength);\r\n      }\r\n      // 限制空格\r\n      if (v.indexOf(' ') !== -1) {\r\n        const arr = this.nowValue.split(' ');\r\n        let str = '';\r\n        arr.forEach((item) => {\r\n          str += item;\r\n        });\r\n        this.nowValue = str;\r\n      }\r\n      this.$emit('onchanges', v, this.name);\r\n    },\r\n  },\r\n  created() {\r\n    this.$bus.$off('inputFind-focus');\r\n    this.$bus.$on('inputFind-focus', (name) => {\r\n      if (name === this.name) {\r\n        this.focusFn();\r\n      }\r\n    });\r\n  },\r\n  computed: {\r\n    curValue: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(value) {\r\n        this.nowValue = value;\r\n      },\r\n    },\r\n    contentClass() {\r\n      if (this.isHover || this.isFocus) {\r\n        return 'a-12-bd';\r\n      }\r\n      return 'a-2-bd';\r\n    },\r\n    solidBcClass() {\r\n      let className = null;\r\n      if (this.isHover) {\r\n        className = 'solidBc-hover';\r\n      }\r\n      if (this.isFocus) {\r\n        className = 'solidBc-active';\r\n      }\r\n      return className;\r\n    },\r\n  },\r\n  methods: {\r\n    focusFn() {\r\n      this.$nextTick(() => {\r\n        this.$refs.inputFind.focus();\r\n      });\r\n    },\r\n    clones() {\r\n      this.$emit('onchanges', '', this.name);\r\n    },\r\n    // input 鼠标划入\r\n    handMouseenter() {\r\n      this.isHover = true;\r\n    },\r\n    // input 鼠标划出\r\n    handMouseleave() {\r\n      this.isHover = false;\r\n    },\r\n    // input 获取焦点\r\n    handFocus() {\r\n      this.$emit('focus');\r\n      this.isFocus = true;\r\n    },\r\n    // input 失去焦点\r\n    handBlur() {\r\n      this.$emit('blur');\r\n      this.isFocus = false;\r\n    },\r\n  },\r\n};\r\n",null]}