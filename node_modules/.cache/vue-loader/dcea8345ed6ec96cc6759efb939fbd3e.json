{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/input_line/InputLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/input_line/InputLine.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'c-inputLine',\r\n  data() {\r\n    return {\r\n      isFocus: false, // 是否获取焦点\r\n      isHover: false, // 是否划过\r\n      inputWidth: 0, // input宽度\r\n      slotWidth: 0,\r\n      focusTime: null,\r\n      nowType: 'text',\r\n    };\r\n  },\r\n  props: {\r\n    maxLength: { default: '100000', type: String }, // 最大长度\r\n    name: { default: '', type: String }, // 名称标识\r\n    className: { default: '', type: String }, // class根容器\r\n    value: { default: '', type: String }, // 外部 v-model 传入的植\r\n    width: { default: '100%', type: String }, // 该容器根容器 width属性 (***务必加单位***)\r\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性 (***务必加单位***)\r\n    inputType: { default: 'text', type: String }, // input框 type属性\r\n    promptText: { default: '', type: String }, // 提示文案\r\n    disabled: { default: false, type: Boolean }, // 是否为只读\r\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\r\n    errorText: { default: '错误提示', type: String }, // 错误文案\r\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\r\n    warningText: { default: '', type: String }, // 是否有警示文案\r\n    hasSpaces: { default: false, type: Boolean }, // 是否允许空格\r\n    isLogin: { default: false, type: Boolean },\r\n    activeHideTitle: { default: false, type: Boolean }, // 选中时 是否展示title\r\n  },\r\n  created() {\r\n    this.$bus.$off('inputLine-focus');\r\n    this.$bus.$on('inputLine-focus', (name) => {\r\n      if (name === this.name) {\r\n        this.$refs.inputLine.focus();\r\n      }\r\n    });\r\n    if (this.isLogin) {\r\n      this.nowType = this.inputType;\r\n    }\r\n  },\r\n  computed: {\r\n    activeHideTitleFitler() {\r\n      let flag = true;\r\n      if (this.activeHideTitle) {\r\n        if (this.isFocus || this.curValue.length) {\r\n          flag = false;\r\n        }\r\n      }\r\n      return flag;\r\n    },\r\n    curValue: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(v) {\r\n        let value = v;\r\n        // 限制空格\r\n        if (this.hasSpaces) {\r\n          if (value.indexOf(' ') !== -1) {\r\n            const arr = value.split(' ');\r\n            let str = '';\r\n            arr.forEach((item) => {\r\n              str += item;\r\n            });\r\n            value = str;\r\n            this.$forceUpdate();\r\n          }\r\n        }\r\n        this.$emit('onchanges', value, this.name);\r\n      },\r\n    },\r\n    warningFlag() {\r\n      let flag = false;\r\n      if (this.warningText.length) {\r\n        if (!(this.errorFlag && !this.isFocus)) {\r\n          flag = true;\r\n        }\r\n      }\r\n      return flag;\r\n    },\r\n    // 根容器 行内样式\r\n    contentStyle() {\r\n      return {\r\n        width: this.width,\r\n        marginTop: this.marginTop,\r\n      };\r\n    },\r\n    // 基础占位容器 class\r\n    baseStanceClass() {\r\n      // 禁止时\r\n      if (this.disabled) {\r\n        return 'input-line-baseStance-disabled';\r\n      }\r\n      // 错误时\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        return 'input-line-baseStance-error';\r\n      }\r\n      return '';\r\n    },\r\n    // 提示文案 class\r\n    promptClass() {\r\n      let className = '';\r\n      let color = 'b-2-cl';\r\n      if (this.isFocus || this.value.length) {\r\n        className += 'input-line-prompt-active';\r\n      }\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        color = 'b-6-cl';\r\n      }\r\n      return `${className} ${color}`;\r\n    },\r\n    // 下横线 class\r\n    activeLineClass() {\r\n      let className = 'a-12-bg';\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        className = 'a-19-bg';\r\n      }\r\n      return className;\r\n    },\r\n    // 下横线 行内样式\r\n    activeLineStyle() {\r\n      let width = 0;\r\n      // input划过 / input聚焦 / 错误文案显示 时 下划线展示\r\n      if (this.isHover || this.isFocus || (this.errorHave && this.errorFlag)) {\r\n        width = '100%';\r\n      }\r\n      if (this.disabled) {\r\n        width = 0;\r\n      }\r\n      return {\r\n        width,\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    promptClick() {\r\n      if (this.focusTime) {\r\n        const nowTime = new Date().getTime();\r\n        if (nowTime - this.focusTime > 200) {\r\n          this.$refs.inputLine.focus();\r\n          this.focusTime = null;\r\n        }\r\n      } else {\r\n        this.$refs.inputLine.focus();\r\n      }\r\n    },\r\n    // input 鼠标划入\r\n    handMouseenter() {\r\n      this.isHover = true;\r\n    },\r\n    // input 鼠标划出\r\n    handMouseleave() {\r\n      this.isHover = false;\r\n    },\r\n    // input 获取焦点\r\n    handFocus() {\r\n      this.nowType = this.inputType;\r\n      this.$emit('focus', this.name);\r\n      this.isFocus = true;\r\n    },\r\n    // input 失去焦点\r\n    handBlur() {\r\n      this.focusTime = new Date().getTime();\r\n      this.$emit('blur', this.name);\r\n      this.isFocus = false;\r\n    },\r\n    keyup() {\r\n      this.$emit('keyup', this.name);\r\n    },\r\n  },\r\n};\r\n",null]}