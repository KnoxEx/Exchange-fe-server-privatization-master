{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/select/Select.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/select/Select.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { directive as clickOutside } from 'v-click-outside-x';\r\n\r\nexport default {\r\n  name: 'c-select',\r\n  directives: { clickOutside },\r\n  props: {\r\n    // li的展现形式\r\n    type: {\r\n      default: 'info', // info为单行li  double为双行li\r\n      type: String,\r\n    },\r\n    // 初始化默认 选中的值 String：直接显示，Number： 选项索引值\r\n    value: {\r\n      type: [String, Number],\r\n      default: '',\r\n    },\r\n    options: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    name: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    // Title\r\n    promptText: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    // 设置边框样式. 默认线性样式\r\n    box: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    // 下拉框显示多少条，默认显示5条 多出显示滚动条\r\n    optionNumber: {\r\n      type: Number,\r\n      default: 5,\r\n    },\r\n    // 选项列表 行高 默认40px\r\n    optionHeight: {\r\n      type: Number,\r\n      default: 40,\r\n    },\r\n    // 下拉框右侧展开 ICON 默认 三角形icon\r\n    appendIcon: {\r\n      type: String,\r\n      default: 'icon-triangle-down',\r\n    },\r\n    // 是否开启搜索功能\r\n    filterable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    // 是否关闭\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    // 错误提示语\r\n    errorText: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    // 将 下拉框设置成错误状态\r\n    errorFlag: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    // 占位符\r\n    placehoder: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    // 无数据 提示语\r\n    notFoundText: {\r\n      type: String,\r\n      default: '无匹配数据',\r\n    },\r\n    // 是否开启 清空选项的功能\r\n    clearable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    // 清空选项按钮的Icon, icon的class\r\n    clearableIcon: {\r\n      type: String,\r\n      default: 'icon-clear',\r\n    },\r\n    // 下拉框的宽度 （字符串 后面加单位 px %）\r\n    width: {\r\n      type: [String],\r\n      default: '',\r\n    },\r\n    // 下拉框的高度\r\n    height: {\r\n      type: [String],\r\n      default: '',\r\n    },\r\n    // 样式\r\n    styles: {\r\n      type: [Object, String],\r\n      default: '',\r\n    },\r\n    elementId: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    // 是否需要验证\r\n    errorHave: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      // 存储选中的值 和 默认选中的值\r\n      values: '',\r\n      // 控制下拉框是都可见\r\n      visible: false,\r\n      // 选项列表是否有数据\r\n      isNotOption: false,\r\n      // 检索关键字\r\n      query: '',\r\n      // isFocused\r\n      isFocused: false,\r\n      // 是否设置成错误状态\r\n      isError: false,\r\n      overInx: null,\r\n      // 获取焦点开关TAG建\r\n      focusFlang: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    if (this.value && this.options.length) {\r\n      this.values = this.getInitialValue(this.value);\r\n    }\r\n  },\r\n  computed: {\r\n    selectOption() {\r\n      if (!this.options.length) return [];\r\n      if (!this.options[0].code && this.options[0].code !== 0) {\r\n        // console.error('options数据格式错误', this.options);\r\n        return [];\r\n      }\r\n      if (!this.query) return this.options;\r\n      return this.options.filter((item) => {\r\n        if (item.value.toUpperCase().indexOf(this.query.toUpperCase()) !== -1) {\r\n          return item;\r\n        }\r\n        return false;\r\n      });\r\n    },\r\n    classes() {\r\n      return [\r\n        'common-select',\r\n        {\r\n          'select-visible': this.visible,\r\n          'select-disabled': this.disabled,\r\n          'select-value': this.values,\r\n          'select-filterable': this.filterable,\r\n          'select-error': this.isError,\r\n        },\r\n      ];\r\n    },\r\n    stylees() {\r\n      const styles = this.styles || {};\r\n      if (this.width) styles.width = this.width;\r\n      if (this.height) styles.width = this.height;\r\n      return styles;\r\n    },\r\n    optionStyle() {\r\n      const styles = {\r\n        height: `${parseFloat(this.optionHeight)}px`,\r\n        'line-height': `${parseFloat(this.optionHeight)}px`,\r\n      };\r\n      return styles;\r\n    },\r\n    setBoxHeight() {\r\n      if (this.selectOption.length <= this.optionNumber) {\r\n        return false;\r\n      }\r\n      if (this.type === 'double') {\r\n        return { height: `${this.optionNumber * 50}px` };\r\n      }\r\n      return { height: `${this.optionNumber * this.optionHeight}px` };\r\n    },\r\n  },\r\n  watch: {\r\n    value(value) {\r\n      if (!value) this.values = '';\r\n      else if (this.value) {\r\n        this.values = this.getInitialValue(value);\r\n      }\r\n    },\r\n    visible(value) {\r\n      if (!value && this.filterable && this.options.length) {\r\n        this.options.forEach((item) => {\r\n          if (item.code === this.value) {\r\n            this.values = item.value;\r\n            this.query = '';\r\n          }\r\n        });\r\n      }\r\n      this.$emit('opent-chang', value, this.name);\r\n    },\r\n    errorFlag(value) {\r\n      this.isError = value;\r\n    },\r\n  },\r\n  methods: {\r\n    mouseOver(inx) {\r\n      this.overInx = inx;\r\n    },\r\n    mouseOut() {\r\n      this.overInx = null;\r\n    },\r\n    // 下拉框 显示&隐藏\r\n    toggleMenu() {\r\n      if (!this.focusFlang) {\r\n        this.visible = !this.visible;\r\n      } else {\r\n        this.focusFlang = false;\r\n      }\r\n    },\r\n    // 点击 select 以外 隐藏下拉框\r\n    onClickOutside() {\r\n      this.focusFlang = false;\r\n      this.visible = false;\r\n    },\r\n    // 点击 选项\r\n    onOptionClick(item) {\r\n      this.query = '';\r\n      this.visible = false;\r\n      this.isError = false;\r\n      this.$emit('onChanges', item, this.name);\r\n    },\r\n    goUrl(item) {\r\n      this.visible = false;\r\n      this.$emit('onChanges', item, this.name);\r\n    },\r\n    // 搜索框 输入事件\r\n    filterableChange(event) {\r\n      this.query = event.target.value;\r\n      if (this.query.length) this.visible = true;\r\n    },\r\n    inputFoucus() {\r\n      this.isFocused = true;\r\n      if (this.filterable) {\r\n        this.focusFlang = true;\r\n        this.visible = true;\r\n        this.query = '';\r\n        this.values = '';\r\n      }\r\n    },\r\n    // 设置 显示的Value;\r\n    getInitialValue(value) {\r\n      // 如果是 true  表示 value  是搜索是输入的值\r\n      let text;\r\n      if (this.isFocused && this.filterable) {\r\n        text = value;\r\n      } else if (this.options.length) {\r\n        this.options.forEach((item) => {\r\n          if (item.code === value) {\r\n            text = item.value;\r\n          }\r\n        });\r\n      }\r\n      return text;\r\n    },\r\n    // 清除选项\r\n    resetOptionData() {\r\n      this.values = '';\r\n      this.query = '';\r\n      this.$emit('onClear', true, this.name);\r\n    },\r\n  },\r\n};\r\n",null]}