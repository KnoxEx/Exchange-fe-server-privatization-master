{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/calendar/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/calendar/Calendar.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _slicedToArray from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport timeUtil from \"./calendar\";\nexport default {\n  data: function data() {\n    return {\n      myDate: [],\n      list: [],\n      historyChose: [],\n      dateTop: ''\n    };\n  },\n  props: {\n    markDate: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    markDateMore: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    textTop: {\n      type: Array,\n      default: function _default() {\n        return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n      }\n    },\n    sundayStart: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n    agoDayHide: {\n      type: String,\n      default: '0'\n    },\n    futureDayHide: {\n      type: String,\n      default: '2554387200'\n    },\n    defaultDate: {\n      type: String,\n      default: '0'\n    },\n    defaultShowDate: {\n      type: Number\n    }\n  },\n  created: function created() {\n    this.intStart();\n\n    if (this.defaultShowDate) {\n      this.myDate = new Date(this.defaultShowDate);\n    } else {\n      this.myDate = new Date();\n    }\n  },\n  methods: {\n    intStart: function intStart() {\n      timeUtil.sundayStart = this.sundayStart;\n    },\n    setClass: function setClass(data) {\n      var obj = {};\n      obj[data.markClassName] = data.markClassName;\n      return obj;\n    },\n    clickDay: function clickDay(item) {\n      if (item.otherMonth === 'nowMonth' && !item.dayHide) {\n        this.getList(this.myDate, item.date);\n      }\n\n      if (item.otherMonth !== 'nowMonth') {\n        if (item.otherMonth === 'preMonth') {\n          this.PreMonth(item.date);\n        } else {\n          this.NextMonth(item.date);\n        }\n      }\n    },\n    ChoseMonth: function ChoseMonth(date) {\n      var isChosedDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var ndate = timeUtil.dateFormat(date);\n      this.myDate = new Date(ndate);\n      this.$emit('changeMonth', timeUtil.dateFormat(this.myDate));\n\n      if (isChosedDay) {\n        this.getList(this.myDate, date, isChosedDay);\n      } else {\n        this.getList(this.myDate);\n      }\n    },\n    PreMonth: function PreMonth(date) {\n      var isChosedDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var ndate = timeUtil.dateFormat(date);\n      this.myDate = timeUtil.getOtherMonth(this.myDate, 'preMonth');\n      this.$emit('changeMonth', timeUtil.dateFormat(this.myDate));\n\n      if (isChosedDay) {\n        this.getList(this.myDate, ndate, isChosedDay);\n      } else {\n        this.getList(this.myDate);\n      }\n    },\n    NextMonth: function NextMonth(date) {\n      var isChosedDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var ndate = timeUtil.dateFormat(date);\n      this.myDate = timeUtil.getOtherMonth(this.myDate, 'nextMonth');\n      this.$emit('changeMonth', timeUtil.dateFormat(this.myDate));\n\n      if (isChosedDay) {\n        this.getList(this.myDate, ndate, isChosedDay);\n      } else {\n        this.getList(this.myDate);\n      }\n    },\n    forMatArgs: function forMatArgs() {\n      var NmarkDate = this.markDate;\n      var NmarkDateMore = this.markDateMore;\n      NmarkDate = NmarkDate.map(function (k) {\n        return timeUtil.dateFormat(k);\n      });\n      NmarkDateMore = NmarkDateMore.map(function (k) {\n        var obj = {};\n        obj.date = timeUtil.dateFormat(k.date);\n        return obj;\n      });\n      return [NmarkDate, NmarkDateMore];\n    },\n    getList: function getList(date, chooseDay) {\n      var _this = this;\n\n      var _this$forMatArgs = this.forMatArgs(),\n          _this$forMatArgs2 = _slicedToArray(_this$forMatArgs, 2),\n          markDate = _this$forMatArgs2[0],\n          markDateMore = _this$forMatArgs2[1];\n\n      this.dateTop = \"\\n        \".concat(date.getFullYear(), \"\\n        \").concat(this.$t('common.year'), \"\\n        \").concat(date.getMonth() + 1, \"\\n        \").concat(this.$t('common.mouth'));\n      var arr = timeUtil.getMonthList(this.myDate);\n\n      var _loop = function _loop(i) {\n        var markClassName = '';\n        var k = arr[i];\n        k.chooseDay = false;\n        var nowTime = k.date;\n        var t = new Date(nowTime).getTime() / 1000; // 看每一天的class\n\n        markDateMore.forEach(function (c) {\n          if (c.date === nowTime) {\n            markClassName = c.className || '';\n          }\n        }); // 标记选中某些天 设置class\n\n        k.markClassName = markClassName;\n        k.isMark = markDate.indexOf(nowTime) > -1; // 无法选中某天\n\n        k.dayHide = t < _this.agoDayHide || t > _this.futureDayHide;\n\n        if (k.isToday) {\n          _this.$emit('isToday', nowTime);\n        }\n\n        var flag = !k.dayHide && k.otherMonth === 'nowMonth';\n\n        if (chooseDay && chooseDay === nowTime && flag) {\n          _this.$emit('choseDay', nowTime);\n\n          _this.historyChose.push(nowTime);\n\n          k.chooseDay = true;\n        } else if (_this.historyChose[_this.historyChose.length - 1] === nowTime && !chooseDay && flag) {\n          k.chooseDay = true;\n        }\n      };\n\n      for (var i = 0; i < arr.length; i += 1) {\n        _loop(i);\n      }\n\n      this.list = arr;\n    }\n  },\n  mounted: function mounted() {\n    // 为了能让日历默认选择一个 新增defaultDate字段\n    this.getList(this.myDate, this.defaultDate.replace(/-/g, '/'));\n  },\n  watch: {\n    defaultShowDate: function defaultShowDate(val) {\n      if (val) {\n        this.myDate = new Date(this.defaultShowDate);\n        this.getList(this.myDate, this.defaultDate.replace(/-/g, '/'));\n      }\n    },\n    markDate: {\n      handler: function handler() {\n        this.getList(this.myDate);\n      },\n      deep: true\n    },\n    markDateMore: {\n      handler: function handler() {\n        this.getList(this.myDate);\n      },\n      deep: true\n    },\n    agoDayHide: {\n      handler: function handler() {\n        this.getList(this.myDate);\n      },\n      deep: true\n    },\n    futureDayHide: {\n      handler: function handler() {\n        this.getList(this.myDate);\n      },\n      deep: true\n    },\n    sundayStart: {\n      handler: function handler() {\n        this.intStart();\n        this.getList(this.myDate);\n      },\n      deep: true\n    }\n  }\n};",null]}