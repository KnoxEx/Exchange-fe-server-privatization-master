{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui/PC/components/textArea_line/TextAreaLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui/PC/components/textArea_line/TextAreaLine.vue","mtime":1623835967000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'c-textAreaLine',\n  mounted() {\n    const that = this;\n    function makeExpandingArea(el) {\n      const setStyle = (ev) => {\n        that.$refs.textarea.style.height = 'auto';\n        that.$refs.textarea.style.height = `${ev.scrollHeight}px`;\n        that.$refs.area_line_inp.style.height = `${ev.scrollHeight}px`;\n      };\n      // const delayedResize = (ev) => {\n      //   window.setTimeout(() => {\n      //     setStyle(ev);\n      //   },\n      //   0);\n      // };\n      if (el.addEventListener) {\n        el.addEventListener(\n          'input',\n          () => {\n            setStyle(el);\n          },\n          false,\n        );\n        setStyle(el);\n      } else if (el.attachEvent) {\n        el.attachEvent('onpropertychange', () => {\n          setStyle(el);\n        });\n        setStyle(el);\n      }\n      // if (window.VBArray && window.addEventListener) { // IE9\n      //   el.attachEvent('onkeydown', () => {\n      //     const key = window.event.keyCode;\n      //     if (key === 8 || key === 46) delayedResize(el);\n      //   });\n      //   el.attachEvent('oncut', () => {\n      //     delayedResize(el);\n      //   }); // 处理粘贴\n      // }\n    }\n    makeExpandingArea(this.$refs.textarea);\n  },\n  data() {\n    return {\n      isFocus: false, // 是否获取焦点\n      isHover: false, // 是否划过\n      inputWidth: 0, // input宽度\n      slotWidth: 0,\n      focusTime: null,\n      nowType: 'text',\n    };\n  },\n  props: {\n    maxLength: { default: '500', type: String }, // 最大长度\n    name: { default: '', type: String }, // 名称标识\n    className: { default: '', type: String }, // class根容器\n    value: { default: '', type: String }, // 外部 v-model 传入的植\n    width: { default: '100%', type: String }, // 该容器根容器 width属性 (***务必加单位***)\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性 (***务必加单位***)\n    inputType: { default: 'text', type: String }, // input框 type属性\n    promptText: { default: '', type: String }, // 提示文案\n    disabled: { default: false, type: Boolean }, // 是否为只读\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\n    errorText: { default: '', type: String }, // 错误文案\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\n    warningText: { default: '', type: String }, // 是否有警示文案\n  },\n  created() {\n    this.$bus.$off('textarea-focus');\n    this.$bus.$on('textarea-focus', (name) => {\n      if (name === this.name) {\n        this.$refs.textarea.focus();\n      }\n    });\n  },\n  computed: {\n    curValue: {\n      get() {\n        return this.value;\n      },\n      set(v) {\n        const value = v;\n        // 限制空格\n        // if (value.indexOf(' ') !== -1) {\n        //   const arr = value.split(' ');\n        //   let str = '';\n        //   arr.forEach((item) => { str += item; });\n        //   value = str;\n        //   this.$forceUpdate();\n        // }\n        this.$emit('onchanges', value, this.name);\n      },\n    },\n    warningFlag() {\n      let flag = false;\n      if (this.warningText.length) {\n        if (!(this.errorFlag && !this.isFocus)) {\n          flag = true;\n        }\n      }\n      return flag;\n    },\n    // 根容器 行内样式\n    contentStyle() {\n      return {\n        width: this.width,\n        marginTop: this.marginTop,\n      };\n    },\n    // 基础占位容器 class\n    baseStanceClass() {\n      // 禁止时\n      if (this.disabled) {\n        return 'input-line-baseStance-disabled';\n      }\n      // 错误时\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        return 'input-line-baseStance-error';\n      }\n      return '';\n    },\n    // 提示文案 class\n    promptClass() {\n      let className = '';\n      let color = 'b-2-cl';\n      if (this.isFocus || this.value.length) {\n        className += 'input-line-prompt-active';\n      }\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        color = 'b-6-cl';\n      }\n      return `${className} ${color}`;\n    },\n    // 下横线 class\n    activeLineClass() {\n      let className = 'a-12-bg';\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        className = 'a-19-bg';\n      }\n      return className;\n    },\n    // 下横线 行内样式\n    activeLineStyle() {\n      let width = 0;\n      // input划过 / input聚焦 / 错误文案显示 时 下划线展示\n      if (this.isHover || this.isFocus || (this.errorHave && this.errorFlag)) {\n        width = '100%';\n      }\n      if (this.disabled) {\n        width = 0;\n      }\n      return {\n        width,\n      };\n    },\n  },\n  methods: {\n    promptClick() {\n      if (this.focusTime) {\n        const nowTime = new Date().getTime();\n        if (nowTime - this.focusTime > 200) {\n          this.$refs.textarea.focus();\n          this.focusTime = null;\n        }\n      } else {\n        this.$refs.textarea.focus();\n      }\n    },\n    // input 鼠标划入\n    handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave() {\n      this.isHover = false;\n    },\n    // input 获取焦点\n    handFocus() {\n      this.nowType = this.inputType;\n      this.$emit('focus', this.name);\n      this.isFocus = true;\n    },\n    // input 失去焦点\n    handBlur() {\n      this.focusTime = new Date().getTime();\n      this.$emit('blur', this.name);\n      this.isFocus = false;\n    },\n  },\n};\n",{"version":3,"sources":["TextAreaLine.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"TextAreaLine.vue","sourceRoot":"../BlockChain-ui/PC/components/textArea_line","sourcesContent":["// Created by 任泽阳 on 18/12/05. // 多行文本输入框\n<template>\n  <section class='area-line-content' :style='contentStyle' :class='className'>\n    <!-- 基础占位 46px 包含下划线 -->\n    <div\n      class='input-line-baseStance a-2-bd'\n      :class='baseStanceClass'\n      ref='baseStance'\n    >\n      <div\n        class='input_line_inp'\n        ref='area_line_inp'\n        @mouseenter='handMouseenter'\n        @mouseout='handMouseleave'\n      >\n        <!-- 输入框 -->\n        <textarea\n          :maxlength='maxLength'\n          class='common-textarea b-1-cl'\n          :type='nowType'\n          required='true'\n          v-model='curValue'\n          :disabled='disabled'\n          @focus='handFocus'\n          @blur='handBlur'\n          ref='textarea'\n          rows='1'\n          autocomplete='off'\n        ></textarea>\n        <div class='input-line-slot clearfix' ref='slot'>\n          <slot />\n        </div>\n        <svg class='icon icon-14 area-icon' aria-hidden='true' v-if='!disabled'>\n          <use xlink:href='#icon-a_18'></use>\n        </svg>\n      </div>\n      <!-- 提示信息 -->\n      <label\n        class='input-line-prompt'\n        :class='promptClass'\n        @click='promptClick'\n        >{{ promptText }}</label\n      >\n      <!-- 选中时横线 -->\n      <span\n        class='input-line-activeLine'\n        :class='activeLineClass'\n        :style='activeLineStyle'\n      ></span>\n      <!-- 只读时 -->\n    </div>\n    <!-- 错误文案占位 24px -->\n    <div class='input-line-errorStence' v-if='errorHave'>\n      <!-- 错误信息容器 -->\n      <p class='input-line-error b-6-cl' v-if='errorFlag && !isFocus'>\n        {{ errorText }}\n      </p>\n      <!-- 警示文案 -->\n      <p class='input-line-warning' v-else-if='warningFlag'>\n        {{ warningText }}\n      </p>\n    </div>\n    <!-- 底部提示框 -->\n    <div class='input-line-limit'></div>\n  </section>\n</template>\n<script>\nexport default {\n  name: 'c-textAreaLine',\n  mounted() {\n    const that = this;\n    function makeExpandingArea(el) {\n      const setStyle = (ev) => {\n        that.$refs.textarea.style.height = 'auto';\n        that.$refs.textarea.style.height = `${ev.scrollHeight}px`;\n        that.$refs.area_line_inp.style.height = `${ev.scrollHeight}px`;\n      };\n      // const delayedResize = (ev) => {\n      //   window.setTimeout(() => {\n      //     setStyle(ev);\n      //   },\n      //   0);\n      // };\n      if (el.addEventListener) {\n        el.addEventListener(\n          'input',\n          () => {\n            setStyle(el);\n          },\n          false,\n        );\n        setStyle(el);\n      } else if (el.attachEvent) {\n        el.attachEvent('onpropertychange', () => {\n          setStyle(el);\n        });\n        setStyle(el);\n      }\n      // if (window.VBArray && window.addEventListener) { // IE9\n      //   el.attachEvent('onkeydown', () => {\n      //     const key = window.event.keyCode;\n      //     if (key === 8 || key === 46) delayedResize(el);\n      //   });\n      //   el.attachEvent('oncut', () => {\n      //     delayedResize(el);\n      //   }); // 处理粘贴\n      // }\n    }\n    makeExpandingArea(this.$refs.textarea);\n  },\n  data() {\n    return {\n      isFocus: false, // 是否获取焦点\n      isHover: false, // 是否划过\n      inputWidth: 0, // input宽度\n      slotWidth: 0,\n      focusTime: null,\n      nowType: 'text',\n    };\n  },\n  props: {\n    maxLength: { default: '500', type: String }, // 最大长度\n    name: { default: '', type: String }, // 名称标识\n    className: { default: '', type: String }, // class根容器\n    value: { default: '', type: String }, // 外部 v-model 传入的植\n    width: { default: '100%', type: String }, // 该容器根容器 width属性 (***务必加单位***)\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性 (***务必加单位***)\n    inputType: { default: 'text', type: String }, // input框 type属性\n    promptText: { default: '', type: String }, // 提示文案\n    disabled: { default: false, type: Boolean }, // 是否为只读\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\n    errorText: { default: '', type: String }, // 错误文案\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\n    warningText: { default: '', type: String }, // 是否有警示文案\n  },\n  created() {\n    this.$bus.$off('textarea-focus');\n    this.$bus.$on('textarea-focus', (name) => {\n      if (name === this.name) {\n        this.$refs.textarea.focus();\n      }\n    });\n  },\n  computed: {\n    curValue: {\n      get() {\n        return this.value;\n      },\n      set(v) {\n        const value = v;\n        // 限制空格\n        // if (value.indexOf(' ') !== -1) {\n        //   const arr = value.split(' ');\n        //   let str = '';\n        //   arr.forEach((item) => { str += item; });\n        //   value = str;\n        //   this.$forceUpdate();\n        // }\n        this.$emit('onchanges', value, this.name);\n      },\n    },\n    warningFlag() {\n      let flag = false;\n      if (this.warningText.length) {\n        if (!(this.errorFlag && !this.isFocus)) {\n          flag = true;\n        }\n      }\n      return flag;\n    },\n    // 根容器 行内样式\n    contentStyle() {\n      return {\n        width: this.width,\n        marginTop: this.marginTop,\n      };\n    },\n    // 基础占位容器 class\n    baseStanceClass() {\n      // 禁止时\n      if (this.disabled) {\n        return 'input-line-baseStance-disabled';\n      }\n      // 错误时\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        return 'input-line-baseStance-error';\n      }\n      return '';\n    },\n    // 提示文案 class\n    promptClass() {\n      let className = '';\n      let color = 'b-2-cl';\n      if (this.isFocus || this.value.length) {\n        className += 'input-line-prompt-active';\n      }\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        color = 'b-6-cl';\n      }\n      return `${className} ${color}`;\n    },\n    // 下横线 class\n    activeLineClass() {\n      let className = 'a-12-bg';\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        className = 'a-19-bg';\n      }\n      return className;\n    },\n    // 下横线 行内样式\n    activeLineStyle() {\n      let width = 0;\n      // input划过 / input聚焦 / 错误文案显示 时 下划线展示\n      if (this.isHover || this.isFocus || (this.errorHave && this.errorFlag)) {\n        width = '100%';\n      }\n      if (this.disabled) {\n        width = 0;\n      }\n      return {\n        width,\n      };\n    },\n  },\n  methods: {\n    promptClick() {\n      if (this.focusTime) {\n        const nowTime = new Date().getTime();\n        if (nowTime - this.focusTime > 200) {\n          this.$refs.textarea.focus();\n          this.focusTime = null;\n        }\n      } else {\n        this.$refs.textarea.focus();\n      }\n    },\n    // input 鼠标划入\n    handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave() {\n      this.isHover = false;\n    },\n    // input 获取焦点\n    handFocus() {\n      this.nowType = this.inputType;\n      this.$emit('focus', this.name);\n      this.isFocus = true;\n    },\n    // input 失去焦点\n    handBlur() {\n      this.focusTime = new Date().getTime();\n      this.$emit('blur', this.name);\n      this.isFocus = false;\n    },\n  },\n};\n</script>\n<style lang='stylus'>\n.area-line-content {\n  .common-textarea {\n    resize:none;\n    line-height: 30px;\n    width: 380px;\n    max-height: 150px;\n    padding: 0;\n    margin: 0;\n  }\n  // 基础占位容器 (默认)\n  .input-line-baseStance {\n    // height: 30px;\n    padding-top: 14px;\n    // box-sizing: border-box;\n    border-bottom-width: 2px;\n    border-bottom-style: solid;\n    position: relative;\n    .area-icon {\n      position: absolute;\n      right: 0;\n      bottom: 0;\n    }\n    // 输入框\n    .input_line_inp {\n      // position: absolute;\n      bottom: 0px;\n      // z-index: 2;\n      width: 100%;\n      border: 0px;\n      font-size: 14px;\n      // height: 30px;\n      background: none;\n      max-height: 150px;\n      // box-sizing: border-box;\n      // outline: none;\n      textarea {\n        // height: 30px;\n        width: 100%;\n        font-size: 14px;\n        position: absolute;\n        bottom: 0;\n      }\n      textarea::-webkit-scrollbar {\n        display: none;\n      }\n      .input-line-slot {\n        float: left;\n        display: inline-block;\n        position: absolute;\n        height: auto;\n        right: 0;\n        bottom: 0;\n      }\n    }\n    // 提示文案容器\n    .input-line-prompt {\n      cursor: text;\n      z-index: 1;\n      position: absolute;\n      height: 30px;\n      line-height: 30px;\n      top: 14px;\n      left: 0;\n      font-size: 14px;\n      -webkit-transition: 0.3s;\n      transition: 0.3s;\n      user-select:none;\n    }\n    // input聚焦/具有文本 时 提示文案浮起\n    .input-line-prompt-active {\n      cursor: auto;\n      font-size: 12px;\n      -ms-transform: translateY(-20px);\n      -webkit-transform: translateY(-20px);\n      transform: translateY(-20px);\n    }\n    // 下划线动效容器\n    .input-line-activeLine {\n      position: absolute;\n      z-index: 3;\n      // top: 43px;\n      bottom: -2px;\n      height: 2px;\n      width: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      display: inline-block;\n      transition: 0.5s;\n      -webkit-transition: 0.5s;\n      -ms-transition: 0.5s;\n      animation-delay: 0.5s\n      -webkit-animation-delay: 0.5s\n      -ms-animation-delay: 0.5s\n    }\n  }\n  // 基础占位容器 (禁用时)\n  .input-line-baseStance-disabled {\n    border-bottom-width: 2px;\n    border-bottom-style: dotted;\n    .input-line-prompt-active {\n      cursor: no-drop;\n    }\n    textarea {\n      cursor: no-drop;\n    }\n  }\n  // 基础占位容器 (错误时)\n  .input-line-baseStance-error {\n    // 提示文案容器 (错误时)\n    .input-line-prompt {\n      animation: shake 0.6s cubic-bezier(0.25, 0.8, 0.5, 1);\n    }\n  }\n  // 错误信息占位容器\n  .input-line-errorStence {\n    height: 24px;\n    position: relative;\n    // 错误文案容器\n    .input-line-error {\n      position: absolute;\n      top: 2px;\n      margin: 0;\n      font-size: 12px;\n      user-select:none;\n    }\n    // 警示框\n    .input-line-warning {\n      position: absolute;\n      bottom: 5px;\n      font-size: 12px;\n    }\n  }\n\n  .input_line_inp:focus+.input-line-prompt,\n  .input_line_inp:valid+.input-line-prompt {\n  }\n  // 错误 label 抖动 动画\n  @-webkit-keyframes shake {\n    59% {\n      margin-left: 0;\n    }\n    60%, 80% {\n      margin-left: 2px;\n    }\n    70%, 90% {\n      margin-left: -2px;\n    }\n  }\n  @keyframes shake {\n    59% {\n      margin-left: 0;\n    }\n    60%, 80% {\n      margin-left: 2px;\n    }\n    70%, 90% {\n      margin-left: -2px;\n    }\n  }\n}\n</style>\n"]}]}