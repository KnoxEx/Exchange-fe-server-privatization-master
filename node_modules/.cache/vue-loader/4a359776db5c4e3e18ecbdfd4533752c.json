{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/verify/geetest.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/verify/geetest.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'common-geetest',\r\n  data() {\r\n    return {\r\n      nowState: false, // 当前状态 true可滑动 false不可滑动 用于下划线时判断\r\n      isHover: false, // 是否划过\r\n      isReady: false, // 是否准备成功\r\n    };\r\n  },\r\n  props: {\r\n    product: { default: '', type: String },\r\n    width: { default: '100%', type: String }, // 该容器根容器 width属性\r\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性\r\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\r\n    errorText: { default: '', type: String }, // 错误文案\r\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\r\n    geetestBg: { default: 'a-7-bg', type: String }, // 极验的背景颜色\r\n    colorMap: { default: () => {}, required: true },\r\n  },\r\n  computed: {\r\n    lan() {\r\n      return this.$store.state.baseData.lan;\r\n    },\r\n    geetestLan() {\r\n      let language = '';\r\n      // 简体中文\r\n      if (this.lan === 'zh_CN') {\r\n        language = 'zh-cn';\r\n        // 繁体中文\r\n      } else if (this.lan === 'el_GR') {\r\n        language = 'zh-hk';\r\n        // 葡萄牙\r\n      } else if (this.lan === 'pt_PT') {\r\n        language = 'pt-pt';\r\n      } else {\r\n        const arr = [\r\n          'en', // 英文\r\n          'ja', // 日文\r\n          'id', // 印尼\r\n          'ko', // 韩语\r\n          'ru', // 俄语\r\n          'ar', // 阿拉伯\r\n          'es', // 西班牙语\r\n          'fr', // 法语\r\n          'de', // 德语\r\n        ];\r\n        if (this.lan.length && this.lan.split('_').length) {\r\n          if (arr.indexOf(this.lan.split('_')[0].toLowerCase()) !== -1) {\r\n            const [lans] = this.lan.split('_');\r\n            language = lans;\r\n          }\r\n        }\r\n      }\r\n      if (!language.length) {\r\n        language = 'en';\r\n      }\r\n      return language;\r\n    },\r\n    // 根容器 行内样式\r\n    contentStyle() {\r\n      return {\r\n        width: this.width,\r\n        marginTop: this.marginTop,\r\n      };\r\n    },\r\n    // 基础占位容器 class\r\n    baseStanceClass() {\r\n      if (this.errorHave && this.errorFlag) {\r\n        return 'common-geetest-baseStance-error';\r\n      }\r\n      return '';\r\n    },\r\n    // 下横向 行内样式\r\n    activeLineStyle() {\r\n      let width = '0%';\r\n      if (\r\n        (this.nowState && this.isHover)\r\n        || (this.errorHave && this.errorFlag)\r\n      ) {\r\n        width = '100%';\r\n      }\r\n      return {\r\n        width,\r\n      };\r\n    },\r\n    // 下横线 class\r\n    activeLineClass() {\r\n      let className = 'a-12-bg';\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        className = 'a-19-bg';\r\n      }\r\n      return className;\r\n    },\r\n  },\r\n  created() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    // input 鼠标划入\r\n    handMouseenter() {\r\n      this.isHover = true;\r\n    },\r\n    // input 鼠标划出\r\n    handMouseleave() {\r\n      this.isHover = false;\r\n    },\r\n    init() {\r\n      this.axios({\r\n        url: 'common/tartCaptcha',\r\n        headers: {},\r\n        params: {},\r\n        method: 'post',\r\n      }).then((data) => {\r\n        if (data.code === '0') {\r\n          this.geetest({\r\n            challenge: data.data.captcha.challenge,\r\n            gt: data.data.captcha.gt,\r\n            success: data.data.captcha.success,\r\n          });\r\n        }\r\n      });\r\n    },\r\n    setStyle() {\r\n      const { colorMap } = this;\r\n      const radar = document.getElementsByClassName(\r\n        'geetest_radar_tip_content',\r\n      );\r\n      const reset = document.getElementsByClassName(\r\n        'geetest_reset_tip_content',\r\n      );\r\n      const geetestRadarBtn = document.getElementsByClassName(\r\n        'geetest_radar_btn',\r\n      );\r\n      const geetestSuccessBtn = document.getElementsByClassName(\r\n        'geetest_success_btn',\r\n      );\r\n\r\n      if (colorMap) {\r\n        if (radar && radar.length) {\r\n          radar[0].style.color = colorMap['b-2-cl'];\r\n        }\r\n        if (reset && reset.length) {\r\n          reset[0].style.color = colorMap['b-2-cl'];\r\n        }\r\n        if (geetestRadarBtn && geetestRadarBtn.length) {\r\n          geetestRadarBtn[0].style.background = colorMap[this.geetestBg];\r\n        }\r\n        if (geetestSuccessBtn && geetestSuccessBtn.length) {\r\n          geetestSuccessBtn[0].style.background = colorMap[this.geetestBg];\r\n        }\r\n      }\r\n    },\r\n    // 构件极验\r\n    geetest({ challenge, gt, success }) {\r\n      const product = this.product ? this.product : 'popup';\r\n      window.initGeetest(\r\n        {\r\n          // 以下 4 个配置参数为必须，不能缺少\r\n          product,\r\n          lang: this.geetestLan,\r\n          gt,\r\n          challenge,\r\n          offline: !success, // 表示用户后台检测极验服务器是否宕机\r\n          new_captcha: true, // 用于宕机时表示是新验证码的宕机\r\n          width: '100%',\r\n        },\r\n        (captchaObj) => {\r\n          this.nowState = true;\r\n          captchaObj.appendTo(this.$refs.captchaBox);\r\n          this.$emit('getCaptchaObj', captchaObj);\r\n          captchaObj.onReady(() => {\r\n            this.isReady = true;\r\n            this.$nextTick(() => {\r\n              this.setStyle();\r\n            });\r\n          });\r\n          captchaObj.onError(() => {});\r\n          captchaObj.onSuccess(() => {\r\n            this.nowState = false;\r\n            const result = captchaObj.getValidate();\r\n            setTimeout(() => {\r\n              this.$emit('callback', {\r\n                geetest_challenge: result.geetest_challenge,\r\n                geetest_seccode: result.geetest_seccode,\r\n                geetest_validate: result.geetest_validate,\r\n                verificationType: '2',\r\n                token: true,\r\n                nc: Object.assign(captchaObj, { reset: captchaObj.reset }),\r\n              });\r\n            }, 300);\r\n          });\r\n        },\r\n      );\r\n    },\r\n  },\r\n};\r\n",null]}