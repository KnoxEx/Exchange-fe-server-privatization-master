{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/lever/lever.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/lever/lever.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { fixInput, nul, division, fixD, thousandsComma as _thousandsComma } from '@/utils';\nexport default {\n  name: 'lever',\n  data: function data() {\n    return {\n      stepPosition: 1,\n      currenttage: 1,\n      movement: 0,\n      // 是否加载成功\n      dialogConfirmLoading: false,\n      // 是否禁止提交\n      dialogConfirmDisabled: false,\n      // 是否禁止输入\n      inputDisabled: false,\n      // 杠杆输入框选中Class\n      inputActiveClass: '',\n      // 杠杆值\n      leverage: 0,\n      // 最小杠杆倍数\n      minLeverage: 1,\n      // 最大杠杆倍数\n      maxLeverage: 100,\n      // 开关\n      levelSwitch: true,\n      // 当前杠杆最高可持有仓位上限\n      maxNumber: 0,\n      isShowUserMaxLevel: false\n    };\n  },\n  props: {\n    isShow: {\n      default: false,\n      type: Boolean\n    },\n    close: {\n      default: function _default() {},\n      type: Function\n    }\n  },\n  computed: {\n    lanText: function lanText() {\n      return {\n        text1: this.$t('futures.lever.text1'),\n        // 杠杆倍数\n        text2: this.$t('futures.lever.text2'),\n        // 当前持仓最高支持杠杆\n        text3: this.$t('futures.lever.text3'),\n        // 当前杠杆最高可持有仓位上限约\n        text4: this.$t('futures.lever.text4'),\n        // 确认\n        text5: this.$t('futures.lever.text5'),\n        // 请登录后再进行操作\n        text6: this.$t('futures.lever.text6'),\n        // 本合约有委托单不可调整杠杆\n        text7: this.$t('futures.lever.text7'),\n        // 合约杠杆\n        text8: this.$t('futures.lever.text8') // 杠杆倍数最小不能低于\n\n      };\n    },\n    itemLvaue: function itemLvaue() {\n      return division(this.maxLeverage, 5);\n    },\n    feeValue: function feeValue() {\n      return division(this.maxLeverage, 100);\n    },\n    // 提交保证金按钮文案\n    confirmText: function confirmText() {\n      var text = this.lanText.text4; // '确认';\n\n      if (!this.isLogin) {\n        text = this.lanText.text5; // '请登录后再进行操作';\n      }\n\n      if (!this.levelSwitch) {\n        text = this.lanText.text6; // '本合约有委托单不可调整杠杆';\n\n        this.dialogConfirmDisabled = true;\n      }\n\n      return text;\n    },\n    // 是否Login\n    isLogin: function isLogin() {\n      return this.$store.state.baseData.isLogin;\n    },\n    // 用户配置信息\n    userConfig: function userConfig() {\n      return this.$store.state.future.futureUserConfig;\n    },\n    // 用户信息配置-可持有仓位上限\n    leverCeiling: function leverCeiling() {\n      if (this.userConfig) {\n        return this.userConfig.leverCeiling;\n      }\n\n      return null;\n    },\n    // 用户最大可选择杠杆\n    userMaxLevel: function userMaxLevel() {\n      return this.userConfig ? this.userConfig.userMaxLevel : 0;\n    },\n    // 当前合约ID\n    contractId: function contractId() {\n      return this.$store.state.future.contractId;\n    },\n    // 数量单位\n    coUnit: function coUnit() {\n      return this.$store.state.future.coUnit;\n    },\n    // 当前合约面值\n    multiplier: function multiplier() {\n      return Number(this.$store.state.future.multiplier);\n    },\n    // 当前合约数量精度\n    volfix: function volfix() {\n      return this.$store.state.future.volfix;\n    },\n    // 数量单位类型Number\n    coUnitType: function coUnitType() {\n      return this.$store.state.future.coUnitType;\n    },\n    // 当前合约信息\n    contractInfo: function contractInfo() {\n      return this.$store.state.future.contractInfo;\n    },\n    // 当前合约名称\n    activeContractName: function activeContractName() {\n      var name = '';\n      var text = '';\n\n      if (this.contractInfo) {\n        var nameText = this.contractInfo.symbol ? this.contractInfo.symbol.replace('-', '') : '';\n\n        if (this.contractInfo.contractType !== 'E') {\n          text = \"-\".concat(this.contractInfo.marginCoin);\n        }\n\n        name = \"\".concat(nameText).concat(text);\n      }\n\n      return name;\n    },\n    // 弹窗标题\n    dialogTitle: function dialogTitle() {\n      return \"\".concat(this.activeContractName, \" \").concat(this.lanText.text7); // 合约杠杆\n    }\n  },\n  watch: {\n    currenttage: function currenttage(val) {\n      if (val || val === 0) {\n        if (val > 100) {\n          this.currenttage = 100;\n        }\n\n        if (val < 2) {\n          this.leverage = 1;\n        } else {\n          this.leverage = Math.round(nul(this.currenttage, this.feeValue));\n        }\n      } else {\n        this.leverage = '';\n      }\n    },\n    leverage: function leverage(val, old) {\n      var _this = this;\n\n      if (val) {\n        // console.log(val);\n        if (Number(val) > this.userMaxLevel) {\n          this.isShowUserMaxLevel = true;\n          setTimeout(function () {\n            _this.leverage = _this.userMaxLevel;\n          }, 100);\n        } else {\n          this.leverage = fixInput(val, 0);\n\n          if (old && Number(old) <= this.userMaxLevel && Number(val) < Number(old)) {\n            this.isShowUserMaxLevel = false;\n          }\n\n          if (this.userMaxLevel && Number(val) > this.userMaxLevel) {\n            this.dialogConfirmDisabled = true;\n          } else {\n            this.dialogConfirmDisabled = false;\n          }\n\n          if (Number(val) > this.maxLeverage) {\n            this.leverage = this.maxLeverage;\n          }\n\n          this.setPosition();\n          this.setMaxNumber();\n        }\n      }\n    },\n    userConfig: function userConfig(val) {\n      if (val) {\n        this.levelSwitch = !!this.userConfig.levelCanSwitch;\n        this.minLeverage = this.userConfig.minLevel;\n        this.maxLeverage = this.userConfig.maxLevel;\n        this.dialogConfirmDisabled = !this.levelSwitch;\n      }\n    }\n  },\n  methods: {\n    init: function init() {\n      if (this.userConfig) {\n        this.leverage = this.userConfig.nowLevel;\n        this.minLeverage = this.userConfig.minLevel;\n        this.maxLeverage = this.userConfig.maxLevel;\n        this.levelSwitch = !!this.userConfig.levelCanSwitch;\n        this.dialogConfirmDisabled = !this.levelSwitch;\n      } else {\n        this.leverage = 20;\n      }\n\n      document.onmouseup = function () {\n        document.onmousemove = null;\n      };\n    },\n    // 设置最大持仓上限\n    setMaxNumber: function setMaxNumber() {\n      var num = 0;\n\n      if (this.leverCeiling) {\n        var keyArr = Object.keys(this.leverCeiling);\n        keyArr.sort(function (a, b) {\n          return parseFloat(a) - parseFloat(b);\n        });\n        var nextL = 0;\n\n        for (var index = 0; index < keyArr.length; index += 1) {\n          if (Number(this.leverage) > nextL && Number(this.leverage) <= keyArr[index]) {\n            num = this.leverCeiling[keyArr[index]];\n          }\n\n          nextL = keyArr[index];\n        } // 标的货币\n\n\n        if (this.coUnitType === 1) {\n          this.maxNumber = fixD(num, this.volfix);\n        } // 张\n\n\n        if (this.coUnitType === 2) {\n          this.maxNumber = fixD(division(num, this.multiplier), 0);\n        }\n      }\n    },\n    // 设置滑竿位置\n    setPosition: function setPosition() {\n      if (this.leverage) {\n        if (this.leverage < 2) {\n          this.stepPosition = 0;\n        } else {\n          this.stepPosition = division(this.leverage, this.feeValue);\n        }\n      } else {\n        this.stepPosition = 1;\n      }\n    },\n    onmousedownCick: function onmousedownCick(e) {\n      if (this.levelSwitch) {\n        var bar = this.$refs.dragStepWrap;\n        var barLeft = bar.getBoundingClientRect().x;\n        var oevent = e || window.event;\n        var leftVal = oevent.clientX - barLeft;\n        var stepPosition = parseInt(nul(division(leftVal, bar.offsetWidth), 100), 0);\n        this.currenttage = stepPosition < 1 ? 1 : stepPosition;\n      }\n    },\n    // 杠杆滑动\n    onmousedown: function onmousedown(event) {\n      var _this2 = this;\n\n      if (this.levelSwitch) {\n        var oevent = event || window.event;\n        var self = this.$refs.dragStep;\n        var bar = this.$refs.dragStepWrap;\n        var leftVal = oevent.clientX - self.offsetLeft;\n\n        document.onmousemove = function (e) {\n          oevent = e || window.event;\n          var movement = oevent.clientX - leftVal;\n\n          if (movement < 0) {\n            movement = 0;\n          } else if (movement > bar.offsetWidth) {\n            movement = bar.offsetWidth;\n          }\n\n          var stepPosition = parseInt(nul(division(movement, bar.offsetWidth), 100), 0);\n          _this2.currenttage = stepPosition < 1 ? 1 : stepPosition;\n\n          document.onmouseup = function () {\n            document.onmousemove = null;\n          };\n        };\n\n        document.onmouseup = function () {\n          document.onmousemove = null;\n        };\n      }\n    },\n    // 点击 滑动到指定倍数位置\n    dragStep: function dragStep(index) {\n      if (this.levelSwitch) {\n        // this.stepPosition = nul(index, 20);\n        this.currenttage = nul(index, 20);\n        this.$emit('levelChange', index);\n      }\n    },\n    // 乘法\n    nulFun: function nulFun(val1, val2) {\n      return Math.round(nul(val1, val2));\n    },\n    // 加\n    add: function add() {\n      this.isClickAddOrSub = true;\n\n      if (this.levelSwitch) {\n        if (Number(this.leverage) < Number(this.maxLeverage) && Number(this.leverage) < Number(this.userMaxLevel)) {\n          var leverage = Number(this.leverage) + 1;\n          this.leverage = leverage;\n          this.isShowUserMaxLevel = false;\n        } else {\n          this.isShowUserMaxLevel = true;\n        }\n      }\n    },\n    // 减\n    subtract: function subtract() {\n      if (this.levelSwitch) {\n        this.isClickAddOrSub = true;\n\n        if (Number(this.leverage) > 1) {\n          var leverage = Number(this.leverage) - 1;\n          this.leverage = leverage;\n          this.isShowUserMaxLevel = false;\n        } else {\n          this.isShowUserMaxLevel = true;\n        }\n      }\n    },\n    // 提交杠杆倍数\n    submitLeverage: function submitLeverage() {\n      var _this3 = this;\n\n      if (!this.isLogin) {\n        this.$router.push('/login');\n        return false;\n      }\n\n      if (this.minLeverage > this.leverage) {\n        // 杠杆倍数最小不能低于\n        this.$bus.$emit('tip', {\n          text: \"\".concat(this.lanText.text8).concat(this.minLeverage),\n          type: 'error'\n        });\n      }\n\n      if (this.userConfig) {\n        this.dialogConfirmLoading = true;\n        this.axios({\n          url: this.$store.state.url.futures.levelEdit,\n          hostType: 'co',\n          method: 'post',\n          params: {\n            nowLevel: this.leverage,\n            contractId: this.contractId\n          }\n        }).then(function (_ref) {\n          var code = _ref.code,\n              msg = _ref.msg;\n\n          if (code.toString() === '0') {\n            _this3.$store.dispatch('getUserConfig');\n\n            _this3.close();\n\n            _this3.$bus.$emit('tip', {\n              text: msg,\n              type: 'success'\n            });\n          } else {\n            _this3.$bus.$emit('tip', {\n              text: msg,\n              type: 'error'\n            });\n          }\n\n          _this3.dialogConfirmLoading = false;\n        });\n      }\n\n      return false;\n    },\n    thousandsComma: function thousandsComma(num) {\n      if (num) {\n        return _thousandsComma(num);\n      }\n\n      return num;\n    }\n  }\n};",null]}