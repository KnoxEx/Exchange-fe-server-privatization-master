{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/button/Button.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/button/Button.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.big\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'c-button',\n  data: function data() {\n    return {\n      flag: true,\n      wH: 0,\n      // 动画变量\n      nX: 0,\n      // 动画变量\n      nY: 0,\n      // 动画变量\n      canvClass: '',\n      // 动画class\n      isHover: false,\n      isClick: false\n    };\n  },\n  props: {\n    name: {\n      default: '',\n      type: String\n    },\n    // 类型   实心-solid 空心-hollow 文本-test\n    type: {\n      validator: function validator(val) {\n        return ['solid', 'hollow', 'text'].indexOf(val) !== -1;\n      },\n      default: 'solid'\n    },\n    className: {\n      default: '',\n      type: String\n    },\n    // 根容器class 默认样式 不要传进来选中样式和滑过样式\n    // *** 如果要配置颜色组 需要传入一整套颜色\n    defaultColorClass: {\n      default: '',\n      type: String\n    },\n    // 该组件默认颜色组\n    hoverColorClass: {\n      default: '',\n      type: String\n    },\n    // 该组件滑过颜色组 仅空心按钮 框线按钮\n    activeColorClass: {\n      default: '',\n      type: String\n    },\n    // 该组件选中颜色组 仅空心按钮 框线按钮\n    // ***\n    disabled: {\n      default: false,\n      type: Boolean\n    },\n    // 是否禁用 (!** 该属性仅存在solid类型 **!)\n    loading: {\n      default: false,\n      type: Boolean\n    },\n    // 是否loading  (!** 该属性仅存在solid类型 **!)\n    big: {\n      default: false,\n      type: Boolean\n    },\n    // 是否为略大button  (!** 该属性仅存在hollow类型 **!)\n    kind: {\n      default: false,\n      type: Boolean\n    },\n    // false为蓝色系 true为灰色系  (!** 该属性仅存在text类型 **!)\n    paddingW: {\n      default: '',\n      type: String\n    },\n    // 左右padding\n    height: {\n      default: '',\n      type: String\n    },\n    // 该容器根容器 height属性\n    width: {\n      default: '',\n      type: String\n    },\n    // 该容器根容器 width属性\n    marginTop: {\n      default: '0px',\n      type: String\n    } // 该组件根容器 margin-top属性\n\n  },\n  created: function created() {\n    var _this = this;\n\n    // 错误处理： 如果 disable和loading同时存在\n    if (this.disabled && this.loading) {\n      this.flag = false; // 不展示组件\n      // throw('Common-button: disable 和 loading 只可存在一个') // 抛错\n      // console.error('Common-button: disable 和 loading 只可存在一个');\n    }\n\n    this.$bus.$on('button-click', function (name) {\n      if (name === _this.name) {\n        _this.handClick();\n      }\n    });\n  },\n  computed: {\n    // overClass() {\n    //   let className = ''\n    //   if(this.type === 'solid') { return className }\n    //   if(this.isHover) {\n    //     if(this.type === 'hollow') {\n    //       // if(this.big) {  }\n    //       return 'a-12-bd'\n    //     }\n    //   }\n    // },\n    // 用于实心按钮 滑过和点击\n    solidBcClass: function solidBcClass() {\n      var className = null;\n\n      if (this.type === 'solid' && !this.loading && !this.disabled) {\n        if (this.isHover) {\n          className = 'u-14-bg';\n        }\n\n        if (this.isClick) {\n          className = 'u-15-bg';\n        }\n      }\n\n      return className;\n    },\n    contentStyle: function contentStyle() {\n      var _this$$props = this.$props,\n          width = _this$$props.width,\n          height = _this$$props.height,\n          paddingW = _this$$props.paddingW;\n      var hollowH = this.big ? '30px' : '24px';\n\n      switch (this.type) {\n        // 实心\n        case 'solid':\n          width = width === '' ? '' : width;\n          height = height === '' ? '40px' : height;\n          paddingW = paddingW === '' ? '20px' : paddingW;\n          break;\n        // 空心\n\n        case 'hollow':\n          width = width === '' ? '' : width;\n          height = height === '' ? hollowH : height;\n          paddingW = paddingW === '' ? '20px' : paddingW;\n          break;\n        // 文本\n\n        case 'text':\n          width = width === '' ? '' : width;\n          height = height === '' ? '24px' : height;\n          paddingW = paddingW === '' ? '10px' : paddingW;\n          break;\n\n        default:\n          break;\n      }\n\n      return {\n        width: width,\n        height: height,\n        paddingLeft: paddingW,\n        paddingRight: paddingW,\n        marginTop: this.marginTop\n      };\n    },\n    // 整理当前类型和状态\n    nowType: function nowType() {\n      var type = 'solid';\n\n      if (this.type === 'solid') {\n        type = 'solid';\n\n        if (this.loading) {\n          type = 'solid-loading';\n        }\n\n        if (this.disabled) {\n          type = 'solid-disabled';\n        }\n      } else if (this.type === 'hollow') {\n        type = 'hollow';\n\n        if (this.big) {\n          type = 'hollow-big';\n        }\n      } else if (this.type === 'text') {\n        type = 'text';\n\n        if (this.kind) {\n          type = 'text-king';\n        }\n      }\n\n      return type;\n    },\n    // 基础样式\n    infoClass: function infoClass() {\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'common-button-solid';\n\n        case 'solid-loading':\n          return 'common-button-solid-loading';\n\n        case 'solid-disabled':\n          return 'common-button-solid-disabled';\n        // 框线\n\n        case 'hollow':\n          return 'common-button-hollow';\n\n        case 'hollow-big':\n          return 'common-button-hollow-big';\n        // 文本\n\n        case 'text':\n          return 'common-button-text';\n\n        case 'text-king':\n          return 'common-button-text-kind';\n\n        default:\n          return 'common-button-solid';\n      }\n    },\n    // 元素默认颜色\n    defaultColor: function defaultColor() {\n      if (this.defaultColorClass.length > 0) {\n        return this.defaultColorClass;\n      }\n\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl';\n        // ( class 背景色-蓝 字体色-白 )\n\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl';\n        // ( class 背景色-蓝 字体色-白 )\n\n        case 'solid-disabled':\n          return 'u-11-bg u-16-cl';\n        // ( class 背景色-灰 字体色-白 )\n        // 框线\n\n        case 'hollow':\n          return 'u-11-cl u-11-bd';\n        // ( class 字体色-灰 边框色-灰 )\n\n        case 'hollow-big':\n          return 'u-11-cl u-8-bd';\n        // ( class 字体色-灰 边框色-蓝 )\n        // 文本\n\n        case 'text':\n          return 'u-8-cl';\n        // ( class 字体色-蓝 )\n\n        case 'text-king':\n          return 'u-11-cl';\n        // ( class 字体色-灰 )\n\n        default:\n          return 'u-8-bg u-11-cl';\n        // ( class 背景色-蓝 字体色-白 )\n      }\n    },\n    // 元素滑过颜色\n    hoverColor: function hoverColor() {\n      if (this.hoverColorClass.length > 0) {\n        return this.hoverColorClass;\n      }\n\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl';\n        // ( class 背景色-蓝 字体色-白 )\n\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl';\n        // ( class 背景色-蓝 字体色-白 )\n\n        case 'solid-disabled':\n          return 'u-11-bg u-16-cl';\n        // ( class 背景色-灰 字体色-白 )\n        // 框线\n\n        case 'hollow':\n          return 'u-8-cl u-8-bd';\n        // ( class 字体色-蓝 边框色-蓝 )\n\n        case 'hollow-big':\n          return 'u-8-cl u-8-bd';\n        // ( class 字体色-蓝 边框色-蓝 )\n        // 文本\n\n        case 'text':\n          return 'u-8-cl u-9-bg';\n        // ( class 字体色 )\n\n        case 'text-king':\n          return 'u-11-cl u-12-bg';\n        // ( class 字体色 )\n\n        default:\n          return 'u-8-bg u-11-cl';\n        // ( class 背景色 字体色 )\n      }\n    },\n    // 元素点击颜色\n    activeColor: function activeColor() {\n      if (this.activeColorClass.length > 0) {\n        return this.activeColorClass;\n      }\n\n      switch (this.nowType) {\n        // 实心\n        case 'solid':\n          return 'u-8-bg u-16-cl';\n        // ( class 背景色-蓝 字体色-白 )\n\n        case 'solid-loading':\n          return 'u-8-bg u-16-cl';\n        // ( class 背景色-蓝 字体色-白 )\n\n        case 'solid-disabled':\n          return 'u-12-bg u-16-cl';\n        // ( class 背景色-灰 字体色-白 )\n        // 框线\n\n        case 'hollow':\n          return 'u-8-cl u-8-bd';\n        // ( class 字体色-蓝 边框色-蓝 )\n\n        case 'hollow-big':\n          return 'u-8-cl u-8-bd';\n        // ( class 字体色-蓝 边框色-蓝 )\n        // 文本3\n\n        case 'text':\n          return 'u-8-cl u-10-bg';\n        // ( class 字体色 )\n\n        case 'text-king':\n          return 'u-11-cl u-12-bg';\n        // ( class 字体色 )\n\n        default:\n          return 'u-8-bg u-11-cl';\n        // ( class 背景色 字体色 )\n      }\n    },\n    allClass: function allClass() {\n      var colorClass = this.defaultColor;\n\n      if (this.isHover) {\n        colorClass = this.hoverColor;\n      }\n\n      if (this.isClick) {\n        colorClass = this.activeColor;\n      }\n\n      return \"\".concat(this.infoClass, \" \").concat(colorClass);\n    },\n    // 特效点击点\n    canvStyle: function canvStyle() {\n      return {\n        width: \"\".concat(this.wH, \"px\"),\n        height: \"\".concat(this.wH, \"px\"),\n        left: \"\".concat(this.nX, \"px\"),\n        top: \"\".concat(this.nY, \"px\")\n      };\n    }\n  },\n  methods: {\n    // input 鼠标划入\n    handMouseenter: function handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave: function handMouseleave() {\n      this.isHover = false;\n    },\n    handMouseDown: function handMouseDown() {\n      this.isClick = true;\n    },\n    handMouseUp: function handMouseUp() {\n      this.isClick = false;\n    },\n    handClick: function handClick() {\n      if (this.disabled || this.loading) return;\n      this.$emit('click');\n    }\n  }\n};",null]}