{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/resetPass/resetPass.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/resetPass/resetPass.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { imgMap, colorMap } from '@/utils'; // 获取验证码\n\nexport default {\n  name: 'page-resetPass',\n  data: function data() {\n    return {\n      imgMap: imgMap,\n      colorMap: colorMap,\n      nowType: 'phone',\n      // phone--手机注册  email--邮箱注册\n      nowStep: '1',\n      // 当前步骤\n      // 内容部分\n      userValue: '',\n      // userValue\n      checkValue: '',\n      // 验证码value\n      passValue: '',\n      // 密码Value\n      comfirmValue: '',\n      // 确认密码value\n      submitLoading: false,\n      submitDisabled: false,\n      verifyObj: {},\n      // 滑动返回对象\n      verifyFlag: false,\n      // 滑动是否通过\n      haveGoogle: false,\n      // 是否开启谷歌\n      haveID: false,\n      // 是否开启身份证\n      googleValue: '',\n      // 谷歌\n      IDValue: '' // 身份证\n\n    };\n  },\n  watch: {\n    loginRegistType: function loginRegistType(v) {\n      if (v) {\n        this.initNowType();\n      }\n    },\n    loginFlag: function loginFlag(v) {\n      if (v) {\n        this.goHome();\n      }\n    }\n  },\n  computed: {\n    isInternationTem: function isInternationTem() {\n      return this.$store.state.baseData.templateLayoutType === '2';\n    },\n    // 是否展示tab切换\n    tabFlag: function tabFlag() {\n      var flag = false;\n\n      if (this.loginRegistType === '1') {\n        flag = true;\n      }\n\n      return flag;\n    },\n    // 开启验证方式\n    loginRegistType: function loginRegistType() {\n      // const { publicInfo } = this.$store.state.baseData;\n      var str = '1'; // 1 手机/邮箱， 2 仅手机， 3 仅邮箱\n      // if (publicInfo && publicInfo.switch && publicInfo.switch.login_regist_type) {\n      //   str = publicInfo.switch.login_regist_type.toString();\n      // }\n\n      return str;\n    },\n    tabList: function tabList() {\n      return [// 手机号找回\n      {\n        name: this.$t('resetPass.phoneReset'),\n        key: 'phone'\n      }, // 邮箱找回\n      {\n        name: this.$t('resetPass.emailReset'),\n        key: 'email'\n      }];\n    },\n    loginFlag: function loginFlag() {\n      var _this$$store$state$ba = this.$store.state.baseData,\n          isLogin = _this$$store$state$ba.isLogin,\n          userInfoIsReady = _this$$store$state$ba.userInfoIsReady;\n\n      if (isLogin && userInfoIsReady) {\n        return true;\n      }\n\n      return false;\n    },\n    maxLength: function maxLength() {\n      var maxLength = '100';\n\n      if (this.nowType === 'phone') {\n        maxLength = '30';\n      }\n\n      return maxLength;\n    },\n    regExps: function regExps() {\n      return this.$store.state.regExp;\n    },\n    // userValue 是否复合正则验证\n    userFlag: function userFlag() {\n      var reg = this.nowType === 'phone' ? this.regExps.phone : this.regExps.email;\n      return reg.test(this.userValue);\n    },\n    // checkValue 是否复合正则验证\n    checkFlag: function checkFlag() {\n      return this.regExps.verification.test(this.checkValue);\n    },\n    // google 是否复合正则验证\n    googleFlag: function googleFlag() {\n      return this.regExps.verification.test(this.googleValue);\n    },\n    // 身份证号 是否复合正则验证\n    IDFlag: function IDFlag() {\n      return this.regExps.nonEmpty.test(this.IDValue);\n    },\n    // passValue 是否复合正则验证\n    passFlag: function passFlag() {\n      return this.regExps.passWord.test(this.passValue);\n    },\n    // comfirmValue 是否两次密码输入一致\n    comfirmFlag: function comfirmFlag() {\n      return this.passValue === this.comfirmValue;\n    },\n    // user框是否为错误状态\n    userErrorFlag: function userErrorFlag() {\n      if (this.userValue.length !== 0 && !this.userFlag) return true;\n      return false;\n    },\n    // 验证框是否为错误\n    checkErrorFlag: function checkErrorFlag() {\n      if (this.checkValue.length !== 0 && !this.checkFlag) return true;\n      return false;\n    },\n    googleErrorFlag: function googleErrorFlag() {\n      if (this.googleValue.length !== 0 && !this.googleFlag) return true;\n      return false;\n    },\n    IDErrorFlag: function IDErrorFlag() {\n      if (this.IDValue.length !== 0 && !this.IDFlag) return true;\n      return false;\n    },\n    // pass框是否为错误状态\n    passErrorFlag: function passErrorFlag() {\n      if (this.passValue.length !== 0 && !this.passFlag) return true;\n      return false;\n    },\n    // comfirm框是否为错误状态\n    comfirmErrorFlag: function comfirmErrorFlag() {\n      if (this.comfirmValue.length !== 0 && !this.comfirmFlag) return true;\n      return false;\n    },\n    domKeys: function domKeys() {\n      if (this.nowType === 'phone') {\n        return {\n          userKey: 'phone-user',\n          verifyKey: 'phone-verify',\n          checkKey: 'phone-check',\n          passKey: 'phone-pass',\n          comfirmKey: 'phone-comfirm',\n          googleKey: 'phone-google',\n          IDKey: 'phone-ID'\n        };\n      }\n\n      return {\n        userKey: 'email-user',\n        verifyKey: 'email-verify',\n        checkKey: 'email-check',\n        passKey: 'email-pass',\n        comfirmKey: 'email-comfirm',\n        googleKey: 'email-google',\n        IDKey: 'email-ID'\n      };\n    },\n    domTexts: function domTexts() {\n      if (this.nowType === 'phone') {\n        return {\n          userText: this.$t('resetPass.phone'),\n          // 手机号\n          userError: this.$t('resetPass.phoneError'),\n          // 手机号输入格式不正确\n          codeText: this.$t('resetPass.phoneCode'),\n          // 短信验证码\n          codeError: this.$t('resetPass.phoneCodeError') // 请输入6位数字短信验证码\n\n        };\n      }\n\n      return {\n        userText: this.$t('resetPass.email'),\n        // 邮箱\n        userError: this.$t('resetPass.emailError'),\n        // 邮箱输入格式不正确\n        codeText: this.$t('resetPass.emailCode'),\n        // 邮箱验证码\n        codeError: this.$t('resetPass.emailCodeError') // 请输入6位数字邮箱验证码\n\n      };\n    },\n    submitStatus: function submitStatus() {\n      // 当前步骤为步骤一时\n      var disabled = true;\n      var text = '';\n\n      if (this.nowStep === '1') {\n        if (this.verifyFlag && this.userFlag || this.submitLoading) {\n          disabled = false;\n        }\n\n        text = this.$t('resetPass.next'); // 第二步\n      } else if (this.nowStep === '2') {\n        var IDF = true;\n        var googleF = true;\n\n        if (this.haveID) {\n          IDF = this.IDFlag;\n        }\n\n        if (this.haveGoogle) {\n          googleF = this.googleFlag;\n        }\n\n        if (this.checkFlag && googleF && IDF || this.submitLoading) {\n          disabled = false;\n        }\n\n        text = this.$t('resetPass.next'); // 第三步\n      } else if (this.nowStep === '3') {\n        if (this.passFlag && this.comfirmFlag || this.submitLoading) {\n          disabled = false;\n        }\n\n        text = this.$t('resetPass.submit');\n      }\n\n      return {\n        text: text,\n        disabled: disabled // 是否禁用\n\n      };\n    },\n    publicInfo: function publicInfo() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      return publicInfo;\n    },\n    companyName: function companyName() {\n      if (this.publicInfo && this.publicInfo.msg) {\n        return this.publicInfo.msg.company_name;\n      }\n\n      return '';\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      if (this.loginFlag) {\n        this.goHome();\n      }\n\n      this.$bus.$off('emailCode');\n      this.$bus.$on('emailCode', function (data) {\n        var newData = JSON.parse(JSON.stringify(data));\n        newData.callback = undefined;\n\n        _this.axios({\n          url: 'v4/common/emailValidCode',\n          method: 'post',\n          header: {},\n          params: newData\n        }).then(function (info) {\n          data.callback(info);\n        }).catch(function () {});\n      });\n      this.$bus.$off('phoneCode');\n      this.$bus.$on('phoneCode', function (data) {\n        var newData = JSON.parse(JSON.stringify(data));\n        newData.callback = undefined;\n\n        _this.axios({\n          url: 'v4/common/smsValidCode',\n          method: 'post',\n          header: {},\n          params: newData\n        }).then(function (info) {\n          data.callback(info);\n        }).catch(function () {// console.log(info);\n        });\n      });\n\n      if (this.loginRegistType) {\n        this.initNowType();\n      }\n    },\n    goUrl: function goUrl(url) {\n      this.$router.push(url);\n    },\n    initNowType: function initNowType() {\n      if (this.loginRegistType === '3') {\n        this.nowType = 'email';\n      } else {\n        this.nowType = 'phone';\n      }\n    },\n    goHome: function goHome() {\n      this.$router.push('/');\n    },\n    // 切换找回类型\n    setNowType: function setNowType(type) {\n      this.nowStep = '1'; // 步骤返回到第一步\n\n      this.nowType = type; // 切换tab\n\n      this.userValue = ''; // 清空userValue\n\n      this.verifyFlag = false; // 滑动验证\n\n      this.verifyObj = {}; // 滑动验证\n\n      this.checkValue = ''; // 短信/邮箱验证\n    },\n    // input onchanges事件\n    inputChanges: function inputChanges(value, name) {\n      this[name] = value;\n    },\n    // 滑动验证成功后\n    verifyCallBack: function verifyCallBack(parameter) {\n      this.verifyObj = parameter;\n      this.verifyFlag = true;\n    },\n    // 获取验证码\n    getCodeClick: function getCodeClick() {\n      this.sendCode();\n    },\n    submit: function submit() {\n      if (this.nowStep === '1') {\n        this.submitStep1();\n      } else if (this.nowStep === '2') {\n        this.submitStep2();\n      } else if (this.nowStep === '3') {\n        this.submitStep3();\n      }\n    },\n    // 第一步提交\n    submitStep1: function submitStep1() {\n      var _this2 = this;\n\n      var key = this.nowType === 'phone' ? 'mobileNumber' : 'email';\n      this.submitLoading = true;\n      this.axios({\n        url: 'v4/user/reset_password_step_one',\n        params: _objectSpread(_objectSpread({}, this.verifyObj), {}, _defineProperty({\n          nc: undefined\n        }, key, this.userValue))\n      }).then(function (data) {\n        if (_this2.verifyObj.nc) {\n          _this2.verifyObj.nc.reset();\n        }\n\n        _this2.verifyFlag = false;\n        _this2.verifyObj = {};\n        _this2.submitLoading = false;\n\n        if (data.code.toString() === '0') {\n          var _data$data = data.data,\n              token = _data$data.token,\n              isCertificateNumber = _data$data.isCertificateNumber,\n              isGoogleAuth = _data$data.isGoogleAuth;\n          _this2.token = token;\n\n          if (isCertificateNumber && isCertificateNumber.toString() === '1') {\n            _this2.haveID = true; // 是否开启谷歌身份证\n          }\n\n          if (isGoogleAuth && isGoogleAuth.toString() === '1') {\n            _this2.haveGoogle = true; // 是否开启谷歌\n          }\n\n          _this2.nowStep = '2';\n        } else {\n          _this2.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 第二步提交\n    submitStep2: function submitStep2() {\n      var _params,\n          _this3 = this;\n\n      var key = this.nowType === 'phone' ? 'smsCode' : 'emailCode';\n      this.submitLoading = true;\n      this.axios({\n        url: 'v4/user/reset_password_step_two',\n        params: (_params = {}, _defineProperty(_params, key, this.checkValue), _defineProperty(_params, \"token\", this.token), _defineProperty(_params, \"googleCode\", this.googleValue), _defineProperty(_params, \"certifcateNumber\", this.IDValue), _params)\n      }).then(function (data) {\n        _this3.submitLoading = false;\n\n        if (data.code.toString() === '0') {\n          _this3.nowStep = '3';\n        } else {\n          _this3.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 第三步提交\n    submitStep3: function submitStep3() {\n      var _this4 = this;\n\n      this.submitLoading = true;\n      this.axios({\n        url: '/user/reset_password_step_three',\n        params: {\n          loginPword: this.passValue,\n          // 密码\n          token: this.token // token\n\n        }\n      }).then(function (data) {\n        _this4.submitLoading = false;\n\n        if (data.code.toString() === '0') {\n          // 重置密码成功，请您登录\n          _this4.$bus.$emit('tip', {\n            text: _this4.$t('resetPass.resetSuccess'),\n            type: 'success'\n          });\n\n          _this4.$router.push('/login');\n        } else {\n          _this4.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 发送短信/邮箱\n    sendCode: function sendCode() {\n      var _this5 = this;\n\n      if (this.nowType === 'phone') {\n        this.$bus.$emit('phoneCode', {\n          token: this.token,\n          // token\n          operationType: '24',\n          // 模版\n          callback: function callback(data) {\n            if (data.code.toString() !== '0') {\n              // 倒计时重置\n              _this5.$bus.$emit('getCode-clear', 'resetPassGetcode'); // tip框提示错误\n\n\n              _this5.$bus.$emit('tip', {\n                text: data.msg,\n                type: 'error'\n              });\n            } else {\n              // 短信已发送，请注意查收\n              _this5.$bus.$emit('tip', {\n                text: _this5.$t('resetPass.phoneSendSuccess'),\n                type: 'success'\n              });\n            }\n          }\n        });\n      } else if (this.nowType === 'email') {\n        this.$bus.$emit('emailCode', {\n          token: this.token,\n          // token\n          operationType: '3',\n          callback: function callback(data) {\n            if (data.code.toString() !== '0') {\n              // 倒计时重置\n              _this5.$bus.$emit('getCode-clear', 'resetPassGetcode'); // tip框提示错误\n\n\n              _this5.$bus.$emit('tip', {\n                text: data.msg,\n                type: 'error'\n              });\n            } else {\n              // 邮件已发送，请注意查收\n              _this5.$bus.$emit('tip', {\n                text: _this5.$t('resetPass.emailSendSuccess'),\n                type: 'success'\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n};",null]}