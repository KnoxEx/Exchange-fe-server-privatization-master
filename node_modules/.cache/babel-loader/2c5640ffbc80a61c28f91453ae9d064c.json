{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/spotTrade/trade/internationalTradeForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/spotTrade/trade/internationalTradeForm.vue","mtime":1636870529512},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport 'BlockChain-ui-privatization/PC/common-mixin/modules/trade/tradeForm/internationalTradeForm/internationalTradeForm.styl';\nimport mixin from 'BlockChain-ui-privatization/PC/common-mixin/modules/trade/tradeForm/internationalTradeForm/internationalTradeForm';\nimport { myStorage, fixD, division, cut, nul, getCoinShowName } from 'BlockChain-ui-privatization/utils';\nimport tradeInput from '@/components/modules/trade/tradeForm/tradeInput.vue';\nimport GridTradeInput from '@/components/modules/trade/tradeForm/GridTradeInput.vue';\nexport default {\n  mixins: [mixin],\n  components: {\n    tradeInput: tradeInput,\n    GridTradeInput: GridTradeInput\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  data: function data() {\n    return {\n      marketData: [],\n      tradeIsSell: 1,\n      gridTabType: 0,\n      gridType: 1,\n      // 专业版选择自定义或者ai\n      setType: 1,\n      // 类型1等差2 等比\n      gridSetFormFlag: false,\n      gridAiFormFlag: false,\n      minimumOrderQuantity: 0,\n      // 最小下单金额\n      // 七日年化收益率\n      sevenDay: '--',\n      gridAiMin: '--',\n      // 最大利润率\n      gridAiMax: '--',\n      // 最小利润率\n      gridAiMinPrice: '--',\n      // Ai 最小值\n      gridAiMaxPrice: '--',\n      // Ai 最大值\n      fee: null,\n      // 手续费\n      // set代表自定义\n      gridSetMin: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        errorHeight: '-30px',\n        value: ''\n      },\n      gridSetMax: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        errorHeight: '-30px',\n        value: ''\n      },\n      // 数量\n      gridSetNum: {\n        units: '',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        errorHeight: '-30px',\n        value: ''\n      },\n      // 资产\n      gridSetAccount: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        style: 'width: 53%',\n        errorHeight: '-30px',\n        value: ''\n      },\n      // 止盈价格\n      gridSetMaxBalance: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        style: 'width: 53%',\n        errorHeight: '-30px',\n        value: ''\n      },\n      // 止损价格\n      gridSetMinBalance: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        style: 'width: 53%',\n        errorHeight: '-30px',\n        value: ''\n      },\n      gridAiBlance: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: true,\n        disabledText: '',\n        errorHeight: '-30px',\n        value: ''\n      },\n      gridAiNum: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: true,\n        disabledText: '',\n        errorHeight: '-30px',\n        value: ''\n      },\n      gridAiAccount: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        style: 'width: 53%',\n        errorHeight: '-30px',\n        value: ''\n      },\n      gridAiMaxBalance: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        style: 'width: 53%',\n        errorHeight: '-30px',\n        value: ''\n      },\n      gridAiMinBalance: {\n        units: myStorage.get('sSymbolName') ? myStorage.get('sSymbolName').split('/')[1] : 'USDT',\n        errorText: '',\n        isError: false,\n        disabled: false,\n        disabledText: '',\n        style: 'width: 53%',\n        errorHeight: '-30px',\n        value: ''\n      }\n    };\n  },\n  computed: {\n    //  是否开启了 网格\n    gridTradeFlag: function gridTradeFlag() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var str = 1;\n\n      if (publicInfo && publicInfo.switch && publicInfo.switch.grid_trade_switch) {\n        str = Number(publicInfo.switch.grid_trade_switch);\n      }\n\n      return str;\n    },\n    // 该币对是否开启网格\n    showGridFlag: function showGridFlag() {\n      var flag = false;\n\n      if (this.symbolAll && this.symbolCurrent) {\n        var symbol = this.symbolAll[this.symbolCurrent];\n\n        if (symbol && symbol.is_grid_open) {\n          flag = true;\n        }\n      }\n\n      return flag;\n    },\n    // 按钮信息\n    gridbuttosContent: function gridbuttosContent() {\n      return {\n        gridButton: {\n          // 开启网格交易\n          text: this.isLogin ? this.$t('gridTrade.btn1') : this.$t('trade.loginReg'),\n          // '登录/注册',\n          class: this.isLogin ? 'u-1-bg buyBtn u-16-cl' : 'u-8-bg buyBtn u-16-cl'\n        },\n        // 开启AI网格策略\n        gridAiButton: {\n          text: this.isLogin ? this.$t('gridTrade.btn2') : this.$t('trade.loginReg'),\n          // '登录/注册',\n          class: this.isLogin ? 'u-1-bg buyBtn u-16-cl' : 'u-8-bg buyBtn u-16-cl'\n        }\n      };\n    },\n    // 等差网格（动态利润）： min ~ max\n    // max =（（最高价-最低价）/ （网格数量 - 1）/ 最低价）  - 买入手续费率 - 卖出手续费率\n    // min =（ (最高价-最低价）/ （网格数量 - 1））/ （最高价 - （ (最高价-最低价）/ （网格数量 - 1）））  - 买入手续费率 - 卖出手续费率\n    // 最低利润\n    gridSetMinProfits: function gridSetMinProfits() {\n      // 1: 等差 2 等比\n      var val = null;\n\n      if (this.gridSetMax.value && this.gridSetMin.value && this.gridSetNum.value) {\n        if (this.setType === 1) {\n          var card = division(cut(this.gridSetMax.value, this.gridSetMin.value), this.gridSetNum.value - 1);\n          val = nul(cut(cut(division(card, cut(this.gridSetMax.value, card)), this.fee), this.fee), 100);\n        }\n      }\n\n      if (val === Infinity || val === -Infinity) {\n        val = null;\n      }\n\n      return fixD(val, 2) || '--';\n    },\n    // 最高利润\n    gridSetMaxProfits: function gridSetMaxProfits() {\n      // 1: 等差 2 等比\n      var val = null;\n\n      if (this.gridSetMax.value && this.gridSetMin.value && this.gridSetNum.value) {\n        if (this.setType === 1) {\n          val = nul(cut(cut(division(division(cut(this.gridSetMax.value, this.gridSetMin.value), this.gridSetNum.value - 1), this.gridSetMin.value), this.fee), this.fee), 100); // 等比网格（固定利润）=（（最高价/最低价）开（网格数量-1）次方） - 手续费率*2-1\n        } else if (this.setType === 2) {\n          val = nul(cut(cut(Math.pow(division(this.gridSetMax.value, this.gridSetMin.value), 1 / (this.gridSetNum.value - 1)), nul(this.fee, 2)), 1), 100);\n        }\n      }\n\n      if (val === Infinity || val === -Infinity) {\n        val = null;\n      }\n\n      return fixD(val, 2) || '--';\n    },\n    setNumVal: function setNumVal() {\n      return this.gridSetNum.value;\n    },\n    symbolsData: function symbolsData() {\n      if (this.marketData[this.symbolCurrent]) {\n        return this.marketData[this.symbolCurrent];\n      }\n\n      return {\n        name: '--',\n        symbol: {\n          symbol: '--',\n          unit: '--'\n        },\n        close: {\n          class: '',\n          data: 0,\n          price: '--'\n        },\n        amount: '--',\n        rose: {\n          class: '',\n          data: '--'\n        }\n      };\n    }\n  },\n  watch: {\n    // 切换自定义和ai\n    gridType: function gridType() {\n      this.clearGridValue();\n      this.getAiData();\n    },\n    // 切换 限价交易 和 市价交易\n    transactionType: function transactionType(val) {\n      // 2 市价交易\n      this.$bus.$emit('tradeType', false);\n\n      if (val === 2) {\n        this.formData_1.disabled = true;\n        this.formData_1.disabledText = this.$t('trade.mPriceBuy'); // 以市场最优价买入\n\n        this.formData_2.title = this.$t('trade.dealMoney'); // '交易额';\n\n        this.formData_2.units = this.symbolUnit.units;\n        this.formData_3.disabled = true;\n        this.formData_3.disabledText = this.$t('trade.mPriceSell'); // 以市场最优价卖出\n      } else if (val === 1) {\n        this.formData_1.disabled = false;\n        this.formData_1.disabledText = '';\n        this.formData_2.title = this.$t('trade.number'); // '数量';\n\n        this.formData_2.units = this.symbolUnit.symbol;\n        this.formData_3.disabled = false;\n        this.formData_3.disabledText = '';\n      } else if (val === 4) {\n        this.clearGridValue();\n        this.getAiData(); // 改变父组件样式\n\n        this.$bus.$emit('tradeType', 'grid');\n      }\n    },\n    setNumVal: function setNumVal(v) {\n      var _this = this;\n\n      if (v) {\n        this.$nextTick(function () {\n          _this.gridSetNum.value = fixD(v, 0);\n        });\n      }\n    },\n    // 各个输入框的 单位\n    symbolUnit: function symbolUnit(val) {\n      this.formData_1.units = val.units;\n      this.formData_2.units = val.symbol;\n      this.formData_3.units = val.units;\n      this.formData_4.units = val.symbol; // this.formData_5.units = val.symbol;\n      // this.formData_6.units = val.symbol;\n\n      this.gridSetMin.units = val.units;\n      this.gridSetMax.units = val.units;\n      this.gridSetAccount.units = val.units;\n      this.gridSetMaxBalance.units = val.units;\n      this.gridSetMinBalance.units = val.units;\n      this.gridAiAccount.units = val.units;\n      this.gridAiMaxBalance.units = val.units;\n      this.gridAiMinBalance.units = val.units;\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      // 两秒让报错消失\n      this.$bus.$on('errorMsg', function () {\n        var formKey = ['gridAiAccount', 'gridAiMaxBalance', 'gridAiMinBalance', 'gridAiNum', 'gridSetMin', 'gridSetMax', 'gridSetNum', 'gridSetAccount', 'gridSetMaxBalance', 'gridSetMinBalance'];\n        formKey.forEach(function (item) {\n          _this2[item].isError = false;\n        });\n      }); // 监听 当前货币对切换\n\n      this.$bus.$on('SYMBOL_CURRENT', function (val) {\n        _this2.clearValue();\n\n        _this2.clearGridValue();\n\n        _this2.symbolCurrent = val;\n\n        if (!_this2.gridTradeFlag || !_this2.showGridFlag) {\n          _this2.tradeIsSell = 1;\n        }\n\n        if (_this2.gridType === 2) {\n          _this2.getAiData();\n        }\n      });\n\n      if (this.isLogin) {\n        this.$store.dispatch('assetsExchangeData', {\n          auto: false,\n          coinSymbols: this.coinSymbols\n        });\n      } // 监听 市场（最新价格） 数据\n\n\n      this.$bus.$on('MARKET_DATA', function (data) {\n        _this2.marketData = JSON.parse(JSON.stringify(data));\n      }); // 监听 价格点击\n\n      this.$bus.$on('HANDEL_PRICE', function (data) {\n        if (data) {\n          // const obj = {name: 'formData_1', data };\n          var arr = ['formData_1', 'formData_3'];\n          arr.forEach(function (item) {\n            _this2.onChaneForm({\n              name: item,\n              value: data\n            });\n          }); // onChaneForm\n          // this.formData_1.value = data;\n          // this.formData_3.value = data;\n        }\n      });\n    },\n    switchGrid: function switchGrid() {\n      this.clearValue();\n      this.clearGridValue();\n      this.getAiData();\n      this.tradeIsSell = 3;\n    },\n    gradSub: function gradSub(type) {\n      var _this3 = this;\n\n      if (!this.isLogin) {\n        this.$router.push('/login');\n      } else {\n        if (!this.submitGridFormKey(type)) return;\n\n        var _this$submitGridFormK = this.submitGridFormKey(type),\n            formKey = _this$submitGridFormK.formKey,\n            lowestPrice = _this$submitGridFormK.lowestPrice,\n            highestPrice = _this$submitGridFormK.highestPrice,\n            gridNumber = _this$submitGridFormK.gridNumber,\n            totalQuoteAmount = _this$submitGridFormK.totalQuoteAmount,\n            stopHighPrice = _this$submitGridFormK.stopHighPrice,\n            stopLowPrice = _this$submitGridFormK.stopLowPrice,\n            quantType = _this$submitGridFormK.quantType,\n            flag = _this$submitGridFormK.flag,\n            useOwnBase = _this$submitGridFormK.useOwnBase,\n            totalBaseAmount = _this$submitGridFormK.totalBaseAmount,\n            gridLineType = _this$submitGridFormK.gridLineType;\n\n        var fal = true;\n        var lan = this.$store.state.baseData.lan;\n        var lang = lan;\n\n        if (lan !== 'zh_CN') {\n          lang = 'en_US';\n        }\n\n        if (lang === 'en_US') {\n          var arrs = ['gridSetNum', 'gridAiNum', 'gridSetAccount', 'gridAiAccount'];\n          arrs.forEach(function (item) {\n            _this3[item].errorHeight = '-40px';\n          });\n        }\n\n        if (formKey.length) {\n          formKey.forEach(function (item) {\n            var value = _this3[item].value;\n\n            if (!value) {\n              _this3[item].errorText = \"\".concat(_this3.$t('trade.pleaseInput'));\n              _this3[item].isError = true;\n              fal = false;\n            }\n\n            if (parseFloat(value) <= 0) {\n              _this3[item].errorText = \"\".concat(_this3.$t('trade.inputError')); // 输入有误\n\n              _this3[item].isError = true;\n              fal = false;\n            }\n          });\n\n          if (this.fal && fal && flag) {\n            // 单格利润过小，请重新设置ai\n            if (type !== 'gradTrad') {\n              if (this.gridAiMax === '--' || this.gridAiMax <= 0 || this.gridAiMin === '--' || this.gridAiMin <= 0) {\n                fal = false;\n                this.$bus.$emit('tip', {\n                  text: this.$t('gridTrade.error9')\n                });\n                return;\n              }\n            } else if (type === 'gradTrad') {\n              // 单格利润过小，请重新设置自定义\n              if (gridLineType === 1) {\n                // 等差\n                if (this.gridSetMinProfits === '--' || this.gridSetMinProfits <= 0 || this.gridSetMaxProfits === '--' || this.gridSetMaxProfits <= 0) {\n                  this.$bus.$emit('tip', {\n                    text: this.$t('gridTrade.error9')\n                  });\n                  fal = false;\n                  return;\n                }\n              } else if (gridLineType === 2) {\n                // 等比只校验最大\n                if (this.gridSetMaxProfits === '--' || this.gridSetMaxProfits <= 0) {\n                  this.$bus.$emit('tip', {\n                    text: this.$t('gridTrade.error9')\n                  });\n                  fal = false;\n                  return;\n                }\n              }\n            }\n\n            if (Number(stopHighPrice) && Number(stopHighPrice) <= Number(highestPrice)) {\n              // 止盈价格必须高于网格最高价\n              this.$bus.$emit('tip', {\n                text: this.$t('gridTrade.error5')\n              });\n              fal = false;\n            } else if (Number(stopHighPrice) && Number(stopHighPrice) <= Number(this.symbolsData.close.data)) {\n              this.$bus.$emit('tip', {\n                text: this.$t('gridTrade.error7')\n              });\n              fal = false;\n            } else if (Number(stopLowPrice) && Number(stopLowPrice) >= Number(lowestPrice)) {\n              // 止损价格必须低于网格最低价\n              this.$bus.$emit('tip', {\n                text: this.$t('gridTrade.error6')\n              });\n              fal = false;\n            } else if (Number(stopLowPrice) && Number(stopLowPrice) >= Number(this.symbolsData.close.data)) {\n              this.$bus.$emit('tip', {\n                text: this.$t('gridTrade.error8')\n              });\n              fal = false;\n            }\n          }\n\n          if (this.fal && fal && flag) {\n            this.fal = false;\n            var submitData = {\n              symbol: this.symbolCurrent,\n              lowestPrice: lowestPrice,\n              highestPrice: highestPrice,\n              gridNumber: gridNumber,\n              totalQuoteAmount: totalQuoteAmount,\n              stopHighPrice: stopHighPrice,\n              stopLowPrice: stopLowPrice,\n              quantType: quantType,\n              useOwnBase: useOwnBase,\n              totalBaseAmount: totalBaseAmount,\n              gridLineType: gridLineType,\n              // 网格类型 1:等差 2:等比\n              fee: this.fee\n            };\n\n            if (useOwnBase) {\n              submitData.currentPrice = this.symbolsData.close.data;\n\n              if (submitData.currentPrice) {\n                this.gridCancelEvent(submitData);\n              }\n            } else {\n              this.gridSubData(submitData);\n            }\n          }\n        }\n      }\n    },\n    submitGridFormKey: function submitGridFormKey(type) {\n      var formKey = [];\n      var lowestPrice = null;\n      var highestPrice = null;\n      var gridNumber = null;\n      var totalQuoteAmount = null;\n      var stopHighPrice = null;\n      var stopLowPrice = null;\n      var quantType = null;\n      var flag = true;\n      var gridLineType = 1;\n      var useOwnBase = 0;\n\n      if (type === 'gradTrad') {\n        formKey = ['gridSetMin', 'gridSetMax', 'gridSetNum', 'gridSetAccount'];\n        lowestPrice = fixD(this.gridSetMin.value, this.fixValue.priceFix);\n        highestPrice = fixD(this.gridSetMax.value, this.fixValue.priceFix);\n        gridNumber = fixD(this.gridSetNum.value, this.fixValue.volumeFix);\n        totalQuoteAmount = fixD(this.gridSetAccount.value, this.fixValue.priceFix);\n        stopHighPrice = this.gridSetMaxBalance.value ? fixD(this.gridSetMaxBalance.value, this.fixValue.priceFix) : 0;\n        stopLowPrice = this.gridSetMinBalance.value ? fixD(this.gridSetMinBalance.value, this.fixValue.priceFix) : 0;\n        quantType = 1; // 网格\n\n        gridLineType = this.setType;\n        useOwnBase = this.gridSetFormFlag ? 1 : 0; // 判断最高价不能低于最低价的1.02倍。如低于，则提示：价格区间过小，请重新设置\n\n        if (Number(highestPrice) < nul(lowestPrice, 1.02)) {\n          this.$bus.$emit('tip', {\n            text: this.$t('gridTrade.error1')\n          });\n          return false;\n        }\n\n        if (Number(gridNumber) < 2 || Number(gridNumber) > 100) {\n          // 数量区间为：2-100\n          this.$bus.$emit('tip', {\n            text: this.$t('gridTrade.error2')\n          });\n          return false;\n        } // 判断投入资金是否有足够余额，如无，则提示：USDT余额不足\n\n\n        if (Number(totalQuoteAmount) > Number(this.currenTaccount.unitsAccoubt)) {\n          // USDT余额不足\n          this.$bus.$emit('tip', {\n            text: \"\".concat(getCoinShowName(this.symbolUnit.units, this.coinList), \" \").concat(this.$t('gridTrade.error3'))\n          });\n          return false; // 总投入资金/网格数量，不能小于当前币对的最小下单金额\n        }\n\n        if (division(Number(totalQuoteAmount), gridNumber) < Number(this.minimumOrderQuantity)) {\n          // 每格投入资金小于当前币对的最小下单金额\n          this.$bus.$emit('tip', {\n            text: this.$t('gridTrade.error4')\n          });\n          return false;\n        }\n      } else {\n        formKey = ['gridAiAccount'];\n        lowestPrice = this.gridAiMinPrice;\n        highestPrice = this.gridAiMaxPrice;\n        gridNumber = this.gridAiNum.value;\n        totalQuoteAmount = fixD(this.gridAiAccount.value, this.fixValue.priceFix);\n        stopHighPrice = this.gridAiMaxBalance.value ? fixD(this.gridAiMaxBalance.value, this.fixValue.priceFix) : 0;\n        stopLowPrice = this.gridAiMinBalance.value ? fixD(this.gridAiMinBalance.value, this.fixValue.priceFix) : 0;\n        quantType = 1; // 网格\n\n        gridLineType = 1;\n        useOwnBase = this.gridAiFormFlag ? 1 : 0; // 是否使用Base资产 0:不使用 1:使用\n        // 单格利润过小，请重新设置\n        // 判断最高价不能低于最低价的1.02倍。如低于，则提示：价格区间过小，请重新设置\n\n        if (Number(highestPrice) < nul(lowestPrice, 1.02)) {\n          this.$bus.$emit('tip', {\n            text: this.$t('gridTrade.error1')\n          });\n          return false;\n        }\n\n        if (Number(gridNumber) < 2 || Number(gridNumber) > 100) {\n          // 数量区间为：2-100\n          this.$bus.$emit('tip', {\n            text: this.$t('gridTrade.error2')\n          });\n        } // 判断投入资金是否有足够余额，如无，则提示：USDT余额不足\n\n\n        if (Number(totalQuoteAmount) > Number(this.currenTaccount.unitsAccoubt)) {\n          this.$bus.$emit('tip', {\n            text: \"\".concat(getCoinShowName(this.symbolUnit.units, this.coinList), \" \").concat(this.$t('gridTrade.error3'))\n          });\n          return false; // 总投入资金/网格数量，不能小于当前币对的最小下单金额\n        }\n\n        if (division(Number(totalQuoteAmount), gridNumber) < Number(this.minimumOrderQuantity)) {\n          // 每格投入资金小于当前币对的最小下单金额\n          this.$bus.$emit('tip', {\n            text: this.$t('gridTrade.error4')\n          });\n          return false;\n        }\n      }\n\n      return {\n        formKey: formKey,\n        lowestPrice: lowestPrice,\n        highestPrice: highestPrice,\n        gridNumber: gridNumber,\n        totalQuoteAmount: totalQuoteAmount,\n        stopHighPrice: stopHighPrice,\n        stopLowPrice: stopLowPrice,\n        quantType: quantType,\n        flag: flag,\n        useOwnBase: useOwnBase,\n        totalBaseAmount: useOwnBase ? this.currenTaccount.symbolAccoubt : 0,\n        gridLineType: gridLineType\n      };\n    },\n    // 清空 表单数据\n    clearGridValue: function clearGridValue() {\n      var _this4 = this;\n\n      var formKey = ['gridAiAccount', 'gridAiMaxBalance', 'gridAiMinBalance', 'gridAiNum', 'gridSetMin', 'gridSetMax', 'gridSetNum', 'gridSetAccount', 'gridSetMaxBalance', 'gridSetMinBalance'];\n      formKey.forEach(function (item) {\n        _this4[item].value = '';\n        _this4[item].isError = false;\n        _this4[item].subText = null;\n      });\n    },\n    // 请求ai数据\n    getAiData: function getAiData() {\n      var _this5 = this;\n\n      this.axios({\n        url: 'noToken/quant/getAIStrategyInfo',\n        hostType: 'quant',\n        params: {\n          symbol: this.symbolCurrent\n        },\n        method: 'post'\n      }).then(function (data) {\n        if (data.code.toString() === '0') {\n          if (data.data && data.data.configParamMap) {\n            _this5.gridAiMinPrice = fixD(data.data.configParamMap.lowestPrice, _this5.fixValue.priceFix);\n            _this5.gridAiMaxPrice = fixD(data.data.configParamMap.highestPrice, _this5.fixValue.priceFix);\n            _this5.gridAiBlance.disabledText = \"\".concat(_this5.gridAiMinPrice, \" ~ \").concat(_this5.gridAiMaxPrice);\n            _this5.gridAiNum.disabledText = fixD(data.data.configParamMap.gridNumber, 0);\n            _this5.gridAiNum.value = fixD(data.data.configParamMap.gridNumber, 0);\n            _this5.gridAiMin = fixD(data.data.everyProfitMin, 2);\n            _this5.gridAiMax = fixD(data.data.everyProfitMax, 2);\n            _this5.fee = data.data.makerFee; // 最小下单数量\n\n            _this5.minimumOrderQuantity = data.data.minimumOrderQuantity;\n            _this5.sevenDay = fixD(data.data.sevenAnnualizedYield, 2); // 7日年华收益\n          }\n        } else {\n          _this5.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 给服务端传参数和当前行情用于判断是否够每格消耗\n    gridCancelEvent: function gridCancelEvent(params) {\n      var _this6 = this;\n\n      this.axios({\n        url: 'quant/calBaseAmount',\n        hostType: 'quant',\n        method: 'post',\n        params: params\n      }).then(function (req) {\n        if (req.code.toString() === '0' && req.data) {\n          if (Number(req.data.baseAmount) > Number(_this6.currenTaccount.symbolAccoubt)) {\n            _this6.$bus.$emit('tip', {\n              text: \"\".concat(_this6.$t('gridTrade.least')).concat(req.data.baseAmount, \" \").concat(getCoinShowName(_this6.symbolUnit.symbol, _this6.coinList)),\n              type: 'error'\n            });\n\n            _this6.fal = true;\n          } else {\n            var obj = _objectSpread(_objectSpread({}, params), {}, {\n              totalBaseAmount: Number(req.data.baseAmount)\n            });\n\n            _this6.gridSubData(obj);\n          }\n        } else {\n          _this6.$bus.$emit('tip', {\n            text: req.msg,\n            type: 'error'\n          });\n\n          _this6.fal = true;\n        }\n      });\n    },\n    gridSubData: function gridSubData(params) {\n      var _this7 = this;\n\n      this.axios({\n        url: 'quant/saveStrategy',\n        hostType: 'quant',\n        params: params,\n        method: 'post'\n      }).then(function (data) {\n        if (data.code.toString() === '0') {\n          // 清空表单\n          _this7.clearGridValue(); // 重新请求资产\n\n\n          _this7.$store.dispatch('assetsExchangeData', {\n            auto: false,\n            coinSymbols: _this7.coinSymbols\n          });\n\n          _this7.getAiData(); // 发送下单成功的事件\n\n\n          _this7.$bus.$emit('ORDER_CREATE', {\n            type: 'success'\n          }); // 提示成功 下单成功\n\n\n          _this7.$bus.$emit('tip', {\n            text: _this7.$t('trade.dealCussess'),\n            type: 'success'\n          });\n\n          _this7.fal = true;\n        } else {\n          _this7.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n\n          _this7.fal = true;\n        }\n      }).catch(function () {\n        _this7.fal = true;\n      });\n    }\n  },\n  // 组价离开前执行\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.assetsInter);\n  }\n};",null]}