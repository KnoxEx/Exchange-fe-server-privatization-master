{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/vuex/future/future.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/vuex/future/future.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n// Created by 侯东东.\n//  云合约\nimport axios from '@/api/http/axios';\nimport { setCoMarket, myStorage, getDigit } from '@/utils';\nvar timer = null;\n\nvar setCoTypeSymbol = function setCoTypeSymbol(data) {\n  if (data) {\n    var arr = data.split('-');\n    return \"\".concat(arr[0], \"_\").concat(arr[1]).concat(arr[2]);\n  }\n\n  return null;\n};\n\nvar isIframe = false;\n/* eslint-disable */\n\nif (self !== top) {\n  isIframe = true;\n}\n\nexport default {\n  state: {\n    // 是否在iframe中\n    isIframe: isIframe,\n    // 合约列表\n    contractList: null,\n    // 合约列表 MAP\n    contractListMap: {},\n    // 合约币对列表\n    contractSymbolList: [],\n    // 存储当前合约信息\n    contractInfo: null,\n    // 前台公共实时信息\n    publicMarkertInfo: {},\n    // 存储当前合约名称\n    contractName: myStorage.get('contractName'),\n    // 存储当前合约币对\n    contractSymbol: null,\n    // 存储当前合约ID\n    contractId: myStorage.get('contractId'),\n    // 用户配置信息\n    futureUserConfig: null,\n    // 是否开通合约\n    openContract: true,\n    // 是否被冻结\n    transStatus: 0,\n    // 当前合约币对 小写带类型\n    coTypeSymbol: setCoTypeSymbol(myStorage.get('contractName')),\n    // 合约价格单位\n    priceUnit: '',\n    // 合约单位(标的货币||张)\n    coUnit: '',\n    // 合约单位类型 1标的货币, 2张 未登录默认是1\n    coUnitType: myStorage.get('coUnitType') || 2,\n    // 合约面值\n    multiplier: '',\n    // 服务器当前时间和本地时间的差\n    serveTimeDiff: 0,\n    // WS URL\n    wsUrl: null,\n    // 数量精度\n    volfix: 0,\n    // 价格精度\n    pricefix: 4,\n    // 保证金币种的精度\n    coinfix: 4,\n    // 合约资产\n    futureAccountBalance: {},\n    // 合约类型文案\n    contractTypeText: {\n      E: '永续',\n      W: '周',\n      N: '次周',\n      M: '月',\n      Q: '季度',\n      H: '混合'\n    },\n    // 合约保证金信息列表\n    marginCoinInfor: null,\n    // 持仓列表\n    positionList: null,\n    // 持仓列表\n    positionListNumber: null,\n    // 币种列表\n    marginCoinList: [],\n    // 可平数量列表 {BUY: 可凭多  SELL：可凭空}\n    activeCanClose: [],\n    // 当前委托列表\n    currentOrderLis: [],\n    // 当前普通单委托数量\n    orderCount: 0,\n    // 当前条件单委托数量\n    triggerOrderCount: 0\n  },\n  mutations: {\n    // 存储WS地址\n    WS_URL: function WS_URL(state, data) {\n      state.wsUrl = data;\n    },\n    // 存储合约列表\n    CO_PUBLIC_INFO: function CO_PUBLIC_INFO(state, data) {\n      state.contractList = data;\n    },\n    // 全部合约币对列表（发送WS send ）\n    CONTRACT_SYMBOL_LIST: function CONTRACT_SYMBOL_LIST(state, data) {\n      state.contractSymbolList = data;\n    },\n    //\n    SET_COUNIT_TYPE: function SET_COUNIT_TYPE(state, data) {\n      state.coUnitType = data;\n    },\n    SET_COUNIT_TEXT: function SET_COUNIT_TEXT(state, data) {\n      state.coUnit = data;\n    },\n    // 存储当前合约信息\n    ACTIVE_CONTRACT_DATA: function ACTIVE_CONTRACT_DATA(state, data) {\n      state.contractInfo = data; // 合约面值\n\n      state.multiplier = data.multiplier; // 数量精度 (合约面值后面的小数点的位数)\n\n      state.volfix = getDigit(data.multiplier); // 合约币对价格精度\n\n      state.pricefix = data.coinResultVo.symbolPricePrecision; // 保证金币种的精度\n\n      state.coinfix = data.coinResultVo.marginCoinPrecision; // 配置合约数量默认单位\n\n      if (!state.futureUserConfig) {\n        if (state.coUnitType === 1) {\n          state.coUnit = data.multiplierCoin;\n        } else {// state.coUnit = '张';\n        }\n      }\n\n      state.priceUnit = data.quote;\n    },\n    // 存储当前合约名称\n    CONTRACT_NAME: function CONTRACT_NAME(state, data) {\n      state.contractName = data;\n    },\n    // 存储当前合约币对\n    CONTRACT_SYMBOL: function CONTRACT_SYMBOL(state, data) {\n      state.contractSymbol = data;\n    },\n    // 存储当前合约ID\n    CONTRACT_ID: function CONTRACT_ID(state, data) {\n      state.contractId = data;\n    },\n    CONTRACT_TYPE_SYMBOL: function CONTRACT_TYPE_SYMBOL(state, data) {\n      state.coTypeSymbol = data;\n    },\n    // 存储用户配置信息\n    GET_USER_CONFIG: function GET_USER_CONFIG(state, data) {\n      // 是否开通了合约\n      state.openContract = !!data.openContract; // 是否被冻结\n\n      state.transStatus = data.transStatus; // 合约单位\n\n      state.coUnitType = data.coUnit;\n      myStorage.set('coUnitType', data.coUnit);\n\n      if (data.coUnit === 1) {\n        state.coUnit = data.multiplierCoin;\n      } else {// state.coUnit = '张';\n      } // 用户配置信息\n\n\n      state.futureUserConfig = data;\n    },\n    // 服务器当前时间和本地时间的差\n    SERVE_TIME_DIFF: function SERVE_TIME_DIFF(state, data) {\n      // 用户配置信息\n      state.serveTimeDiff = data;\n    },\n    // 前台公共实时信息\n    PUBLIC_MARKER_INFO: function PUBLIC_MARKER_INFO(state, data) {\n      state.publicMarkertInfo = data;\n    },\n    // 资产详情信息\n    ACCOUNT_BALANCE: function ACCOUNT_BALANCE(state, data) {\n      state.futureAccountBalance = data;\n    },\n    // 抽取 保证金币种信息列表\n    MARGIN_COIN_INFOR: function MARGIN_COIN_INFOR(state, data) {\n      state.marginCoinInfor = data;\n    },\n    POSITION_LIST: function POSITION_LIST(state, data) {\n      state.positionList = data;\n      state.positionListNumber = data ? data.length : 0;\n    },\n    // 币种列表\n    SYMBOL_LOST: function SYMBOL_LOST(state, data) {\n      state.marginCoinList = data;\n    },\n    // 可平数量列表\n    ACTIVE_CAN_CLOSE: function ACTIVE_CAN_CLOSE(state, data) {\n      state.activeCanClose = data;\n    },\n    // 合约列表信息 MAP\n    CONTRACT_LIST_MAP: function CONTRACT_LIST_MAP(state, data) {\n      state.contractListMap = data;\n    },\n    // 当前合约订单列表\n    CURRENT_OTDER_LIST: function CURRENT_OTDER_LIST(state, data) {\n      state.currentOrderLis = data;\n    },\n    // 当前普通单委托数量\n    ORDER_COUNT: function ORDER_COUNT(state, data) {\n      state.orderCount = data;\n    },\n    // 当前条件单委托数量\n    TRIGGER_ORDER_COUNT: function TRIGGER_ORDER_COUNT(state, data) {\n      state.triggerOrderCount = data;\n    }\n  },\n  actions: {\n    // 获取合约列表数据\n    getFutorePublicInfo: function getFutorePublicInfo(_ref) {\n      var commit = _ref.commit,\n          dispatch = _ref.dispatch;\n      axios({\n        url: this.state.url.futures.publicInfo,\n        method: 'post',\n        hostType: 'co'\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          var _rs$data = rs.data,\n              contractList = _rs$data.contractList,\n              marginCoinList = _rs$data.marginCoinList;\n          setCoMarket(contractList);\n          commit('WS_URL', rs.data.wsUrl); // 设置时间差\n\n          if (rs.data.currentTimeMillis) {\n            var now = new Date().getTime();\n            commit('SERVE_TIME_DIFF', rs.data.currentTimeMillis - now);\n          }\n\n          var contractListArr = [];\n\n          if (contractList && contractList.length) {\n            var symbolList = [];\n            var marginCoinInfor = {};\n            var contractListMap = {};\n            contractList.forEach(function (item) {\n              var dataItem = item;\n              var contractName = dataItem.contractName; // 发送WS send 的时候使用的币对名\n\n              var symbolArr = contractName.toLowerCase().split('-');\n              var symbol = \"\".concat(symbolArr[0], \"_\").concat(symbolArr[1]).concat(symbolArr[2]);\n              symbolList.push(symbol); // wsDatakey 接收WS 数据时 使用的Key\n\n              dataItem.wsDatakey = symbol;\n              contractListArr.push(dataItem);\n              contractListMap[contractName] = dataItem || {}; // 保证金币种精度\n\n              var _dataItem$coinResultV = dataItem.coinResultVo,\n                  marginCoinPrecision = _dataItem$coinResultV.marginCoinPrecision,\n                  symbolPricePrecision = _dataItem$coinResultV.symbolPricePrecision;\n              contractListMap[contractName].mCionFix = marginCoinPrecision; // 价格精度\n\n              contractListMap[contractName].priceFix = symbolPricePrecision; // 数量精度（标的货币时使用， 合约面值小数点后面的位数）\n\n              contractListMap[contractName].volfix = getDigit(dataItem.multiplier); // 抽取保证金币种信息\n\n              marginCoinInfor[dataItem.marginCoin] = {\n                // 保证金币种\n                marginCoin: dataItem.marginCoin,\n                // 保证金币种精度\n                marginCoinPrecision: dataItem.coinResultVo.marginCoinPrecision,\n                // 限制转入\n                fundsInStatus: dataItem.coinResultVo.fundsInStatus,\n                // 限制转出\n                fundsOutStatus: dataItem.coinResultVo.fundsOutStatus\n              };\n            }); // 全部合约列表\n\n            commit('CO_PUBLIC_INFO', contractListArr); // 全部合约币对列表（发送WS send ）\n\n            commit('CONTRACT_SYMBOL_LIST', symbolList); // 保存 保证金信息列表\n\n            commit('MARGIN_COIN_INFOR', marginCoinInfor); // 设置当前合约信息\n\n            dispatch('setActivePublicInfo'); // 币种列表\n\n            commit('SYMBOL_LOST', marginCoinList); // 合约列表信息 MAP\n\n            commit('CONTRACT_LIST_MAP', contractListMap);\n          }\n        }\n      });\n    },\n    // 存储当前合约信息\n    setActivePublicInfo: function setActivePublicInfo(_ref2) {\n      var commit = _ref2.commit,\n          state = _ref2.state,\n          dispatch = _ref2.dispatch;\n      var contractName = myStorage.get('contractName');\n      var contractList = state.contractList;\n      commit('CONTRACT_NAME', contractName);\n      contractList.forEach(function (item) {\n        if (contractName === item.contractName) {\n          // 当前合约ID\n          commit('CONTRACT_ID', item.id); // 当前合约币对大写 不带类型\n\n          commit('CONTRACT_SYMBOL', item.symbol.replace('-', '')); // 当前合约币对 小写加类型（WS的时候需要用到）\n\n          var coTypeSymbol = \"\".concat(item.contractType, \"_\").concat(item.symbol.replace('-', ''));\n          commit('CONTRACT_TYPE_SYMBOL', coTypeSymbol.toLowerCase()); // 当前合约信息\n\n          commit('ACTIVE_CONTRACT_DATA', item);\n          dispatch('getPublicMarkertInfo');\n        }\n      });\n    },\n    // 获取用户配置信息\n    getUserConfig: function getUserConfig(_ref3) {\n      var _this = this;\n\n      var commit = _ref3.commit,\n          state = _ref3.state;\n\n      if (!state.contractId) {\n        clearInterval(timer);\n        timer = setInterval(function () {\n          if (state.contractId) {\n            clearInterval(timer);\n            axios({\n              url: _this.state.url.futures.getUserConfig,\n              method: 'post',\n              hostType: 'co',\n              params: {\n                contractId: state.contractId\n              }\n            }).then(function (rs) {\n              if (rs.code === '0') {\n                commit('GET_USER_CONFIG', rs.data);\n              }\n            });\n          }\n        }, 500);\n      } else {\n        axios({\n          url: this.state.url.futures.getUserConfig,\n          method: 'post',\n          hostType: 'co',\n          params: {\n            contractId: state.contractId\n          }\n        }).then(function (rs) {\n          if (rs.code === '0') {\n            commit('GET_USER_CONFIG', rs.data);\n          }\n        });\n      }\n    },\n    // 获取前台公共实时信息\n    getPublicMarkertInfo: function getPublicMarkertInfo(_ref4) {\n      var commit = _ref4.commit,\n          state = _ref4.state;\n\n      if (state.contractId) {\n        axios({\n          url: this.state.url.futures.publicMarkertInfo,\n          method: 'post',\n          hostType: 'co',\n          params: {\n            contractId: state.contractId\n          }\n        }).then(function (rs) {\n          if (rs.code === '0') {\n            commit('PUBLIC_MARKER_INFO', rs.data);\n          }\n        });\n      }\n    },\n    // 请求合约资产\n    getAccountBalance: function getAccountBalance(_ref5) {\n      var commit = _ref5.commit,\n          state = _ref5.state;\n\n      if (state.contractInfo) {\n        axios({\n          url: this.state.url.futures.accountBalance,\n          method: 'post',\n          hostType: 'co',\n          params: {\n            marginCoin: state.contractInfo.marginCoin\n          }\n        }).then(function (rs) {\n          if (rs.code === '0') {\n            commit('ACCOUNT_BALANCE', rs.data.accounts[0]);\n          }\n        });\n      }\n    },\n    // 获取持仓列表+资产\n    getPositionList: function getPositionList(_ref6) {\n      var commit = _ref6.commit;\n      axios({\n        url: this.state.url.futures.getAssetsList,\n        method: 'post',\n        hostType: 'co',\n        params: {}\n      }).then(function (rs) {\n        if (rs.code === '0' && rs.data) {\n          var _rs$data2 = rs.data,\n              positionList = _rs$data2.positionList,\n              accountList = _rs$data2.accountList; // 资产列表\n\n          if (accountList && accountList.length) {\n            var data = {};\n            accountList.forEach(function (item) {\n              data[item.symbol] = item;\n            });\n            commit('ACCOUNT_BALANCE', data);\n          } else {\n            commit('ACCOUNT_BALANCE', null);\n          } // 持仓列表\n\n\n          commit('POSITION_LIST', positionList);\n\n          if (positionList && positionList.length) {\n            // 可平数量\n            var activeCanClose = {};\n            positionList.forEach(function (item) {\n              if (activeCanClose[item.contractName]) {\n                activeCanClose[item.contractName][item.orderSide] = item.canCloseVolume;\n              } else {\n                activeCanClose[item.contractName] = _defineProperty({}, item.orderSide, item.canCloseVolume);\n              }\n            }); // 可平数量\n\n            commit('ACTIVE_CAN_CLOSE', activeCanClose);\n          }\n        }\n      });\n    },\n    // 领取赠金\n    getReceiveCoupon: function getReceiveCoupon(_ref7) {\n      var dispatch = _ref7.dispatch;\n      axios({\n        url: this.state.url.futures.receiveCoupon,\n        method: 'post',\n        hostType: 'co',\n        params: {}\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          dispatch('getUserConfig');\n        }\n      });\n    },\n    // 获取用户委托计数\n    getUserOrderCount: function getUserOrderCount(_ref8) {\n      var commit = _ref8.commit,\n          state = _ref8.state;\n      axios({\n        url: this.state.url.futures.getUserOrderCount,\n        method: 'post',\n        hostType: 'co',\n        params: {\n          contractId: state.contractId\n        }\n      }).then(function (rs) {\n        if (rs.code === '0') {\n          commit('ORDER_COUNT', rs.data.orderCount);\n          commit('TRIGGER_ORDER_COUNT', rs.data.triggerOrderCount);\n        }\n      });\n    }\n  }\n};",null]}