{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/components/transfer/transfer.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/components/transfer/transfer.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport { fixD, fixInput } from '@/utils';\nexport default {\n  name: 'forced-reminder',\n  data: function data() {\n    return {\n      // 是否可以提交\n      dialogConfirmLoading: false,\n      // 是否禁止提交\n      // 当前币种\n      axiosSymbol: '',\n      // 划转方向  true 币币-合约  false 合约-币币\n      // direction: true,\n      transferSide: '1',\n      // 划转数量\n      // value: '',\n      transferValue: '',\n      // 当前币种数据\n      detailsData: {},\n      // 币币可转\n      exchangeAmount: null,\n      // 合约可转\n      contractAmount: null // 币种列表\n      // symbolList: [],\n\n    };\n  },\n  props: {\n    isShow: {\n      default: false,\n      type: Boolean\n    },\n    finish: {\n      default: false,\n      type: Boolean\n    },\n    close: {\n      default: function _default() {},\n      type: Function\n    },\n    symbol: {\n      default: '',\n      type: String\n    }\n  },\n  computed: {\n    // 币种信息\n    marginCoinInfor: function marginCoinInfor() {\n      if (this.$store.state.future.marginCoinInfor) {\n        return this.$store.state.future.marginCoinInfor;\n      }\n\n      return {};\n    },\n    // 保证金币种列表\n    marginCoinList: function marginCoinList() {\n      if (this.$store.state.future.marginCoinList) {\n        return this.$store.state.future.marginCoinList;\n      }\n\n      return [];\n    },\n    symbolList: function symbolList() {\n      if (this.marginCoinList.length !== 0) {\n        var arr = [];\n        this.marginCoinList.forEach(function (item) {\n          arr.push({\n            value: item,\n            code: item\n          });\n        }); // this.symbol = arr[0].code;\n\n        return arr;\n      }\n\n      return [];\n    },\n    // 用户合约资产\n    accountBalanceMap: function accountBalanceMap() {\n      if (this.$store.state.future.futureAccountBalance) {\n        return this.$store.state.future.futureAccountBalance;\n      }\n\n      return {};\n    },\n    // 币币资产\n    exchangeData: function exchangeData() {\n      if (this.$store.state.assets.exchangeData) {\n        return this.$store.state.assets.exchangeData;\n      }\n\n      return null;\n    },\n    // 币种精度\n    showPrecision: function showPrecision() {\n      if (this.marginCoinInfor && this.axiosSymbol) {\n        return this.marginCoinInfor[this.axiosSymbol].marginCoinPrecision;\n      }\n\n      return 4;\n    },\n    // 限制转入\n    fundsInStatus: function fundsInStatus() {\n      if (this.marginCoinInfor && this.axiosSymbol) {\n        return this.marginCoinInfor[this.axiosSymbol].fundsInStatus;\n      }\n\n      return false;\n    },\n    // 限制转出\n    fundsOutStatus: function fundsOutStatus() {\n      if (this.marginCoinInfor && this.axiosSymbol) {\n        return this.marginCoinInfor[this.axiosSymbol].fundsOutStatus;\n      }\n\n      return false;\n    },\n    // 弹窗是否可点击\n    dialogConfirmDisabled: function dialogConfirmDisabled() {\n      if (this.dialogConfirmLoading) {\n        return false;\n      }\n\n      var flag = true;\n\n      if (parseFloat(this.transferValue) > 0 && !this.transferError) {\n        flag = false;\n      }\n\n      if (this.marginCoinInfor && this.axiosSymbol) {\n        if (this.transferSide === '1') {\n          if (this.axiosSymbol && !this.fundsInStatus) {\n            flag = true;\n          }\n        } else if (this.transferSide === '2') {\n          if (this.axiosSymbol && !this.fundsOutStatus) {\n            flag = true;\n          }\n        }\n      }\n\n      return flag;\n    },\n    // 错误提示\n    transferError: function transferError() {\n      var flag = false; // 限制最大数量\\\n\n      if (this.transferSide === '1') {\n        if (parseFloat(this.transferValue) > parseFloat(this.exchangeAmount)) {\n          flag = true;\n        }\n      } else if (this.transferSide === '2') {\n        if (parseFloat(this.transferValue) > parseFloat(this.contractAmount)) {\n          flag = true;\n        }\n      }\n\n      return flag;\n    },\n    // 划转input框可用文案\n    transferWarningText: function transferWarningText() {\n      var text = this.$t('futures.transfer.canTransfer'); // 可转\n\n      var num = null;\n\n      if (this.marginCoinInfor && this.axiosSymbol) {\n        text = this.$t('futures.transfer.canTransfer'); // 可转\n\n        num = this.transferSide === '1' ? fixD(this.exchangeAmount, this.showPrecision) : fixD(this.contractAmount, this.showPrecision);\n        return \"\".concat(text, \" \").concat(num, \" \").concat(this.axiosSymbol);\n      }\n\n      return \"\".concat(text, \" \").concat(num, \" \").concat(this.axiosSymbol);\n    },\n    // 限制划转\n    confirmText: function confirmText() {\n      var text = this.$t('futures.transfer.confirm'); // 确定\n\n      if (this.marginCoinInfor && this.axiosSymbol) {\n        if (this.transferSide === '1' && this.axiosSymbol && !this.fundsInStatus) {\n          text = this.$t('futures.transfer.cantIn'); // 限制转入\n        }\n\n        if (this.transferSide === '2' && this.axiosSymbol && !this.fundsOutStatus) {\n          text = this.$t('futures.transfer.cantOut'); // 限制转出\n        }\n      }\n\n      return text;\n    },\n    // 方向\n    side: function side() {\n      var ex = this.$t('futures.transfer.exchangeAccount');\n      var co = this.$t('futures.transfer.coAccount');\n      var from = '';\n      var to = '';\n\n      if (this.transferSide === '1') {\n        from = ex;\n        to = co;\n      } else {\n        from = co;\n        to = ex;\n      }\n\n      return {\n        from: from,\n        to: to\n      };\n    }\n  },\n  watch: {\n    isShow: function isShow(v) {\n      if (v) {\n        this.axiosSymbol = this.symbol;\n        this.getData();\n      }\n    },\n    // 币币余额\n    exchangeData: function exchangeData(v) {\n      if (v && this.axiosSymbol) {\n        if (v.allCoinMap[this.axiosSymbol] !== undefined) {\n          var balance = v.allCoinMap[this.axiosSymbol].normal_balance;\n          this.exchangeAmount = fixD(balance, this.showPrecision);\n        } else {\n          this.exchangeAmount = fixD(0, this.showPrecision);\n        }\n      }\n    },\n    // 合约余额\n    accountBalanceMap: function accountBalanceMap(v) {\n      if (v && this.axiosSymbol) {\n        this.contractAmount = v[this.axiosSymbol].canUseAmount;\n      }\n    },\n    // 切换币种\n    symbol: function symbol(v) {\n      if (v && this.isShow) {\n        this.getData();\n      }\n    },\n    transferValue: function transferValue(v) {\n      if (v && this.showPrecision) {\n        this.transferValue = fixInput(v, this.showPrecision);\n      }\n    }\n  },\n  methods: {\n    init: function init() {},\n    getData: function getData() {\n      // 请求合约余额\n      this.$store.dispatch('getPositionList'); // 请求币币余额\n\n      this.$store.dispatch('assetsExchangeData'); // 重置\n\n      this.transferValue = '';\n    },\n    symbolChange: function symbolChange(item) {\n      this.axiosSymbol = item.code;\n      this.getData();\n    },\n    inputLineChange: function inputLineChange(value, name) {\n      this[name] = value;\n    },\n    dialogConfirm: function dialogConfirm() {\n      this.dialogConfirmLoading = true; // const { contractAccountType, walletAccountType } = this.detailsData;\n      // if (this.transferSide === '1') {\n      //   this.toContract();\n      // } else {\n      //   this.toExchange();\n      // }\n      // /contract/co_transfer\n\n      this.toCoTransfer();\n    },\n    // 通用\n    toCoTransfer: function toCoTransfer() {\n      var _this = this;\n\n      this.axios({\n        url: 'contract/co_transfer',\n        hostType: 'ex',\n        params: {\n          // wallet_to_contract:币币划转至合约  contract_to_wallet:合约划转至币币\n          transferType: this.transferSide === '1' ? 'wallet_to_contract' : 'contract_to_wallet',\n          amount: Number(this.transferValue),\n          coinSymbol: this.axiosSymbol\n        },\n        method: 'post'\n      }).then(function (data) {\n        _this.dialogConfirmLoading = false;\n\n        if (data.code.toString() === '0') {\n          _this.close(true);\n\n          _this.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'success'\n          });\n        } else {\n          _this.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 从合约划转到币币\n    toExchange: function toExchange() {\n      var _this2 = this;\n\n      this.axios({\n        url: 'assets/saas_trans/co_to_ex',\n        hostType: 'co',\n        params: {\n          amount: Number(this.transferValue),\n          coinSymbol: this.axiosSymbol\n        },\n        method: 'post'\n      }).then(function (data) {\n        _this2.dialogConfirmLoading = false;\n\n        if (data.code.toString() === '0') {\n          _this2.close(true);\n\n          _this2.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'success'\n          });\n        } else {\n          _this2.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 从币币到合约\n    toContract: function toContract() {\n      var _this3 = this;\n\n      this.axios({\n        url: 'web/futures_transfer',\n        hostType: 'ex',\n        params: {\n          amount: Number(this.transferValue),\n          coinSymbol: this.axiosSymbol\n        },\n        method: 'post'\n      }).then(function (data) {\n        _this3.dialogConfirmLoading = false;\n\n        if (data.code.toString() === '0') {\n          _this3.close(true);\n\n          _this3.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'success'\n          });\n        } else {\n          _this3.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    // 修改划转方向\n    setTransferSide: function setTransferSide() {\n      if (this.transferSide === '1') {\n        this.transferSide = '2';\n      } else if (this.transferSide === '2') {\n        this.transferSide = '1';\n      }\n\n      this.transferValue = ''; // 重置划转数量\n    },\n    //  全部划转\n    allTransfer: function allTransfer() {\n      if (this.transferSide === '1') {\n        if (this.exchangeAmount === null) {\n          return;\n        }\n\n        this.transferValue = this.exchangeAmount.toString();\n      } else if (this.transferSide === '2') {\n        if (!this.contractAmount) {\n          return;\n        }\n\n        this.transferValue = this.contractAmount.toString();\n      }\n    }\n  }\n};",null]}