{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/select/Select.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/select/Select.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { directive as clickOutside } from 'v-click-outside-x';\nexport default {\n  name: 'c-select',\n  directives: {\n    clickOutside: clickOutside\n  },\n  props: {\n    // li的展现形式\n    type: {\n      default: 'info',\n      // info为单行li  double为双行li\n      type: String\n    },\n    // 初始化默认 选中的值 String：直接显示，Number： 选项索引值\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    options: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    // Title\n    promptText: {\n      type: String,\n      default: ''\n    },\n    // 设置边框样式. 默认线性样式\n    box: {\n      type: Boolean,\n      default: false\n    },\n    // 下拉框显示多少条，默认显示5条 多出显示滚动条\n    optionNumber: {\n      type: Number,\n      default: 5\n    },\n    // 选项列表 行高 默认40px\n    optionHeight: {\n      type: Number,\n      default: 40\n    },\n    // 下拉框右侧展开 ICON 默认 三角形icon\n    appendIcon: {\n      type: String,\n      default: 'icon-triangle-down'\n    },\n    // 是否开启搜索功能\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    // 是否关闭\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 错误提示语\n    errorText: {\n      type: String,\n      default: ''\n    },\n    // 将 下拉框设置成错误状态\n    errorFlag: {\n      type: Boolean,\n      default: false\n    },\n    // 占位符\n    placehoder: {\n      type: String,\n      default: ''\n    },\n    // 无数据 提示语\n    notFoundText: {\n      type: String,\n      default: '无匹配数据'\n    },\n    // 是否开启 清空选项的功能\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    // 清空选项按钮的Icon, icon的class\n    clearableIcon: {\n      type: String,\n      default: 'icon-clear'\n    },\n    // 下拉框的宽度 （字符串 后面加单位 px %）\n    width: {\n      type: [String],\n      default: ''\n    },\n    // 下拉框的高度\n    height: {\n      type: [String],\n      default: ''\n    },\n    // 样式\n    styles: {\n      type: [Object, String],\n      default: ''\n    },\n    elementId: {\n      type: String,\n      default: ''\n    },\n    // 是否需要验证\n    errorHave: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      // 存储选中的值 和 默认选中的值\n      values: '',\n      // 控制下拉框是都可见\n      visible: false,\n      // 选项列表是否有数据\n      isNotOption: false,\n      // 检索关键字\n      query: '',\n      // isFocused\n      isFocused: false,\n      // 是否设置成错误状态\n      isError: false,\n      overInx: null,\n      // 获取焦点开关TAG建\n      focusFlang: false\n    };\n  },\n  mounted: function mounted() {\n    if (this.value && this.options.length) {\n      this.values = this.getInitialValue(this.value);\n    }\n  },\n  computed: {\n    selectOption: function selectOption() {\n      var _this = this;\n\n      if (!this.options.length) return [];\n\n      if (!this.options[0].code && this.options[0].code !== 0) {\n        // console.error('options数据格式错误', this.options);\n        return [];\n      }\n\n      if (!this.query) return this.options;\n      return this.options.filter(function (item) {\n        if (item.value.toUpperCase().indexOf(_this.query.toUpperCase()) !== -1) {\n          return item;\n        }\n\n        return false;\n      });\n    },\n    classes: function classes() {\n      return ['common-select', {\n        'select-visible': this.visible,\n        'select-disabled': this.disabled,\n        'select-value': this.values,\n        'select-filterable': this.filterable,\n        'select-error': this.isError\n      }];\n    },\n    stylees: function stylees() {\n      var styles = this.styles || {};\n      if (this.width) styles.width = this.width;\n      if (this.height) styles.width = this.height;\n      return styles;\n    },\n    optionStyle: function optionStyle() {\n      var styles = {\n        height: \"\".concat(parseFloat(this.optionHeight), \"px\"),\n        'line-height': \"\".concat(parseFloat(this.optionHeight), \"px\")\n      };\n      return styles;\n    },\n    setBoxHeight: function setBoxHeight() {\n      if (this.selectOption.length <= this.optionNumber) {\n        return false;\n      }\n\n      if (this.type === 'double') {\n        return {\n          height: \"\".concat(this.optionNumber * 50, \"px\")\n        };\n      }\n\n      return {\n        height: \"\".concat(this.optionNumber * this.optionHeight, \"px\")\n      };\n    }\n  },\n  watch: {\n    value: function value(_value) {\n      if (!_value) this.values = '';else if (this.value) {\n        this.values = this.getInitialValue(_value);\n      }\n    },\n    visible: function visible(value) {\n      var _this2 = this;\n\n      if (!value && this.filterable && this.options.length) {\n        this.options.forEach(function (item) {\n          if (item.code === _this2.value) {\n            _this2.values = item.value;\n            _this2.query = '';\n          }\n        });\n      }\n\n      this.$emit('opent-chang', value, this.name);\n    },\n    errorFlag: function errorFlag(value) {\n      this.isError = value;\n    }\n  },\n  methods: {\n    mouseOver: function mouseOver(inx) {\n      this.overInx = inx;\n    },\n    mouseOut: function mouseOut() {\n      this.overInx = null;\n    },\n    // 下拉框 显示&隐藏\n    toggleMenu: function toggleMenu() {\n      if (!this.focusFlang) {\n        this.visible = !this.visible;\n      } else {\n        this.focusFlang = false;\n      }\n    },\n    // 点击 select 以外 隐藏下拉框\n    onClickOutside: function onClickOutside() {\n      this.focusFlang = false;\n      this.visible = false;\n    },\n    // 点击 选项\n    onOptionClick: function onOptionClick(item) {\n      this.query = '';\n      this.visible = false;\n      this.isError = false;\n      this.$emit('onChanges', item, this.name);\n    },\n    goUrl: function goUrl(item) {\n      this.visible = false;\n      this.$emit('onChanges', item, this.name);\n    },\n    // 搜索框 输入事件\n    filterableChange: function filterableChange(event) {\n      this.query = event.target.value;\n      if (this.query.length) this.visible = true;\n    },\n    inputFoucus: function inputFoucus() {\n      this.isFocused = true;\n\n      if (this.filterable) {\n        this.focusFlang = true;\n        this.visible = true;\n        this.query = '';\n        this.values = '';\n      }\n    },\n    // 设置 显示的Value;\n    getInitialValue: function getInitialValue(value) {\n      // 如果是 true  表示 value  是搜索是输入的值\n      var text;\n\n      if (this.isFocused && this.filterable) {\n        text = value;\n      } else if (this.options.length) {\n        this.options.forEach(function (item) {\n          if (item.code === value) {\n            text = item.value;\n          }\n        });\n      }\n\n      return text;\n    },\n    // 清除选项\n    resetOptionData: function resetOptionData() {\n      this.values = '';\n      this.query = '';\n      this.$emit('onClear', true, this.name);\n    }\n  }\n};",null]}