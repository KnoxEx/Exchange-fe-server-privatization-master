{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/calculateVolume.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/calculateVolume.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport { fixD, division, cut, nul } from '@/utils';\nexport default {\n  name: 'tradeFormCalculateVolume',\n  computed: {\n    // 用户信息配置-可持有仓位上限\n    leverOriginCeiling: function leverOriginCeiling() {\n      if (this.userConfig) {\n        return this.userConfig.leverOriginCeiling;\n      }\n\n      return null;\n    },\n    // 当前合约最大可开额度\n    setMaxNumber: function setMaxNumber() {\n      var num = 0;\n\n      if (this.leverOriginCeiling) {\n        var keyArr = Object.keys(this.leverOriginCeiling);\n        keyArr.sort(function (a, b) {\n          return parseFloat(a) - parseFloat(b);\n        });\n        var nextL = 0;\n\n        for (var index = 0; index < keyArr.length; index += 1) {\n          if (Number(this.nowLevel) > nextL && Number(this.nowLevel) <= keyArr[index]) {\n            num = this.leverOriginCeiling[keyArr[index]];\n          }\n\n          nextL = keyArr[index];\n        } // 标的货币\n\n\n        return num;\n      }\n\n      return num;\n    },\n    // 持仓列表\n    positionList: function positionList() {\n      return this.$store.state.future.positionList || [];\n    },\n    // 普通委托列表\n    currentOrderLis: function currentOrderLis() {\n      return this.$store.state.future.currentOrderLis || [];\n    },\n    // 获取当前合约同方向持仓仓位价值\n    positionMaxBalance: function positionMaxBalance() {\n      var _this = this;\n\n      var value = {\n        buy: 0,\n        sell: 0\n      };\n\n      if (this.positionList.length) {\n        this.positionList.forEach(function (item) {\n          if (_this.contractId === item.contractId) {\n            // if (item.orderSide === 'BUY') {\n            value.buy += item.positionBalance; // } else {\n\n            value.sell += item.positionBalance; // }\n          }\n        });\n      }\n\n      return value;\n    },\n    // 当前合约同方向未成交委托价值\n    orderMaxBalance: function orderMaxBalance() {\n      var _this2 = this;\n\n      var value = {\n        buy: 0,\n        sell: 0\n      };\n\n      if (this.currentOrderLis.length) {\n        this.currentOrderLis.forEach(function (item) {\n          if (_this2.contractId === item.contractId && item.open === 'OPEN') {\n            // if (item.side === 'BUY') {\n            value.buy += item.orderBalance; // } else {\n\n            value.sell += item.orderBalance; // }\n          }\n        });\n      }\n\n      return value;\n    },\n    // 计算\n    // 当前合约最大可开额度-当前合约同方向持仓仓位价值-当前合约同方向未成交委托价值\n    V1Buy: function V1Buy() {\n      return cut(cut(this.setMaxNumber, this.positionMaxBalance.buy), this.orderMaxBalance.buy);\n    },\n    V1Sell: function V1Sell() {\n      return cut(cut(this.setMaxNumber, this.positionMaxBalance.sell), this.orderMaxBalance.sell);\n    },\n    // 价格取值规则：\n    // 委托价格为限价：用户设置的限价价格\n    // 委托价格为市价：取最新价格，买一价, 卖一价 三者间的中位数\n    priceVal: function priceVal() {\n      // 市价\n      if (this.currentCategory === 2 || this.isMarket) {\n        return this.activeNewPrice;\n      } // 限价\n\n\n      return this.inputPrice;\n    },\n    // 最大可买\n    maxBuyNumber: function maxBuyNumber() {\n      //  正向 & 张数\n      if (!this.canUseAmount || !this.V1Buy || !this.priceVal || this.V1Buy.toString() === 'NaN') {\n        return 0;\n      }\n\n      if (this.contractSide === 1 && this.coUnitType === 2) {\n        // V1Buy * 保证金汇率 / (最新价格 * 合约面值)\n        return division(nul(this.V1Buy, this.marginRate), nul(this.priceVal, this.multiplier));\n      } // 反向 & 张数\n\n\n      if (this.contractSide === 0 && this.coUnitType === 2) {\n        // V1Buy * 价格 / 面值\n        return division(nul(this.V1Buy, this.priceVal), this.multiplier);\n      } // 正向 & 量\n\n\n      if (this.contractSide === 1 && this.coUnitType === 1) {\n        // V1Buy * 保证金汇率 / 价格\n        return division(nul(this.V1Buy, this.marginRate), this.priceVal);\n      } // 反向 & 量\n\n\n      if (this.contractSide === 0 && this.coUnitType === 1) {\n        // V1Buy * 价格\n        return nul(this.V1Buy, this.priceVal);\n      }\n\n      return 0;\n    },\n    // 最大可卖\n    maxSellNumber: function maxSellNumber() {\n      if (!this.canUseAmount || !this.V1Sell || !this.priceVal || this.V1Sell.toString() === 'NaN') {\n        return 0;\n      } //  正向 & 张数\n\n\n      if (this.contractSide === 1 && this.coUnitType === 2) {\n        // V1Sell * 保证金汇率 / (最新价格 * 合约面值)\n        return division(nul(this.V1Sell, this.marginRate), nul(this.priceVal, this.multiplier));\n      } // 反向 & 张数\n\n\n      if (this.contractSide === 0 && this.coUnitType === 2) {\n        // V1Sell * 价格 / 面值\n        return division(nul(this.V1Sell, this.priceVal), this.multiplier);\n      } // 正向 & 量\n\n\n      if (this.contractSide === 1 && this.coUnitType === 1) {\n        // V1Sell * 保证金汇率 / 价格\n        return division(nul(this.V1Sell, this.marginRate), this.priceVal);\n      } // 反向 & 量\n\n\n      if (this.contractSide === 0 && this.coUnitType === 1) {\n        // V1Sell  价格\n        return nul(this.V1Sell, this.priceVal);\n      }\n\n      return 0;\n    },\n    // 根据可用余额计算的最大可开\n    // 正向：最大可开 = （可用余额 *杠杆/汇率）/(价格*合约面值)\n    // 反向：最大可开 = 可用余额 *杠杆*价格/合约面值\n    // 根据可用余额计算的最大可开（量）：\n    // 正向：最大可开 = （可用余额 *杠杆/汇率）/价格\n    // 反向：最大可开 = 可用余额 *杠杆*价格\n    // 价格取值规则：\n    // 委托价格为限价：用户设置的限价价格\n    // 委托价格为市价：取最新价格，买一价, 卖一价 三者间的中位数\n    calculateMaxNumber: function calculateMaxNumber() {\n      if (!this.canUseAmount || !this.priceVal) return 0; // 正向\n\n      if (this.contractSide === 1) {\n        // 可用余额 * 杠杆 / 汇率\n        var V1 = division(nul(this.canUseAmount, this.nowLevel), this.marginRate); // 张\n\n        if (this.coUnitType === 2) {\n          // 价格 * 合约面值\n          var v2 = nul(this.priceVal, this.multiplier);\n          return division(V1, v2);\n        } // 量 （可用余额 *杠杆/汇率）/价格\n\n\n        return division(V1, this.priceVal);\n      } // 反向\n      // 量\n      // 可用余额 * 杠杆* 价格\n\n\n      var V3 = nul(nul(this.canUseAmount, this.nowLevel), this.priceVal);\n\n      if (this.coUnitType === 1) {\n        return V3;\n      }\n\n      return division(V3, this.multiplier);\n    },\n    // 买入可平数量\n    maxCloseBuy: function maxCloseBuy() {\n      var number = 0;\n      var canClose = 0;\n\n      if (this.activeCanClose && this.activeCanClose.BUY) {\n        canClose = this.activeCanClose.BUY;\n      } // 张\n\n\n      if (this.coUnitType === 2) {\n        number = canClose;\n      } else {\n        // 量\n        number = nul(canClose, this.multiplier);\n      }\n\n      return number < 0 ? 0 : number;\n    },\n    // 卖出可平数量\n    maxCloseSell: function maxCloseSell() {\n      var number = 0;\n      var canClose = 0;\n\n      if (this.activeCanClose && this.activeCanClose.SELL) {\n        canClose = this.activeCanClose.SELL;\n      } // 张\n\n\n      if (this.coUnitType === 2) {\n        number = canClose;\n      } else {\n        // 量\n        number = nul(canClose, this.multiplier);\n      }\n\n      return number < 0 ? 0 : number;\n    },\n    // 可买 || 可平\n    maxCanBuyNumber: function maxCanBuyNumber() {\n      // 平仓 || 只减仓\n      if (this.transactionType === 2 || this.zhiJianCang) {\n        return fixD(this.maxCloseSell, this.volfix);\n      }\n\n      var number = this.calculateMaxNumber < this.maxBuyNumber ? this.calculateMaxNumber : this.maxBuyNumber;\n      if (number < 0) return 0;\n      return fixD(number, this.volfix);\n    },\n    // 可卖 || 可平\n    maxCanSellNumber: function maxCanSellNumber() {\n      // 平仓 || 只减仓\n      if (this.transactionType === 2 || this.zhiJianCang) {\n        return fixD(this.maxCloseBuy, this.volfix);\n      }\n\n      var number = this.calculateMaxNumber < this.maxSellNumber ? this.calculateMaxNumber : this.maxSellNumber;\n      if (number < 0) return 0;\n      return fixD(number, this.volfix);\n    },\n    // 买入成本\n    canBuyCostNumber: function canBuyCostNumber() {\n      if (this.isLogin) {\n        return fixD(this.calculateCostNumber('BUY'), this.marginCoinFix);\n      }\n\n      return 0;\n    },\n    // 卖出成本\n    canSellCostNumber: function canSellCostNumber() {\n      if (this.isLogin) {\n        return fixD(this.calculateCostNumber('SELL'), this.marginCoinFix);\n      }\n\n      return 0;\n    } // // 计算公式参数\n    // calculateParameter() {\n    //   // 可用 杠杆 输入的限价 触发价格 保证金汇率 合约面值 可平数量\n    //   // 数量单位类型1标的货币, 2张 订单类型(限价、市价)  是否条件单市价\n    //   // 是否只减仓 合约方向（1正向、0反向）  双向持仓中的1开仓2平仓 当前合约平均价格 张数或者市价的开仓价值\n    //   return {\n    //     canUseAmount: this.canUseAmount, // 可用\n    //     nowLevel: this.nowLevel, // 当前合约杠杆\n    //     price: this.inputPrice, // 输入的限价\n    //     triggerPrice: this.triggerPrice, // 条件单的触发价\n    //     marginRate: this.marginRate, // 保证金汇率\n    //     multiplier: this.multiplier, // 合约面值\n    //     activeCanClose: this.activeCanClose, // 可平数量(对象，可凭多、可凭空)\n    //     coUnitType: this.coUnitType, // 数量单位类型1标的货币, 2张\n    //     currentCategory: this.currentCategory, // 订单类型(限价、2市价)\n    //     isMarket: this.isMarket, // 是否条件单市价\n    //     zhiJianCang: this.zhiJianCang, // 是否只减仓\n    //     contractSide: this.contractSide, // 合约方向（1正向、0反向）\n    //     transactionType: this.transactionType, // 双向持仓中的 1开仓 2 平仓\n    //     activeNewPrice: this.activeNewPrice, // 当前合约平均价格\n    //     volume: this.inputVolume, // 张数或者市价的开仓价值\n    //   };\n    // },\n    // // 可买 、可平多 数量\n    // canBuyNumber() {\n    //   if (this.isLogin && this.canUseAmount) {\n    //     return fixD(calculateVolume('BUY', this.calculateParameter), this.volfix);\n    //   }\n    //   return 0;\n    // },\n    // // 可卖、可平空 数量\n    // canSellNumber() {\n    //   if (this.isLogin && Number(this.canUseAmount)) {\n    //     return fixD(calculateVolume('SELL', this.calculateParameter), this.volfix);\n    //   }\n    //   return 0;\n    // },\n\n  },\n  methods: {\n    calculateCostNumber: function calculateCostNumber(type) {\n      var volume = this.inputVolume;\n\n      if (this.percentageVlaue) {\n        volume = this.countPercentageVlaue(type);\n      }\n\n      var number = 0; // 平仓 || 只减仓 （仓位价值）\n\n      if (this.transactionType === 2 || this.zhiJianCang) return 0; // 限价单 or 条件限价单 （数量）\n\n      if (this.currentCategory === 1 || this.currentCategory === 3 && !this.isMarket) {\n        if (!this.inputPrice) return 0; // 反向 = 张数 * 面值 / 限价 / 杠杆 * 保证金汇率\n\n        number = nul(division(division(nul(volume, this.multiplier), this.inputPrice), this.nowLevel), this.marginRate); // 正向 | 张数 * 面值 * 限价 / 杠杆 * 保证金汇率\n\n        if (this.contractSide === 1) {\n          number = nul(division(nul(nul(volume, this.multiplier), this.inputPrice), this.nowLevel), this.marginRate);\n        }\n\n        return number;\n      } // 市价单 or 添加市价单\n\n\n      if (this.currentCategory === 2 || this.currentCategory === 3 && this.isMarket) {\n        // 反向 | 正向 = 开仓价值 / 杠杆 8 保证金汇率\n        number = nul(division(volume, this.nowLevel), this.marginRate);\n        return number;\n      }\n\n      return number;\n    }\n  }\n};",{"version":3,"sources":["/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/calculateVolume.js"],"names":["fixD","division","cut","nul","name","computed","leverOriginCeiling","userConfig","setMaxNumber","num","keyArr","Object","keys","sort","a","b","parseFloat","nextL","index","length","Number","nowLevel","positionList","$store","state","future","currentOrderLis","positionMaxBalance","value","buy","sell","forEach","item","contractId","positionBalance","orderMaxBalance","open","orderBalance","V1Buy","V1Sell","priceVal","currentCategory","isMarket","activeNewPrice","inputPrice","maxBuyNumber","canUseAmount","toString","contractSide","coUnitType","marginRate","multiplier","maxSellNumber","calculateMaxNumber","V1","v2","V3","maxCloseBuy","number","canClose","activeCanClose","BUY","maxCloseSell","SELL","maxCanBuyNumber","transactionType","zhiJianCang","volfix","maxCanSellNumber","canBuyCostNumber","isLogin","calculateCostNumber","marginCoinFix","canSellCostNumber","methods","type","volume","inputVolume","percentageVlaue","countPercentageVlaue"],"mappings":"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","sourcesContent":["import {\r\n  fixD, division, cut, nul,\r\n} from '@/utils';\r\n\r\nexport default {\r\n  name: 'tradeFormCalculateVolume',\r\n\r\n  computed: {\r\n    // 用户信息配置-可持有仓位上限\r\n    leverOriginCeiling() {\r\n      if (this.userConfig) {\r\n        return this.userConfig.leverOriginCeiling;\r\n      }\r\n      return null;\r\n    },\r\n    // 当前合约最大可开额度\r\n    setMaxNumber() {\r\n      let num = 0;\r\n      if (this.leverOriginCeiling) {\r\n        const keyArr = Object.keys(this.leverOriginCeiling);\r\n        keyArr.sort((a, b) => parseFloat(a) - parseFloat(b));\r\n        let nextL = 0;\r\n        for (let index = 0; index < keyArr.length; index += 1) {\r\n          if (Number(this.nowLevel) > nextL && Number(this.nowLevel) <= keyArr[index]) {\r\n            num = this.leverOriginCeiling[keyArr[index]];\r\n          }\r\n          nextL = keyArr[index];\r\n        }\r\n        // 标的货币\r\n        return num;\r\n      }\r\n      return num;\r\n    },\r\n    // 持仓列表\r\n    positionList() {\r\n      return this.$store.state.future.positionList || [];\r\n    },\r\n    // 普通委托列表\r\n    currentOrderLis() {\r\n      return this.$store.state.future.currentOrderLis || [];\r\n    },\r\n    // 获取当前合约同方向持仓仓位价值\r\n    positionMaxBalance() {\r\n      const value = {\r\n        buy: 0,\r\n        sell: 0,\r\n      };\r\n      if (this.positionList.length) {\r\n        this.positionList.forEach((item) => {\r\n          if (this.contractId === item.contractId) {\r\n            // if (item.orderSide === 'BUY') {\r\n            value.buy += item.positionBalance;\r\n            // } else {\r\n            value.sell += item.positionBalance;\r\n            // }\r\n          }\r\n        });\r\n      }\r\n      return value;\r\n    },\r\n    // 当前合约同方向未成交委托价值\r\n    orderMaxBalance() {\r\n      const value = {\r\n        buy: 0,\r\n        sell: 0,\r\n      };\r\n      if (this.currentOrderLis.length) {\r\n        this.currentOrderLis.forEach((item) => {\r\n          if (this.contractId === item.contractId && item.open === 'OPEN') {\r\n            // if (item.side === 'BUY') {\r\n            value.buy += item.orderBalance;\r\n            // } else {\r\n            value.sell += item.orderBalance;\r\n            // }\r\n          }\r\n        });\r\n      }\r\n      return value;\r\n    },\r\n    // 计算\r\n    // 当前合约最大可开额度-当前合约同方向持仓仓位价值-当前合约同方向未成交委托价值\r\n    V1Buy() {\r\n      return cut(cut(this.setMaxNumber, this.positionMaxBalance.buy), this.orderMaxBalance.buy);\r\n    },\r\n    V1Sell() {\r\n      return cut(cut(this.setMaxNumber, this.positionMaxBalance.sell), this.orderMaxBalance.sell);\r\n    },\r\n    // 价格取值规则：\r\n    // 委托价格为限价：用户设置的限价价格\r\n    // 委托价格为市价：取最新价格，买一价, 卖一价 三者间的中位数\r\n    priceVal() {\r\n      // 市价\r\n      if (this.currentCategory === 2 || this.isMarket) {\r\n        return this.activeNewPrice;\r\n      }\r\n      // 限价\r\n      return this.inputPrice;\r\n    },\r\n    // 最大可买\r\n    maxBuyNumber() {\r\n      //  正向 & 张数\r\n      if (!this.canUseAmount\r\n        || !this.V1Buy\r\n        || !this.priceVal\r\n        || this.V1Buy.toString() === 'NaN') {\r\n        return 0;\r\n      }\r\n      if (this.contractSide === 1 && this.coUnitType === 2) {\r\n        // V1Buy * 保证金汇率 / (最新价格 * 合约面值)\r\n        return division(nul(this.V1Buy, this.marginRate), nul(this.priceVal, this.multiplier));\r\n      }\r\n      // 反向 & 张数\r\n      if (this.contractSide === 0 && this.coUnitType === 2) {\r\n        // V1Buy * 价格 / 面值\r\n        return division(nul(this.V1Buy, this.priceVal), this.multiplier);\r\n      }\r\n      // 正向 & 量\r\n      if (this.contractSide === 1 && this.coUnitType === 1) {\r\n        // V1Buy * 保证金汇率 / 价格\r\n        return division(nul(this.V1Buy, this.marginRate), this.priceVal);\r\n      }\r\n      // 反向 & 量\r\n      if (this.contractSide === 0 && this.coUnitType === 1) {\r\n        // V1Buy * 价格\r\n        return nul(this.V1Buy, this.priceVal);\r\n      }\r\n      return 0;\r\n    },\r\n    // 最大可卖\r\n    maxSellNumber() {\r\n      if (!this.canUseAmount\r\n        || !this.V1Sell\r\n        || !this.priceVal\r\n        || this.V1Sell.toString() === 'NaN') {\r\n        return 0;\r\n      }\r\n      //  正向 & 张数\r\n      if (this.contractSide === 1 && this.coUnitType === 2) {\r\n        // V1Sell * 保证金汇率 / (最新价格 * 合约面值)\r\n        return division(nul(this.V1Sell, this.marginRate), nul(this.priceVal, this.multiplier));\r\n      }\r\n      // 反向 & 张数\r\n      if (this.contractSide === 0 && this.coUnitType === 2) {\r\n        // V1Sell * 价格 / 面值\r\n        return division(nul(this.V1Sell, this.priceVal), this.multiplier);\r\n      }\r\n      // 正向 & 量\r\n      if (this.contractSide === 1 && this.coUnitType === 1) {\r\n        // V1Sell * 保证金汇率 / 价格\r\n        return division(nul(this.V1Sell, this.marginRate), this.priceVal);\r\n      }\r\n      // 反向 & 量\r\n      if (this.contractSide === 0 && this.coUnitType === 1) {\r\n        // V1Sell  价格\r\n        return nul(this.V1Sell, this.priceVal);\r\n      }\r\n      return 0;\r\n    },\r\n\r\n    // 根据可用余额计算的最大可开\r\n    // 正向：最大可开 = （可用余额 *杠杆/汇率）/(价格*合约面值)\r\n    // 反向：最大可开 = 可用余额 *杠杆*价格/合约面值\r\n    // 根据可用余额计算的最大可开（量）：\r\n    // 正向：最大可开 = （可用余额 *杠杆/汇率）/价格\r\n    // 反向：最大可开 = 可用余额 *杠杆*价格\r\n    // 价格取值规则：\r\n    // 委托价格为限价：用户设置的限价价格\r\n    // 委托价格为市价：取最新价格，买一价, 卖一价 三者间的中位数\r\n    calculateMaxNumber() {\r\n      if (!this.canUseAmount || !this.priceVal) return 0;\r\n      // 正向\r\n      if (this.contractSide === 1) {\r\n        // 可用余额 * 杠杆 / 汇率\r\n        const V1 = division(nul(this.canUseAmount, this.nowLevel), this.marginRate);\r\n        // 张\r\n        if (this.coUnitType === 2) {\r\n          // 价格 * 合约面值\r\n          const v2 = nul(this.priceVal, this.multiplier);\r\n          return division(V1, v2);\r\n        }\r\n        // 量 （可用余额 *杠杆/汇率）/价格\r\n        return division(V1, this.priceVal);\r\n      }\r\n      // 反向\r\n      // 量\r\n      // 可用余额 * 杠杆* 价格\r\n      const V3 = nul(nul(this.canUseAmount, this.nowLevel), this.priceVal);\r\n      if (this.coUnitType === 1) {\r\n        return V3;\r\n      }\r\n      return division(V3, this.multiplier);\r\n    },\r\n\r\n    // 买入可平数量\r\n    maxCloseBuy() {\r\n      let number = 0;\r\n      let canClose = 0;\r\n      if (this.activeCanClose && this.activeCanClose.BUY) {\r\n        canClose = this.activeCanClose.BUY;\r\n      }\r\n      // 张\r\n      if (this.coUnitType === 2) {\r\n        number = canClose;\r\n      } else {\r\n        // 量\r\n        number = nul(canClose, this.multiplier);\r\n      }\r\n      return number < 0 ? 0 : number;\r\n    },\r\n    // 卖出可平数量\r\n    maxCloseSell() {\r\n      let number = 0;\r\n      let canClose = 0;\r\n      if (this.activeCanClose && this.activeCanClose.SELL) {\r\n        canClose = this.activeCanClose.SELL;\r\n      }\r\n      // 张\r\n      if (this.coUnitType === 2) {\r\n        number = canClose;\r\n      } else {\r\n        // 量\r\n        number = nul(canClose, this.multiplier);\r\n      }\r\n      return number < 0 ? 0 : number;\r\n    },\r\n\r\n    // 可买 || 可平\r\n    maxCanBuyNumber() {\r\n      // 平仓 || 只减仓\r\n      if (this.transactionType === 2 || this.zhiJianCang) {\r\n        return fixD(this.maxCloseSell, this.volfix);\r\n      }\r\n      const number = this.calculateMaxNumber < this.maxBuyNumber\r\n        ? this.calculateMaxNumber : this.maxBuyNumber;\r\n      if (number < 0) return 0;\r\n      return fixD(number, this.volfix);\r\n    },\r\n    // 可卖 || 可平\r\n    maxCanSellNumber() {\r\n      // 平仓 || 只减仓\r\n      if (this.transactionType === 2 || this.zhiJianCang) {\r\n        return fixD(this.maxCloseBuy, this.volfix);\r\n      }\r\n      const number = this.calculateMaxNumber < this.maxSellNumber\r\n        ? this.calculateMaxNumber : this.maxSellNumber;\r\n      if (number < 0) return 0;\r\n      return fixD(number, this.volfix);\r\n    },\r\n\r\n    // 买入成本\r\n    canBuyCostNumber() {\r\n      if (this.isLogin) {\r\n        return fixD(this.calculateCostNumber('BUY'), this.marginCoinFix);\r\n      }\r\n      return 0;\r\n    },\r\n    // 卖出成本\r\n    canSellCostNumber() {\r\n      if (this.isLogin) {\r\n        return fixD(this.calculateCostNumber('SELL'), this.marginCoinFix);\r\n      }\r\n      return 0;\r\n    },\r\n\r\n    // // 计算公式参数\r\n    // calculateParameter() {\r\n    //   // 可用 杠杆 输入的限价 触发价格 保证金汇率 合约面值 可平数量\r\n    //   // 数量单位类型1标的货币, 2张 订单类型(限价、市价)  是否条件单市价\r\n    //   // 是否只减仓 合约方向（1正向、0反向）  双向持仓中的1开仓2平仓 当前合约平均价格 张数或者市价的开仓价值\r\n    //   return {\r\n    //     canUseAmount: this.canUseAmount, // 可用\r\n    //     nowLevel: this.nowLevel, // 当前合约杠杆\r\n    //     price: this.inputPrice, // 输入的限价\r\n    //     triggerPrice: this.triggerPrice, // 条件单的触发价\r\n    //     marginRate: this.marginRate, // 保证金汇率\r\n    //     multiplier: this.multiplier, // 合约面值\r\n    //     activeCanClose: this.activeCanClose, // 可平数量(对象，可凭多、可凭空)\r\n    //     coUnitType: this.coUnitType, // 数量单位类型1标的货币, 2张\r\n    //     currentCategory: this.currentCategory, // 订单类型(限价、2市价)\r\n    //     isMarket: this.isMarket, // 是否条件单市价\r\n    //     zhiJianCang: this.zhiJianCang, // 是否只减仓\r\n    //     contractSide: this.contractSide, // 合约方向（1正向、0反向）\r\n    //     transactionType: this.transactionType, // 双向持仓中的 1开仓 2 平仓\r\n    //     activeNewPrice: this.activeNewPrice, // 当前合约平均价格\r\n    //     volume: this.inputVolume, // 张数或者市价的开仓价值\r\n    //   };\r\n    // },\r\n\r\n    // // 可买 、可平多 数量\r\n    // canBuyNumber() {\r\n    //   if (this.isLogin && this.canUseAmount) {\r\n    //     return fixD(calculateVolume('BUY', this.calculateParameter), this.volfix);\r\n    //   }\r\n    //   return 0;\r\n    // },\r\n\r\n    // // 可卖、可平空 数量\r\n    // canSellNumber() {\r\n    //   if (this.isLogin && Number(this.canUseAmount)) {\r\n    //     return fixD(calculateVolume('SELL', this.calculateParameter), this.volfix);\r\n    //   }\r\n    //   return 0;\r\n    // },\r\n\r\n  },\r\n  methods: {\r\n    calculateCostNumber(type) {\r\n      let volume = this.inputVolume;\r\n      if (this.percentageVlaue) {\r\n        volume = this.countPercentageVlaue(type);\r\n      }\r\n      let number = 0;\r\n      // 平仓 || 只减仓 （仓位价值）\r\n      if (this.transactionType === 2 || this.zhiJianCang) return 0;\r\n      // 限价单 or 条件限价单 （数量）\r\n      if (this.currentCategory === 1 || (this.currentCategory === 3 && !this.isMarket)) {\r\n        if (!this.inputPrice) return 0;\r\n        // 反向 = 张数 * 面值 / 限价 / 杠杆 * 保证金汇率\r\n        number = nul(\r\n          division(\r\n            division(nul(volume, this.multiplier), this.inputPrice),\r\n            this.nowLevel,\r\n          ), this.marginRate,\r\n        );\r\n        // 正向 | 张数 * 面值 * 限价 / 杠杆 * 保证金汇率\r\n        if (this.contractSide === 1) {\r\n          number = nul(\r\n            division(\r\n              nul(\r\n                nul(volume, this.multiplier), this.inputPrice,\r\n              ),\r\n              this.nowLevel,\r\n            ),\r\n            this.marginRate,\r\n          );\r\n        }\r\n        return number;\r\n      }\r\n      // 市价单 or 添加市价单\r\n      if (this.currentCategory === 2 || (this.currentCategory === 3 && this.isMarket)) {\r\n        // 反向 | 正向 = 开仓价值 / 杠杆 8 保证金汇率\r\n        number = nul(division(volume, this.nowLevel), this.marginRate);\r\n        return number;\r\n      }\r\n      return number;\r\n    },\r\n  },\r\n\r\n};\r\n"]}]}