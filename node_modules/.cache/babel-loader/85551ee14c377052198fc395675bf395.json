{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/trade/index/mixin.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/modules/trade/index/mixin.js","mtime":1642346792029},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// mapState\nimport { mapState } from 'vuex';\nimport _worker from '@/utils/webWorker'; // 24小时行情\n\nimport { fixD, myStorage, imgMap, colorMap, setCookie, getCookie } from '@/utils';\nexport default {\n  name: 'trade',\n  data: function data() {\n    return {\n      markTitleClass: 'markTitle',\n      symbolNameClass: 'sSymbolName',\n      imgMap: imgMap,\n      colorMap: colorMap,\n      routerPathClass: 'trade',\n      // 是否是收起状态\n      shrink: false,\n      // 24小时行情 是否是收起状态\n      marketShrink: false,\n      // 窗口宽度\n      screenWidth: null,\n      // 延迟执行\n      windowOnResizeFire: true,\n      // 宽度分割\n      mediaWidth: 1820,\n      // shuju\n      marketData: null,\n      // MywebSocket\n      MywebSocket: null,\n      // 当前市场\n      marketCurrent: null,\n      // 当前币对\n      symbolCurrent: null,\n      // 当前币对列表\n      symbolCurrentList: [],\n      // 深度级别\n      depthClasses: '0',\n      // 深度值\n      depthValue: null,\n      // 图表遮罩\n      coverKlineBox: null,\n      routeSymbol: this.$route.params.symbol,\n      isFull: null,\n      tradeLimitData: null,\n      tradeAlertState: false,\n      etfDialog: false,\n      etfUrl: '',\n      etfName: '',\n      etfTimer: null,\n      etfPrice: '--',\n      lTime: null,\n      lastTimeS: myStorage.get('lastTimeS')\n    };\n  },\n  computed: _objectSpread(_objectSpread({\n    fundRate: function fundRate() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var str = '';\n\n      if (publicInfo && publicInfo.fundRate) {\n        str = publicInfo.fundRate;\n      }\n\n      return str;\n    },\n    // market 接口\n    market: function market() {\n      return this.$store.state.baseData.market;\n    }\n  }, mapState({\n    baseInfo: function baseInfo(_ref) {\n      var baseData = _ref.baseData;\n      this.marketData = baseData.market; // 获取当前市场\n\n      this.marketCurrent = myStorage.get(this.markTitleClass); // 获取当前币对\n\n      this.symbolCurrent = myStorage.get(this.symbolNameClass);\n      return baseData;\n    },\n    hasTradeLimitOpen: function hasTradeLimitOpen(_ref2) {\n      var baseData = _ref2.baseData;\n      return baseData.has_trade_limit_open;\n    }\n  })), {}, {\n    // 全部币种列表\n    coinList: function coinList() {\n      if (this.$store.state.baseData && this.$store.state.baseData.market) {\n        return this.$store.state.baseData.market.coinList;\n      }\n\n      return {};\n    },\n    symbolAll: function symbolAll() {\n      return this.$store.state.baseData.symbolAll;\n    },\n    trade_board_is_fold: function trade_board_is_fold() {\n      return this.$store.state.baseData.trade_board_is_fold;\n    },\n    // 当前币对精度计算的值\n    fixValue: function fixValue() {\n      if (this.symbolAll && this.symbolCurrent) {\n        var symbol = this.symbolAll[this.symbolCurrent];\n        return {\n          priceFix: symbol.price,\n          volumeFix: symbol.volume\n        };\n      }\n\n      return {\n        priceFix: 2,\n        volumeFix: 8\n      };\n    },\n    tradeLimitAlertText: function tradeLimitAlertText() {\n      var text = '';\n\n      if (this.tradeLimitData) {\n        var symbol = this.$route.params.symbol.split('_')[0];\n        var _this$tradeLimitData = this.tradeLimitData,\n            tradeLimtBuyInfo = _this$tradeLimitData.trade_limit_buy_info,\n            tradeLimitSellInfo = _this$tradeLimitData.trade_limit_sell_info,\n            tradeSymbolSellLimit = _this$tradeLimitData.trade_symbol_sell_limit,\n            tradeSymbolBuyLimit = _this$tradeLimitData.trade_symbol_buy_limit; // 该币对限制每日交易数量\n\n        text = \"\".concat(this.$t('tradeLimt.tradeLimit_text_everyDayCount')); // 单日最大买入量为：\n\n        var txt1 = \"\".concat(this.$t('tradeLimt.tradeLimit_text_everyDayBuy') + fixD(tradeSymbolBuyLimit, this.fixValue.volumeFix) + symbol + this.$t('tradeLimt.tradeLimit_text_everyDayBuy_end'), \"\\uFF0C\"); // 单日最大卖出量为：\n\n        var txt2 = \"\".concat(this.$t('tradeLimt.tradeLimit_text_everyDaySell') + fixD(tradeSymbolSellLimit, this.fixValue.volumeFix) + symbol + this.$t('tradeLimt.tradeLimit_text_everyDaySell_end')); // 未限制买入交易\n\n        var txt3 = this.$t('tradeLimt.tradeLimit_text_noLimitBuy'); // 未限制卖出交易\n\n        var txt4 = this.$t('tradeLimt.tradeLimit_text_noLimitSell');\n        text += tradeLimtBuyInfo ? txt1 : txt3;\n        text += tradeLimitSellInfo ? txt2 : txt4;\n      }\n\n      return text;\n    },\n    templateLayoutType: function templateLayoutType() {\n      return this.$store.state.baseData.templateLayoutType;\n    },\n    worker: function worker() {\n      return _worker();\n    },\n    // 是否Login\n    isLogin: function isLogin() {\n      return this.$store.state.baseData.isLogin;\n    },\n    // Market 数据\n    marketList: function marketList() {\n      return this.marketData ? this.marketData.market : null;\n    },\n    // 当前币对列表\n    symbolList: function symbolList() {\n      var _this = this;\n\n      // 如果 当前市场 是 自选市场\n      if (this.marketCurrent === 'myMarket') {\n        var mySymbol = myStorage.get('mySymbol') || [];\n        var marketList = {};\n\n        if (mySymbol.length) {\n          mySymbol.forEach(function (item) {\n            if (item && _this.symbolAll[item]) {\n              marketList[item] = _this.symbolAll[item];\n            }\n          });\n        }\n\n        return marketList;\n      }\n\n      if (this.marketList && this.marketCurrent) {\n        return this.marketList[this.marketCurrent];\n      }\n\n      return null;\n    },\n    // 汇率单位\n    rateData: function rateData() {\n      return this.$store.state.baseData.rate;\n    },\n    // 设置 收缩版本 还是展开版\n    leftClasses: function leftClasses() {\n      return this.marketShrink ? 'left-shrinks' : 'left-expand';\n    },\n    currentSymbolCase: function currentSymbolCase() {\n      if (this.symbolCurrent) {\n        var symbolArr = this.symbolCurrent.toLowerCase().split('/');\n        return symbolArr[0] + symbolArr[1];\n      }\n\n      return null;\n    },\n    copySymbolCurrent: function copySymbolCurrent() {\n      return this.symbolCurrent;\n    }\n  }),\n  watch: {\n    market: {\n      immediate: true,\n      handler: function handler(v) {\n        if (v) {\n          this.init();\n          this.initEtfDialog();\n        }\n      }\n    },\n    copySymbolCurrent: {\n      immediate: true,\n      handler: function handler(v) {\n        if (v) {\n          this.initEtfDialog();\n        }\n      }\n    },\n    trade_board_is_fold: {\n      handler: function handler() {\n        var _this2 = this;\n\n        if (this.trade_board_is_fold) {\n          setTimeout(function () {\n            if (_this2.screenWidth <= _this2.mediaWidth) {\n              _this2.$bus.$emit('extend');\n            }\n          }, 0);\n        }\n      },\n      immediate: true\n    },\n    hasTradeLimitOpen: function hasTradeLimitOpen(val) {\n      if (val && this.currentSymbolCase) {\n        this.getTradeLimitInfo(this.currentSymbolCase);\n      }\n    },\n    // 监听 获取到数据\n    marketData: function marketData(val) {\n      if (val.wsUrl) {\n        // 创建WS\n        this.worker.postMessage({\n          type: 'CREAT_WEBSOCKET',\n          data: {\n            wsUrl: val.wsUrl,\n            lan: this.$store.state.baseData.lan,\n            rate: this.rateData,\n            symbolAll: this.$store.state.baseData.symbolAll\n          }\n        });\n      }\n    },\n    // 监听 当前市场的切换\n    marketCurrent: function marketCurrent(val, oldVla) {\n      if (oldVla) {\n        // 存储 上一次选中的市场\n        this.oldMarket = oldVla;\n      } else {\n        this.oldMarket = val;\n      }\n    },\n    // 监听 当前选中货币对的改变\n    symbolCurrent: function symbolCurrent(val, oldVla) {\n      var _this3 = this;\n\n      if (val && this.symbolAll) {\n        this.getJz(); // const sSymbolShowName = this.symbolAll[val].showName || val;\n\n        var sSymbolShowName = this.symbolAll[val] ? this.symbolAll[val].showName : val;\n        var sSymbol = sSymbolShowName.replace('/', '_');\n\n        if (this.symbolAll[val] && this.symbolAll[val].etfOpen) {\n          myStorage.set(this.markTitleClass, 'ETF');\n        }\n\n        this.$router.push(\"/\".concat(this.routerPathClass, \"/\").concat(sSymbol));\n        this.$bus.$emit('SYMBOL_CURRENT', val);\n      }\n\n      if (this.hasTradeLimitOpen) {\n        var symbol = val.replace('/', '').toLocaleLowerCase();\n        this.getTradeLimitInfo(symbol);\n      }\n\n      if (oldVla && this.MywebSocket) {\n        if (this.oldMarket !== val.split('/')[1]) {\n          // 如果 切换了市场 又切换了币对 就 停止 上一个币对的 24小时行情 send\n          this.webSocketSend('Market', 'unsub', val, _defineProperty({}, oldVla, this.symbolAll[oldVla]));\n        } // 停止 上一个币对的 实时成交 send\n\n\n        this.webSocketSend('Trade', 'unsub', oldVla); // 发送 实时成交 数据 Send\n\n        this.webSocketSend('Trade', 'req', val);\n        this.webSocketSend('Trade', 'sub', val); // 取消订阅 上一个币对的K线数据\n\n        this.webSocketKlineSend('unsub', oldVla, this.lastTimeS); // 发送 K线历史数据 send\n\n        this.webSocketKlineSend('req', val, this.lastTimeS); // 发送 K线实时数据 send\n\n        this.webSocketKlineSend('sub', val, this.lastTimeS);\n        this.depthClasses = '0';\n        setTimeout(function () {\n          // 发送 盘口深度 数据 Send\n          _this3.webSocketSend('Depth', 'unsub', oldVla, _this3.depthClasses);\n\n          if (_this3.depthClasses !== '0') {\n            _this3.webSocketSend('Depth', 'unsub', oldVla, '0');\n          }\n\n          _this3.webSocketSend('Depth', 'sub', val, _this3.depthClasses);\n        });\n      }\n    },\n    // 监听 当前币对列表的变化\n    symbolList: function symbolList(val, oldVla) {\n      this.$bus.$emit('SYMBOL_LIST', val);\n\n      if (this.MywebSocket) {\n        // 发送 24小时行情实时数据 Send -- unsub\n        this.webSocketSend('Market', 'unsub', this.symbolCurrent, oldVla); // 发送 24小时行情实时数据 Send -- sub\n\n        this.webSocketSend('Market', 'sub', this.symbolCurrent, val);\n      }\n    },\n    // 监听 webSocket 创建成功\n    MywebSocket: function MywebSocket(val) {\n      if (val) {\n        // 发送 24小时行情历史数据 Send\n        this.webSocketSend('Review', null, this.symbolCurrent, this.symbolList); // 发送 24小时行情实时数据 Send\n\n        this.webSocketSend('Market', 'sub', this.symbolCurrent, this.symbolList); // 发送 实时成交 数据 Send\n\n        this.webSocketSend('Trade', 'req', this.symbolCurrent);\n        this.webSocketSend('Trade', 'sub', this.symbolCurrent); // 发送 盘口深度数据 Send\n\n        this.webSocketSend('Depth', 'sub', this.symbolCurrent, this.depthClasses); // 发送 K线历史数据 send\n\n        this.webSocketKlineSend('req', this.symbolCurrent, this.lastTimeS); // 发送 K线实时数据 send\n\n        this.webSocketKlineSend('sub', this.symbolCurrent, this.lastTimeS);\n      }\n    },\n    // 监听 货币汇率单位\n    rateData: function rateData(val) {\n      if (val) {\n        this.$bus.$emit('RATE_DATA', val);\n      }\n    },\n    // 监听 深度切换\n    depthClasses: function depthClasses(val, oldVal) {\n      var _this4 = this;\n\n      setTimeout(function () {\n        if (oldVal) {\n          if (oldVal !== '0') {\n            _this4.webSocketSend('Depth', 'unsub', _this4.symbolCurrent, oldVal);\n          }\n        }\n\n        _this4.webSocketSend('Depth', 'sub', _this4.symbolCurrent, val);\n      });\n    },\n    // 监听K线刻度的变化\n    lastTimeS: function lastTimeS(data, olddata) {\n      // 取消订阅 上一个币对的K线数据\n      this.webSocketKlineSend('unsub', this.symbolCurrent, olddata); // 发送 K线历史数据 send\n\n      this.webSocketKlineSend('req', this.symbolCurrent, data); // 发送 K线实时数据 send\n\n      this.webSocketKlineSend('sub', this.symbolCurrent, data);\n    }\n  },\n  methods: {\n    getJz: function getJz() {\n      var _this5 = this;\n\n      var flag = false;\n      clearInterval(this.etfTimer);\n\n      if (this.symbolCurrent && this.symbolAll) {\n        flag = !!(this.symbolAll[this.symbolCurrent] && this.symbolAll[this.symbolCurrent].etfOpen);\n      }\n\n      this.etfPrice = '--';\n      if (!flag) return; // console.log()\n\n      this.getJzAxios(this.symbolCurrent);\n      this.etfTimer = setInterval(function () {\n        _this5.getJzAxios();\n      }, 3000);\n    },\n    getJzAxios: function getJzAxios() {\n      var _this6 = this;\n\n      var arr = this.symbolCurrent.split('/');\n      this.axios({\n        url: '/etfAct/netValue',\n        method: 'post',\n        params: {\n          base: arr[0],\n          quote: arr[1]\n        }\n      }).then(function (data) {\n        if (data.code === '0') {\n          _this6.etfPrice = data.data.price; // if (data.data.fundRate) {\n          //   this.fundRate = data.data.fundRate;\n          // }\n          // this.etfUrl = data.data.faqUrl;\n          // this.etfName = data.data.domainName;\n        } else {// this.$bus.$emit('tip', { text: data.msg, type: 'error' });\n        }\n      });\n    },\n    createdInit: function createdInit() {\n      var _this7 = this;\n\n      this.axios({\n        url: 'etfAct/faqInfo' // method: 'get',\n\n      }).then(function (data) {\n        if (data.code === '0') {\n          _this7.etfUrl = data.data.faqUrl;\n          _this7.etfName = data.data.domainName;\n        } else {\n          _this7.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n        }\n      });\n    },\n    initEtfDialog: function initEtfDialog() {\n      if (this.symbolAll && this.copySymbolCurrent) {\n        var symbol = this.copySymbolCurrent;\n\n        if (this.symbolAll && this.symbolAll[symbol] && this.symbolAll[symbol].etfOpen && !getCookie('etfDialog')) {\n          this.etfDialog = true;\n        }\n      }\n    },\n    etfDialogConfirm: function etfDialogConfirm() {\n      this.etfDialog = false;\n      setCookie('etfDialog', true);\n    },\n    hideTradeAlert: function hideTradeAlert() {\n      this.tradeAlertState = false;\n    },\n    getTradeLimitInfo: function getTradeLimitInfo(symbol) {\n      var _this8 = this;\n\n      this.axios({\n        url: 'order/trade_limit_info',\n        params: {\n          symbol: symbol\n        },\n        method: 'post'\n      }).then(function (res) {\n        if (res.code !== '0') return;\n        var data = res.data;\n        Object.keys(data).forEach(function (key) {\n          data[key] = Number(data[key]);\n        });\n\n        if (_this8.currentSymbolCase === symbol) {\n          var sellInfo = Number(data.trade_limit_sell_info);\n          var buyInfo = Number(data.trade_limit_buy_info);\n          _this8.tradeLimitData = data;\n          _this8.tradeAlertState = Boolean(sellInfo || buyInfo);\n        }\n      });\n    },\n    init: function init() {\n      var _this9 = this;\n\n      this.getJz();\n\n      if (this.routeSymbol) {\n        var symbolNameClassCion = this.routeSymbol.split('_')[0];\n        var markTitleClassCion = this.routeSymbol.split('_')[1];\n        var symbolNameClass = this.routeSymbol.split('_')[0];\n        var markTitleClass = this.routeSymbol.split('_')[1];\n        var coinLisArr = Object.keys(this.coinList);\n        coinLisArr.forEach(function (item) {\n          var showName = _this9.coinList[item].showName;\n\n          if (showName === markTitleClass) {\n            markTitleClassCion = item;\n          }\n\n          if (showName === symbolNameClass) {\n            symbolNameClassCion = item;\n          }\n        });\n        var symbol = \"\".concat(symbolNameClassCion, \"/\").concat(markTitleClassCion);\n\n        if (this.symbolAll[symbol] && this.symbolAll[symbol].etfOpen) {\n          markTitleClassCion = 'ETF';\n        }\n\n        if (markTitleClassCion && symbolNameClassCion) {\n          myStorage.set(this.markTitleClass, markTitleClassCion);\n          myStorage.set(this.symbolNameClass, symbol);\n        }\n      } else {\n        var sSymbolName = myStorage.get(this.symbolNameClass);\n\n        if (sSymbolName) {\n          var sSymbolShowName = this.symbolAll[sSymbolName] ? this.symbolAll[sSymbolName].showName : sSymbolName;\n          var sSymbol = sSymbolShowName.replace('/', '_');\n          this.$router.push(\"/\".concat(this.routerPathClass, \"/\").concat(sSymbol));\n        }\n      }\n\n      this.screenWidth = document.body.clientWidth;\n\n      if (this.screenWidth <= this.mediaWidth) {\n        this.shrink = true;\n        this.marketShrink = true;\n      } // 监听 窗口的大小改变\n\n\n      this.$bus.$on('WINFOW_ON_RESIIZE', function () {\n        // this.$bus.$emit('WINFOW_ON_RESIIZE', );\n        if (_this9.windowOnResizeFire) {\n          _this9.screenWidth = document.body.clientWidth;\n\n          if (_this9.screenWidth <= _this9.mediaWidth) {\n            // 如果 屏幕窗口 小于阈值 设置成收起模式\n            _this9.shrink = true;\n            _this9.marketShrink = true;\n          } else {\n            // 如果 屏幕窗口 大于阈值 设置成展开模式\n            _this9.shrink = false;\n            _this9.marketShrink = false;\n          }\n\n          _this9.windowOnResizeFire = false; // 0.3秒之后将标志位重置\n\n          setTimeout(function () {\n            _this9.windowOnResizeFire = true;\n          });\n        }\n      });\n      this.listenBusEvent();\n\n      this.worker.onmessage = function (event) {\n        var data = event.data; // 监听 WebSocket 链接成功\n\n        if (data.type === 'WEBSOCKET_ON_OPEN') {\n          _this9.MywebSocket = data.data.type;\n\n          _this9.$bus.$emit('WEBSOCKET_ON_OPEN', _this9.MywebSocket);\n        } // 监听 WS 数据\n\n\n        if (data.type === 'WEBSOCKET_DATA') {\n          _this9.listenWSData(data.data);\n        }\n      };\n    },\n    listenBusEvent: function listenBusEvent() {\n      var _this10 = this;\n\n      // 监听 市场切换\n      this.$bus.$on('ON_MARKET_SWITCH', function (data) {\n        _this10.marketCurrent = data;\n      }); // 监听 币对切换\n\n      this.$bus.$on('ON_SYMBOL_SWITCH', function (data) {\n        myStorage.set(_this10.markTitleClass, _this10.marketCurrent);\n        myStorage.set(_this10.symbolNameClass, data);\n        _this10.symbolCurrent = data;\n\n        if (_this10.isLogin) {\n          _this10.$store.dispatch('assetsExchangeData', {\n            auto: false,\n            coinSymbols: data.replace('/', ',')\n          });\n        }\n      }); // 监听 深度级别的切换\n\n      this.$bus.$on('DEPTH_CLASSES', function (data) {\n        _this10.depthClasses = data;\n      }); // 监听 深度级别的值\n\n      this.$bus.$on('DEPTH_VALUE', function (data) {\n        _this10.depthValue = data;\n      }); // 监听 kline 发送Send\n\n      this.$bus.$on('WEBSOCKET_KLINE_SEND', function (data) {\n        _this10.worker.postMessage({\n          type: 'WEBSOCKET_KLINE_SEND',\n          data: data\n        });\n      });\n      this.$bus.$on('LTIME', function (data) {\n        _this10.lTime = data;\n      });\n      this.$bus.$on('LAST-TIMES', function (data) {\n        _this10.lastTimeS = data;\n      });\n    },\n    listenWSData: function listenWSData(data) {\n      var type = data.type,\n          WsData = data.WsData;\n      this.$bus.$emit(type, WsData);\n\n      if (type === 'KLINE_DATA_REQ') {\n        this.$store.dispatch('kLinwReqData', WsData);\n      }\n\n      if (type === 'KLINE_DATA_SUB') {\n        this.$store.dispatch('kLinwSubData', WsData);\n      }\n\n      if (type === 'TRADE_DATA') {\n        this.worker.postMessage({\n          type: 'TRADE_QUEUE_DATA',\n          data: WsData.queueDataList\n        });\n      }\n    },\n    webSocketSend: function webSocketSend(type, sendType, symbolData, symbolList) {\n      this.worker.postMessage({\n        type: 'WEBSOCKET_SEND',\n        data: {\n          type: type,\n          sendType: sendType,\n          symbolData: symbolData,\n          symbolList: symbolList,\n          depthValue: this.depthValue\n        }\n      });\n    },\n    // 隐藏基本版 临时注释掉\n    // type, symbolData, lastTimeS\n    webSocketKlineSend: function webSocketKlineSend() {// const lastTimeSval = lastTimeS === 'Line' ? '1min' : lastTimeS;\n      // const arr = symbolData.split('/');\n      // const symbol = `${arr[0].toLowerCase()}${arr[1].toLowerCase()}`;\n      // this.worker.postMessage({\n      //   type: 'WEBSOCKET_KLINE_SEND',\n      //   data: {\n      //     type,\n      //     symbol,\n      //     lastTimeS: lastTimeSval,\n      //     lTime: this.lTime,\n      //     number: 150,\n      //   },\n      // });\n    },\n    shrinkBlock: function shrinkBlock() {\n      this.marketShrink = !this.marketShrink;\n    },\n    serachShrinkBlock: function serachShrinkBlock() {\n      this.marketShrink = false;\n    },\n    ondblclick: function ondblclick() {\n      return false;\n    },\n    onclickfun: function onclickfun(e) {\n      // 显示和隐藏币币交易页面 TradingView 的遮罩\n      if (e.target.className === 'coverKlineBox') {\n        this.coverKlineBox = e.target;\n      }\n\n      if (e.target.className === 'coverKlineBox') {\n        this.coverKlineBox.style.display = 'none';\n      } else if (this.coverKlineBox) {\n        this.coverKlineBox.style.display = 'block';\n        this.coverKlineBox = null;\n      }\n    }\n  }\n};",null]}