{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/input_find/InputFind.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/components/input_find/InputFind.vue","mtime":1641740793770},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'c-inputFind',\n  data: function data() {\n    return {\n      nowValue: '',\n      // 内部双向数据绑定\n      maxLength: 100,\n      // 最长长度\n      isHover: false,\n      isFocus: false\n    };\n  },\n  props: {\n    name: {\n      default: '',\n      type: String\n    },\n    // 名称标识\n    className: {\n      default: '',\n      type: String\n    },\n    // class根容器\n    disabled: {\n      default: false,\n      type: Boolean\n    },\n    // 是否为只读\n    promptText: {\n      default: '',\n      type: String\n    },\n    // 提示文案\n    value: {\n      default: '',\n      type: String\n    },\n    // 外部 v-model 传入的植\n    lightColour: {\n      default: false,\n      type: Boolean\n    },\n    // 是否为浅色版\n    iconHide: {\n      default: false,\n      type: Boolean\n    },\n    inputStyle: {\n      default: '',\n      type: String\n    }\n  },\n  watch: {\n    nowValue: function nowValue(v) {\n      // 限制最长长度\n      if (v.length > this.maxLength) {\n        this.nowValue = v.substring(0, this.maxLength);\n      } // 限制空格\n\n\n      if (v.indexOf(' ') !== -1) {\n        var arr = this.nowValue.split(' ');\n        var str = '';\n        arr.forEach(function (item) {\n          str += item;\n        });\n        this.nowValue = str;\n      }\n\n      this.$emit('onchanges', v, this.name);\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$bus.$off('inputFind-focus');\n    this.$bus.$on('inputFind-focus', function (name) {\n      if (name === _this.name) {\n        _this.focusFn();\n      }\n    });\n  },\n  computed: {\n    curValue: {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        this.nowValue = value;\n      }\n    },\n    contentClass: function contentClass() {\n      if (this.isHover || this.isFocus) {\n        return 'a-12-bd';\n      }\n\n      return 'a-2-bd';\n    },\n    solidBcClass: function solidBcClass() {\n      var className = null;\n\n      if (this.isHover) {\n        className = 'solidBc-hover';\n      }\n\n      if (this.isFocus) {\n        className = 'solidBc-active';\n      }\n\n      return className;\n    }\n  },\n  methods: {\n    focusFn: function focusFn() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.$refs.inputFind.focus();\n      });\n    },\n    clones: function clones() {\n      this.$emit('onchanges', '', this.name);\n    },\n    // input 鼠标划入\n    handMouseenter: function handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave: function handMouseleave() {\n      this.isHover = false;\n    },\n    // input 获取焦点\n    handFocus: function handFocus() {\n      this.$emit('focus');\n      this.isFocus = true;\n    },\n    // input 失去焦点\n    handBlur: function handBlur() {\n      this.$emit('blur');\n      this.isFocus = false;\n    }\n  }\n};",null]}