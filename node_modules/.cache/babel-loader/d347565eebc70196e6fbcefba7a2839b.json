{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/spotTrade/trade/orderList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/app/view/src/components/modules/spotTrade/trade/orderList.vue","mtime":1642484222344},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport mixin from 'BlockChain-ui-privatization/PC/common-mixin/modules/trade/orderList/orderList';\nimport { getCoinShowName, formatTime, fixD, myStorage } from 'BlockChain-ui-privatization/utils';\nimport GridDialog from '@/components/modules/trade/gridDialog/GridDialog.vue';\nimport 'BlockChain-ui-privatization/PC/common-mixin/modules/trade/orderList/tradeOrderList.styl';\nimport tabs from \"../tab.vue\";\nexport default {\n  mixins: [mixin],\n  components: {\n    GridDialog: GridDialog,\n    tabs: tabs\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  // 组价离开前执行\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.getDataInter);\n  },\n  data: function data() {\n    return {\n      gridType: 0,\n      // 网格类型 0: 网格详情； 1: 正在执行(20)； 2: 已完成\n      gridDoliog: false,\n      // 网格弹窗\n      gridItemId: null,\n      // list单个的数据\n      gridCancelDoliog: false,\n      filterGridStatus: 1,\n      // 策略状态 0:启动中  1:正在执行   2:停止中   3:已关闭\n      timer: 15000\n    };\n  },\n  watch: {\n    filterGridStatus: function filterGridStatus(v) {\n      if (!v) {\n        clearInterval(this.getDataInter);\n        this.getDataInter = null;\n      } else {\n        this.intervalGet();\n      }\n    }\n  },\n  computed: {\n    //  是否开启了 网格\n    gridTradeFlag: function gridTradeFlag() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var str = 1;\n\n      if (publicInfo && publicInfo.switch && publicInfo.switch.grid_trade_switch) {\n        str = Number(publicInfo.switch.grid_trade_switch);\n      }\n\n      return str;\n    },\n    // 该币对是否开启网格\n    showGridFlag: function showGridFlag() {\n      var flag = false;\n\n      if (this.symbolAll && this.symbolCurrent) {\n        var symbol = this.symbolAll[this.symbolCurrent];\n\n        if (symbol && symbol.is_grid_open) {\n          flag = true;\n        }\n      }\n\n      return flag;\n    },\n    // tab 项\n    tabTypeItem: function tabTypeItem() {\n      var arr = [{\n        label: this.$t('trade.activeOrder'),\n        value: 1\n      }, // 当前委托\n      {\n        label: this.$t('trade.historyOrder'),\n        value: 2\n      } // 历史委托\n      ];\n\n      if (this.gridTradeFlag && this.showGridFlag) {\n        arr.push({\n          label: this.$t('gridTrade.title'),\n          value: 3\n        });\n      }\n\n      return arr;\n    },\n    // 表头\n    columns: function columns() {\n      if (this.orderType === 2) {\n        return [{\n          title: this.$t('trade.time'),\n          // '时间',\n          width: '100px'\n        }, {\n          title: this.$t('trade.class'),\n          // '类别'\n          width: '200px'\n        }, {\n          title: this.$t('trade.transaction') // '交易对'\n\n        }, {\n          title: \"\".concat(this.$t('trade.price'), \"\\n            (\").concat(getCoinShowName(this.symbolUnit.units, this.coinList), \")\") // 价格\n\n        }, {\n          title: \"\".concat(this.$t('trade.number'), \"\\n            (\").concat(getCoinShowName(this.symbolUnit.symbol, this.coinList), \")\") // 数量\n\n        }, {\n          title: this.$t('trade.average') // '成交均价'\n\n        }, {\n          title: this.$t('trade.status') // '状态'\n\n        }, {\n          title: this.$t('trade.opera'),\n          // '操作'\n          width: '100px'\n        }];\n      }\n\n      if (this.orderType === 3) {\n        return [{\n          title: this.$t('trade.time'),\n          // '时间',\n          width: '100px'\n        }, {\n          title: this.$t('trade.transaction'),\n          // '交易对'\n          width: '100px'\n        }, {\n          title: this.$t('gridTrade.clounms1'),\n          // '总投入',\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms2'),\n          // 已产生利润\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms3'),\n          // 持仓盈亏\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms4'),\n          // '年化收益率'\n          width: '200px'\n        }, {\n          title: this.$t('gridTrade.clounms5'),\n          // '运行时长'\n          width: '200px'\n        }, {\n          title: this.$t('trade.opera'),\n          // '操作'\n          width: '150px'\n        }];\n      }\n\n      return [{\n        title: this.$t('trade.time'),\n        // '时间',\n        width: '100px'\n      }, {\n        title: this.$t('trade.class'),\n        // '类别'\n        width: '150px'\n      }, {\n        title: \"\".concat(this.$t('trade.price'), \"\\n          (\").concat(getCoinShowName(this.symbolUnit.units, this.coinList), \")\") // 价格\n\n      }, {\n        title: \"\".concat(this.$t('trade.number'), \"\\n          (\").concat(getCoinShowName(this.symbolUnit.symbol, this.coinList), \")\") // 数量\n\n      }, {\n        title: \"\".concat(this.$t('trade.dealMoney'), \"\\n          (\").concat(getCoinShowName(this.symbolUnit.units, this.coinList), \")\") // 交易额\n\n      }, {\n        title: this.$t('trade.average') // '成交均价'\n\n      }, {\n        title: \"\".concat(this.$t('trade.deal'), \"/\").concat(this.$t('trade.noDeal')) // 已成交/未成交\n\n      }, {\n        title: this.$t('trade.opera'),\n        // '操作'\n        width: '100px',\n        classes: 'opera'\n      }];\n    },\n    dataList: function dataList() {\n      if (this.orderData && this.orderData.orderType === this.orderType) {\n        if (this.orderType === 1) {\n          return this.formData(this.orderData.orderList, this.cancelOrderId);\n        }\n\n        if (this.orderType === 3) {\n          return this.formGridData(this.orderData.strategyVoList);\n        }\n\n        return this.formHistoryData(this.orderData.orderList);\n      }\n\n      return [];\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this = this;\n\n      // 获取 当前选中的货币对\n      this.symbolCurrent = myStorage.get('sSymbolName');\n\n      if (this.moduleType === 'lever') {\n        this.symbolCurrent = myStorage.get('leverSymbolName');\n      }\n\n      if (this.isLogin) {\n        this.getData(); // 轮训请求数据\n\n        this.intervalGet();\n      }\n\n      this.$bus.$on('SYMBOL_CURRENT', function (val) {\n        _this.symbolCurrent = val;\n\n        if (_this.isLogin) {\n          _this.pagination.page = 1;\n          _this.subTableDataId = null;\n          _this.tableLoading = true;\n\n          _this.getData();\n        }\n\n        if (_this.orderType === 3 && (!_this.showGridFlag || !_this.gridTradeFlag)) {\n          _this.orderType = 1;\n        }\n      }); // 监听下单成功\n\n      this.$bus.$on('ORDER_CREATE', function () {\n        _this.pagination.page = 1;\n\n        _this.getData();\n      });\n    },\n    gridClose: function gridClose() {\n      this.gridDoliog = false;\n    },\n    // 请求订单数据\n    getData: function getData(auto) {\n      if (this.symbolCurrent && this.isLogin) {\n        var url = this.$store.state.url.cointran.orderNew;\n\n        if (this.orderType === 2) {\n          url = this.$store.state.url.ordercenter.historyNew;\n        } else if (this.orderType === 3) {\n          // 如果是网格直接请求网格接口\n          url = 'quant/getStrategyList';\n        }\n\n        if (this.moduleType === 'lever') {\n          url = this.$store.state.url.lever.new;\n\n          if (this.orderType === 2) {\n            url = this.$store.state.url.lever.all;\n          }\n        }\n\n        var symbolArr = this.symbolCurrent.split('/');\n        var symbol = symbolArr[0].toLowerCase() + symbolArr[1].toLowerCase();\n        var data = {\n          url: url,\n          orderType: this.orderType,\n          params: {\n            symbol: symbol,\n            pageSize: this.pagination.pageSize\n          }\n        };\n\n        if (this.orderType === 3) {\n          data.hostType = 'quant';\n          data.params.symbol = this.symbolCurrent;\n          data.params.status = this.filterGridStatus;\n        }\n\n        if (this.orderIdArrar.length && this.orderType === 2) {\n          data.params.idList = this.orderIdArrar;\n        } else {\n          data.params.page = this.pagination.page;\n        }\n\n        if (auto) {\n          data.auto = true;\n        }\n\n        this.$store.dispatch('getOrderListData', data);\n      }\n    },\n    // 轮训请求数据\n    intervalGet: function intervalGet() {\n      var _this2 = this;\n\n      if (this.filterGridStatus) {\n        clearInterval(this.getDataInter);\n        this.getDataInter = setInterval(function () {\n          _this2.getData(true);\n        }, this.timer);\n      } else {\n        clearInterval(this.getDataInter);\n        this.getDataInter = null;\n      }\n    },\n    // 网格交易数据格式化\n    formGridData: function formGridData(data) {\n      var _this3 = this;\n\n      var dataArray = data || [];\n      var newData = [];\n\n      if (dataArray.length) {\n        dataArray.forEach(function (item) {\n          var tableData = null;\n          var symbolArr = item.symbol.split('/'); // 网格状态 0:启动中 1:正在执行 2:停止中 3:已关闭\n\n          if (_this3.filterGridStatus.toString() === '0') {\n            tableData = {\n              id: item.id,\n              data: [formatTime(item.ctime), [{\n                text: \"\".concat(getCoinShowName(symbolArr[0], _this3.coinList), \"/\").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 总投入\n              [{\n                text: \"\".concat(fixD(item.configParamMap.totalQuoteAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \" + \").concat(fixD(item.configParamMap.totalBaseAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[0], _this3.coinList))\n              }], // 已产生利润\n              [{\n                text: \"\".concat(fixD(item.totalProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \"(\").concat(fixD(item.totalProfitRate, 2), \"%)\")\n              }], // 持仓盈亏\n              [{\n                text: \"\".concat(fixD(item.positionProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 年华收益率\n              [{\n                text: \"\".concat(fixD(item.annualizedYield, 2), \"%\")\n              }], // 运行时长\n              [{\n                text: _this3.setTime(item.startTime, item.endTime)\n              }], [{\n                type: 'link',\n                text: _this3.$t('trade.view'),\n                // 详情\n                eventType: 'gridDetail'\n              }]]\n            };\n          } else if (_this3.filterGridStatus.toString() === '1') {\n            tableData = {\n              id: item.id,\n              data: [formatTime(item.ctime), [{\n                text: \"\".concat(getCoinShowName(symbolArr[0], _this3.coinList), \"/\").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 总投入\n              [{\n                text: \"\".concat(fixD(item.configParamMap.totalQuoteAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \" + \").concat(fixD(item.configParamMap.totalBaseAmount, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[0], _this3.coinList))\n              }], // 已产生利润\n              [{\n                text: \"\".concat(fixD(item.totalProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList), \"(\").concat(fixD(item.totalProfitRate, 2), \"%)\")\n              }], // 持仓盈亏\n              [{\n                text: \"\".concat(fixD(item.positionProfit, _this3.fixValue.priceFix), \"\\n                      \").concat(getCoinShowName(symbolArr[1], _this3.coinList))\n              }], // 年华收益率\n              [{\n                text: \"\".concat(fixD(item.annualizedYield, 2), \"%\")\n              }], // 运行时长\n              [{\n                text: _this3.setTime(item.startTime)\n              }], [{\n                type: 'link',\n                text: _this3.$t('trade.view'),\n                // 详情\n                eventType: 'gridDetail'\n              }, {\n                type: 'link',\n                text: _this3.$t('gridTrade.close'),\n                // 终止网格\n                eventType: 'gridCancel',\n                classes: 'grid_btn'\n              }]]\n            };\n          }\n\n          if (tableData) {\n            newData.push(tableData);\n          }\n        });\n        return newData;\n      }\n\n      return [];\n    },\n    setTime: function setTime(startTime, endTime) {\n      if (!Number(startTime)) {\n        return \"0\".concat(this.$t('otcDetailOrder.day'), \"0\").concat(this.$t('gridTrade.hours'), \"0\").concat(this.$t('otcDetailOrder.min'));\n      }\n\n      var dateEnd = new Date().getTime();\n\n      if (endTime) {\n        dateEnd = endTime;\n      }\n\n      var dateDiff = dateEnd - startTime; // 时间差的毫秒数\n\n      var day = Math.floor(dateDiff / (24 * 3600 * 1000)); // 计算出相差天数\\\n\n      var leave1 = dateDiff % (24 * 3600 * 1000); // 计算天数后剩余的毫秒数\n\n      var hours = Math.floor(leave1 / (3600 * 1000)); // 计算出小时数\n      // 计算相差分钟数\n\n      var leave2 = leave1 % (3600 * 1000); // 计算小时数后剩余的毫秒数\n\n      var minutes = Math.floor(leave2 / (60 * 1000)); // 计算相差分钟数\n\n      function s(t) {\n        return t < 10 && t > 0 ? \"0\".concat(t) : t;\n      }\n\n      return \"\".concat(s(day)).concat(this.$t('otcDetailOrder.day')).concat(s(hours)).concat(this.$t('gridTrade.hours')).concat(s(minutes)).concat(this.$t('otcDetailOrder.min'));\n    },\n    elementClick: function elementClick(type, data) {\n      if (type === 'cancel') {\n        this.cancelOrderEvent(data);\n      } else if (type === 'gridDetail') {\n        this.gridItemId = data;\n        this.gridDoliog = true;\n      } else if (type === 'gridCancel') {\n        this.gridItemId = data;\n        this.gridCancelDoliog = true;\n      } else {\n        this.getSubTableData(data);\n      }\n    },\n    // 终止网格\n    gridCancelEvent: function gridCancelEvent() {\n      var _this4 = this;\n\n      this.axios({\n        url: 'quant/stopStrategy',\n        hostType: 'quant',\n        method: 'post',\n        params: {\n          strategyId: this.gridItemId\n        }\n      }).then(function (rep) {\n        if (rep.code.toString() === '0') {\n          _this4.getData(); // 重新请求资产\n\n\n          _this4.$store.dispatch('assetsExchangeData', {\n            auto: false,\n            coinSymbols: _this4.coinSymbols\n          }); // 撤单成功 提示\n\n\n          _this4.$bus.$emit('tip', {\n            text: rep.msg,\n            type: 'success'\n          });\n        } else {\n          _this4.$bus.$emit('tip', {\n            text: rep.msg,\n            type: 'error'\n          });\n        }\n\n        _this4.gridCancelDoliog = false;\n      });\n    }\n  }\n};",{"version":3,"sources":["orderList.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- 币币交易 实时成交 -->\n<template>\n    <div class=\"order-list-box trade-order-list\">\n\n      <tabs :list=\"tabTypeItem\" v-model=\"orderType\" @click=\"switchType\"/>\n\n      <div class=\"order_type\" v-if=\"orderType === 3\">\n        <div class=\"order_type_btn\"\n        :class=\"filterGridStatus === 1 ? 'u-8-bd u-8-cl' : ''\"\n         @click=\"() => {this.filterGridStatus = 1;this.pagination.page = 1;\n      this.tableLoading = true;this.getData();}\">\n          <!-- 正在执行 -->\n          {{$t('gridTrade.orderType1')}}\n        </div>\n        <div class=\"order_type_btn\"\n        :class=\"filterGridStatus === 0 ? 'u-8-bd u-8-cl' : ''\"\n         @click=\"() => {this.filterGridStatus = 0;this.pagination.page = 1;\n      this.tableLoading = true;this.getData();}\">\n          <!-- 已完成 -->\n          {{$t('gridTrade.orderType2')}}\n        </div>\n      </div>\n      <div class=\"order-conent\"\n       :class=\"orderType === 3\n       && $store.state.baseData.templateLayoutType === '2'\n       ? 'order-content_height'\n       : orderType === 3\n       && $store.state.baseData.templateLayoutType != '2'\n       ? 'pro-trade-order' : ''\">\n        <vue-scroll>\n          <c-table\n            :columns = 'columns'\n            :imgMap=\"imgMap\"\n            :colorMap=\"colorMap\"\n            :dataList = 'dataList'\n            :subContent = 'subTableData'\n            :subContentId = 'subTableDataId'\n            :subColumns = 'subColumns'\n            :loading = 'tableLoading'\n            :subLoading = 'subLoading'\n            :cellHeight = 'cellHeight'\n            @elementClick = \"elementClick\"\n            :bodyClasses=\"orderType === 3 ? 'gridOrder': ''\"\n           />\n           <c-pagination v-if=\"(pagination.count/pagination.pageSize) > 1\"\n                    :total=\"pagination.count\"\n                    :current-page='pagination.page'\n                    :display='pagination.pageSize'\n                    @pagechange=\"pagechange\">\n            </c-pagination>\n        </vue-scroll>\n      </div>\n      <!-- <div class=\"notData\" v-if=\"!dataList.length && !tableLoading\">\n        <svg class=\"icon icon-50\" aria-hidden=\"true\">\n          <use xlink:href=\"#icon-g_2\"></use>\n        </svg>\n        <p>\n          {{$t('common.notData')}}\n        </p>\n      </div> -->\n      <grid-dialog\n       :dataId=\"gridItemId\"\n       :type=\"filterGridStatus\"\n       :fixValue=\"fixValue\"\n        :gridShowFlag=\"gridDoliog\" @gridDialogClose=\"gridClose\"></grid-dialog>\n        <!-- 未认证 提示框 -->\n      <c-alert :showFlag=\"gridCancelDoliog\"\n          :buttonText=\"$t('application.confirm')\"\n          :imgMap=\"imgMap\"\n          @close=\"() => this.gridCancelDoliog = false\"\n          :btnEventFlag=\"true\"\n          @confirm=\"gridCancelEvent\">\n          <div class=\"tip_title b-1-cl\">\n            <!-- 交易须知 -->\n            {{$t('gridTrade.tip')}}\n          </div>\n          <!-- 终止网格后，会撤消所有未成交订单，确定要终止此网格交易？ -->\n          <p class=\"tip_text\">{{$t('gridTrade.tipContent')}}</p>\n      </c-alert>\n    </div>\n</template>\n<script>\nimport mixin from 'BlockChain-ui-privatization/PC/common-mixin/modules/trade/orderList/orderList';\nimport {\n  getCoinShowName, formatTime, fixD, myStorage,\n} from 'BlockChain-ui-privatization/utils';\nimport GridDialog from '@/components/modules/trade/gridDialog/GridDialog.vue';\nimport 'BlockChain-ui-privatization/PC/common-mixin/modules/trade/orderList/tradeOrderList.styl';\nimport tabs from '../tab.vue'\n\n\nexport default {\n  mixins: [mixin],\n  components: {\n    GridDialog,\n    tabs,\n  },\n  mounted() {\n    this.init();\n  },\n  // 组价离开前执行\n  beforeDestroy() {\n    clearInterval(this.getDataInter);\n  },\n  data() {\n    return {\n      gridType: 0, // 网格类型 0: 网格详情； 1: 正在执行(20)； 2: 已完成\n      gridDoliog: false, // 网格弹窗\n      gridItemId: null, // list单个的数据\n      gridCancelDoliog: false,\n      filterGridStatus: 1, // 策略状态 0:启动中  1:正在执行   2:停止中   3:已关闭\n      timer: 15000,\n    };\n  },\n  watch: {\n    filterGridStatus(v) {\n      if (!v) {\n        clearInterval(this.getDataInter);\n        this.getDataInter = null;\n      } else {\n        this.intervalGet();\n      }\n    },\n  },\n  computed: {\n    //  是否开启了 网格\n    gridTradeFlag() {\n      const { publicInfo } = this.$store.state.baseData;\n      let str = 1;\n      if (publicInfo && publicInfo.switch && publicInfo.switch.grid_trade_switch) {\n        str = Number(publicInfo.switch.grid_trade_switch);\n      }\n      return str;\n    },\n    // 该币对是否开启网格\n    showGridFlag() {\n      let flag = false;\n      if (this.symbolAll && this.symbolCurrent) {\n        const symbol = this.symbolAll[this.symbolCurrent];\n\n        if (symbol && symbol.is_grid_open) {\n          flag = true;\n        }\n      }\n      return flag;\n    },\n    // tab 项\n    tabTypeItem() {\n      const arr = [\n        {label: this.$t('trade.activeOrder'), value: 1}, // 当前委托\n        {label: this.$t('trade.historyOrder'), value: 2}, // 历史委托\n      ];\n      if (this.gridTradeFlag && this.showGridFlag) {\n        arr.push({label: this.$t('gridTrade.title'), value: 3});\n      }\n      return arr;\n    },\n    // 表头\n    columns() {\n      if (this.orderType === 2) {\n        return [\n          {\n            title: this.$t('trade.time'), // '时间',\n            width: '100px',\n          },\n          {\n            title: this.$t('trade.class'), // '类别'\n            width: '200px',\n          },\n          {\n            title: this.$t('trade.transaction'), // '交易对'\n          },\n          {\n            title: `${this.$t('trade.price')}\n            (${getCoinShowName(this.symbolUnit.units, this.coinList)})`, // 价格\n          },\n          {\n            title: `${this.$t('trade.number')}\n            (${getCoinShowName(this.symbolUnit.symbol, this.coinList)})`, // 数量\n          },\n          {\n            title: this.$t('trade.average'), // '成交均价'\n          },\n          {\n            title: this.$t('trade.status'), // '状态'\n          },\n          {\n            title: this.$t('trade.opera'), // '操作'\n            width: '100px',\n          },\n        ];\n      }\n      if (this.orderType === 3) {\n        return [\n          {\n            title: this.$t('trade.time'), // '时间',\n            width: '100px',\n          },\n          {\n            title: this.$t('trade.transaction'), // '交易对'\n            width: '100px',\n          },\n          {\n            title: this.$t('gridTrade.clounms1'), // '总投入',\n            width: '200px',\n          },\n          {\n            title: this.$t('gridTrade.clounms2'), // 已产生利润\n            width: '200px',\n          },\n          {\n            title: this.$t('gridTrade.clounms3'), // 持仓盈亏\n            width: '200px',\n          },\n          {\n            title: this.$t('gridTrade.clounms4'), // '年化收益率'\n            width: '200px',\n          },\n          {\n            title: this.$t('gridTrade.clounms5'), // '运行时长'\n            width: '200px',\n          },\n          {\n            title: this.$t('trade.opera'), // '操作'\n            width: '150px',\n          },\n        ];\n      }\n      return [\n        {\n          title: this.$t('trade.time'), // '时间',\n          width: '100px',\n        },\n        {\n          title: this.$t('trade.class'), // '类别'\n          width: '150px',\n        },\n        {\n          title: `${this.$t('trade.price')}\n          (${getCoinShowName(this.symbolUnit.units, this.coinList)})`, // 价格\n        },\n        {\n          title: `${this.$t('trade.number')}\n          (${getCoinShowName(this.symbolUnit.symbol, this.coinList)})`, // 数量\n        },\n        {\n          title: `${this.$t('trade.dealMoney')}\n          (${getCoinShowName(this.symbolUnit.units, this.coinList)})`, // 交易额\n        },\n        {\n          title: this.$t('trade.average'), // '成交均价'\n        },\n        {\n          title: `${this.$t('trade.deal')}/${this.$t('trade.noDeal')}`, // 已成交/未成交\n        },\n        {\n          title: this.$t('trade.opera'), // '操作'\n          width: '100px',\n          classes: 'opera',\n        },\n      ];\n    },\n    dataList() {\n      if (this.orderData && this.orderData.orderType === this.orderType) {\n        if (this.orderType === 1) {\n          return this.formData(this.orderData.orderList, this.cancelOrderId);\n        }\n        if (this.orderType === 3) {\n          return this.formGridData(this.orderData.strategyVoList);\n        }\n        return this.formHistoryData(this.orderData.orderList);\n      }\n      return [];\n    },\n  },\n  methods: {\n    init() {\n      // 获取 当前选中的货币对\n      this.symbolCurrent = myStorage.get('sSymbolName');\n      if (this.moduleType === 'lever') {\n        this.symbolCurrent = myStorage.get('leverSymbolName');\n      }\n      if (this.isLogin) {\n        this.getData();\n        // 轮训请求数据\n        this.intervalGet();\n      }\n      this.$bus.$on('SYMBOL_CURRENT', (val) => {\n        this.symbolCurrent = val;\n        if (this.isLogin) {\n          this.pagination.page = 1;\n          this.subTableDataId = null;\n          this.tableLoading = true;\n          this.getData();\n        }\n        if (this.orderType === 3 && (!this.showGridFlag || !this.gridTradeFlag)) {\n          this.orderType = 1;\n        }\n      });\n      // 监听下单成功\n      this.$bus.$on('ORDER_CREATE', () => {\n        this.pagination.page = 1;\n        this.getData();\n      });\n    },\n    gridClose() {\n      this.gridDoliog = false;\n    },\n    // 请求订单数据\n    getData(auto) {\n      if (this.symbolCurrent && this.isLogin) {\n        let url = this.$store.state.url.cointran.orderNew;\n\n        if (this.orderType === 2) {\n          url = this.$store.state.url.ordercenter.historyNew;\n        } else if (this.orderType === 3) { // 如果是网格直接请求网格接口\n          url = 'quant/getStrategyList';\n        }\n\n        if (this.moduleType === 'lever') {\n          url = this.$store.state.url.lever.new;\n          if (this.orderType === 2) {\n            url = this.$store.state.url.lever.all;\n          }\n        }\n        const symbolArr = this.symbolCurrent.split('/');\n        const symbol = symbolArr[0].toLowerCase() + symbolArr[1].toLowerCase();\n        const data = {\n          url,\n          orderType: this.orderType,\n          params: {\n            symbol,\n            pageSize: this.pagination.pageSize,\n          },\n        };\n        if (this.orderType === 3) {\n          data.hostType = 'quant';\n          data.params.symbol = this.symbolCurrent;\n          data.params.status = this.filterGridStatus;\n        }\n        if (this.orderIdArrar.length && this.orderType === 2) {\n          data.params.idList = this.orderIdArrar;\n        } else {\n          data.params.page = this.pagination.page;\n        }\n        if (auto) {\n          data.auto = true;\n        }\n        this.$store.dispatch('getOrderListData', data);\n      }\n    },\n    // 轮训请求数据\n    intervalGet() {\n      if (this.filterGridStatus) {\n        clearInterval(this.getDataInter);\n        this.getDataInter = setInterval(() => {\n          this.getData(true);\n        }, this.timer);\n      } else {\n        clearInterval(this.getDataInter);\n        this.getDataInter = null;\n      }\n    },\n    // 网格交易数据格式化\n    formGridData(data) {\n      const dataArray = data || [];\n      const newData = [];\n      if (dataArray.length) {\n        dataArray.forEach((item) => {\n          let tableData = null;\n          const symbolArr = item.symbol.split('/');\n          // 网格状态 0:启动中 1:正在执行 2:停止中 3:已关闭\n          if (this.filterGridStatus.toString() === '0') {\n            tableData = {\n              id: item.id,\n              data: [\n                formatTime(item.ctime),\n                [\n                  {\n                    text: `${getCoinShowName(symbolArr[0], this.coinList)}/${getCoinShowName(symbolArr[1], this.coinList)}`,\n                  },\n                ],\n                // 总投入\n                [\n                  {\n                    text: `${fixD(item.configParamMap.totalQuoteAmount, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[1], this.coinList)} + ${fixD(item.configParamMap.totalBaseAmount, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[0], this.coinList)}`,\n                  },\n                ],\n                // 已产生利润\n                [\n                  {\n                    text: `${fixD(item.totalProfit, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[1], this.coinList)}(${fixD(item.totalProfitRate, 2)}%)`,\n                  },\n                ],\n                // 持仓盈亏\n                [\n                  {\n                    text: `${fixD(item.positionProfit, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[1], this.coinList)}`,\n                  },\n                ],\n                // 年华收益率\n                [\n                  {\n                    text: `${fixD(item.annualizedYield, 2)}%`,\n                  },\n                ],\n                // 运行时长\n                [\n                  {\n                    text: this.setTime(item.startTime, item.endTime),\n                  },\n                ],\n                [\n                  {\n                    type: 'link',\n                    text: this.$t('trade.view'), // 详情\n                    eventType: 'gridDetail',\n                  },\n                ],\n              ],\n            };\n          } else if (this.filterGridStatus.toString() === '1') {\n            tableData = {\n              id: item.id,\n              data: [\n                formatTime(item.ctime),\n                [\n                  {\n                    text: `${getCoinShowName(symbolArr[0], this.coinList)}/${getCoinShowName(symbolArr[1], this.coinList)}`,\n                  },\n                ],\n                // 总投入\n                [\n                  {\n                    text: `${fixD(item.configParamMap.totalQuoteAmount, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[1], this.coinList)} + ${fixD(item.configParamMap.totalBaseAmount, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[0], this.coinList)}`,\n                  },\n                ],\n                // 已产生利润\n                [\n                  {\n                    text: `${fixD(item.totalProfit, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[1], this.coinList)}(${fixD(item.totalProfitRate, 2)}%)`,\n                  },\n                ],\n                // 持仓盈亏\n                [\n                  {\n                    text: `${fixD(item.positionProfit, this.fixValue.priceFix)}\n                      ${getCoinShowName(symbolArr[1], this.coinList)}`,\n                  },\n                ],\n                // 年华收益率\n                [\n                  {\n                    text: `${fixD(item.annualizedYield, 2)}%`,\n                  },\n                ],\n                // 运行时长\n                [\n                  {\n                    text: this.setTime(item.startTime),\n                  },\n                ],\n                [\n                  {\n                    type: 'link',\n                    text: this.$t('trade.view'), // 详情\n                    eventType: 'gridDetail',\n                  },\n                  {\n                    type: 'link',\n                    text: this.$t('gridTrade.close'), // 终止网格\n                    eventType: 'gridCancel',\n                    classes: 'grid_btn',\n                  },\n                ],\n              ],\n            };\n          }\n          if (tableData) {\n            newData.push(tableData);\n          }\n        });\n        return newData;\n      }\n      return [];\n    },\n    setTime(startTime, endTime) {\n      if (!Number(startTime)) {\n        return `0${this.$t('otcDetailOrder.day')}0${this.$t('gridTrade.hours')}0${this.$t('otcDetailOrder.min')}`;\n      }\n      let dateEnd = new Date().getTime();\n      if (endTime) {\n        dateEnd = endTime;\n      }\n      const dateDiff = dateEnd - startTime;// 时间差的毫秒数\n      const day = Math.floor(dateDiff / (24 * 3600 * 1000));// 计算出相差天数\\\n      const leave1 = dateDiff % (24 * 3600 * 1000); // 计算天数后剩余的毫秒数\n      const hours = Math.floor(leave1 / (3600 * 1000));// 计算出小时数\n      // 计算相差分钟数\n      const leave2 = leave1 % (3600 * 1000); // 计算小时数后剩余的毫秒数\n      const minutes = Math.floor(leave2 / (60 * 1000));// 计算相差分钟数\n      function s(t) {\n        return t < 10 && t > 0 ? `0${t}` : t;\n      }\n      return `${s(day)}${this.$t('otcDetailOrder.day')}${s(hours)}${this.$t('gridTrade.hours')}${s(minutes)}${this.$t('otcDetailOrder.min')}`;\n    },\n    elementClick(type, data) {\n      if (type === 'cancel') {\n        this.cancelOrderEvent(data);\n      } else if (type === 'gridDetail') {\n        this.gridItemId = data;\n        this.gridDoliog = true;\n      } else if (type === 'gridCancel') {\n        this.gridItemId = data;\n        this.gridCancelDoliog = true;\n      } else {\n        this.getSubTableData(data);\n      }\n    },\n    // 终止网格\n    gridCancelEvent() {\n      this.axios({\n        url: 'quant/stopStrategy',\n        hostType: 'quant',\n        method: 'post',\n        params: { strategyId: this.gridItemId },\n      }).then((rep) => {\n        if (rep.code.toString() === '0') {\n          this.getData();\n          // 重新请求资产\n          this.$store.dispatch('assetsExchangeData', {\n            auto: false,\n            coinSymbols: this.coinSymbols,\n          });\n          // 撤单成功 提示\n          this.$bus.$emit('tip', { text: rep.msg, type: 'success' });\n        } else {\n          this.$bus.$emit('tip', { text: rep.msg, type: 'error' });\n        }\n        this.gridCancelDoliog = false;\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"stylus\">\n.trade-market-index-container.trade-market .market-symbol .tbody {\n  height: 710px;\n}\n.trade-market-index-container.trade-market .market-symbol .grid_tbody {\n    height: 723px;\n}\n  .order_type {\n    margin-top: 29px;\n    background-color: #fff;\n    border-radius: 10px;\n    display flex;\n    align-items center;\n    padding 6px 26px;\n    border-bottom-width: 1px;\n    border-bottom-style: solid;\n  }\n  .order-conent {\n    margin-top: 29px;\n  }\n  .common-table {\n    background: none !important;\n  }\n  .tip_title {\n    line-height 16px;\n    margin-bottom 15px;\n  }\n  .tip_text {\n    font-size 12px;\n    line-height 18px;\n  }\n  .order_type_btn {\n    box-sizing border-box;\n    border-width: 1px;\n    border-style: solid;\n    padding 4px 20px;\n    cursor pointer;\n    font-size 12px;\n    line-height 14px;\n  }\n  .order_type_btn:nth-child(1) {\n    // border-right none;\n  }\n  .order_list-top .notData {\n    top 107px;\n  }\n  .trade-order-list {\n    .table-head {\n      background-color: rgba(228, 228, 228, .25) !important;\n      border-top-left-radius: 8px;\n      border-top-right-radius: 8px;\n      border-bottom: 0;\n      span {\n        font-weight: 600;\n        color: RGB(167, 180, 203);\n      }\n    }\n    .table-body {\n        background-color: #fff !important;\n    }\n    .table-body td .grid_btn {\n      margin-left 0;\n    }\n  }\n  .pro-trade .order-list-box .gridOrder {\n    min-height 218px;\n  }\n  .Int-trade .order-list-box .order-conent.order-content_height {\n    height 313px;\n    .table-body {\n      min-height 280px;\n    }\n  }\n  .pro-trade .order-list-box .order-conent.pro-trade-order {\n    height 250px;\n  }\n</style>\n"],"sourceRoot":"app/view/src/components/modules/spotTrade/trade"}]}