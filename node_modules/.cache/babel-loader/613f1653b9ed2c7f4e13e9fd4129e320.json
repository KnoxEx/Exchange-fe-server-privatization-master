{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/register/register.js","dependencies":[{"path":"/Users/h/partTimeJob/BlockChain-ui-privatization/PC/common-mixin/register/register.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getCookie, setCookie, imgMap, colorMap } from '@/utils';\nimport countryMinix from \"../countryList/countryList\";\nexport default {\n  name: 'page-register',\n  mixins: [countryMinix],\n  data: function data() {\n    return {\n      imgMap: imgMap,\n      colorMap: colorMap,\n      nowType: 'phone',\n      // phone--手机注册  email--邮箱注册\n      userValue: '',\n      // user框 (手机号/邮箱）\n      checkValue: '',\n      // 验证码框\n      passValue: '',\n      // 密码框\n      comfirmValue: '',\n      // 确认密码框\n      invitedValue: '',\n      // 邀请码\n      verifyObj: {},\n      // 滑动返回对象\n      verifyFlag: false,\n      // 滑动是否通过\n      textFlag: false,\n      // 服务条款是否通过\n      textFlag2: false,\n      // 服务条款是否通过\n      textFlag3: false,\n      // 服务条款是否通过\n      submitLoading: false,\n      // 提交按钮loading\n      getCodeHaving: false,\n      // 验证码倒计时中（true为倒计时中）\n      getCodeMustCountry: false,\n      // 用于获取验证码时 打开所在地的错误\n      getCodeMustUser: false,\n      // 用于获取验证码时 user的错误\n      error10003: false,\n      dialogFlag: false,\n      // 弹窗\n      haveOption: false,\n      // 弹窗 极验/发送验证码\n      dialogConfirmLoading: false,\n      token: null,\n      urlHasinvitedCode: false,\n      lan: getCookie('lan')\n    };\n  },\n  watch: {\n    checkValue: function checkValue(newV) {\n      var _this = this;\n\n      if (newV.length === 6) {\n        this.$nextTick(function () {\n          _this.$bus.$emit('button-click', 'dialogConfirm');\n        });\n      }\n    },\n    loginFlag: function loginFlag(v) {\n      if (v) {\n        this.goHome();\n      }\n    },\n    loginRegistType: function loginRegistType(v) {\n      if (v) {\n        this.initNowType();\n      }\n    } // nowUserRegType: {\n    //   immediate: true,\n    //   handler(v) {\n    //     if (v[0] === 1) {\n    //       this.nowType = 'phone';\n    //     } else {\n    //       this.nowType = 'email';\n    //     }\n    //   },\n    // },\n\n  },\n  beforeMount: function beforeMount() {\n    if (this.$route.query.inviteCode) {\n      this.invitedValue = this.$route.query.inviteCode;\n      this.urlHasinvitedCode = true;\n    }\n\n    if (this.$route.query.email) {\n      this.userValue = this.$route.query.email;\n      this.nowType = 'email';\n    }\n\n    if (this.$route.query.phone) {\n      this.userValue = this.$route.query.phone;\n      this.nowType = 'phone';\n    }\n  },\n  computed: {\n    // userRegType() {\n    //   const { publicInfo } = this.$store.state.baseData;\n    //   let str = '{}';\n    //   if (publicInfo) {\n    //     if (publicInfo.switch && publicInfo.switch.user_reg_type) {\n    //       str = publicInfo.switch.user_reg_type;\n    //     }\n    //   }\n    //   return JSON.parse(str);\n    // },\n    // nowUserRegType() {\n    //   const lan = getCookie('lan');\n    //   let arr = [1, 2];\n    //   if (this.userRegType[lan]) {\n    //     arr = this.userRegType[lan];\n    //   }\n    //   return arr;\n    // },\n    templateType: function templateType() {\n      return this.$store.state.baseData.templateLayoutType;\n    },\n    isInternationTem: function isInternationTem() {\n      return this.$store.state.baseData.templateLayoutType === '2';\n    },\n    dialogConfirmDisabled: function dialogConfirmDisabled() {\n      if (!this.checkFlag && !this.dialogConfirmLoading) return true;\n      return false;\n    },\n    coinsKrwOpen: function coinsKrwOpen() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var str = '';\n\n      if (publicInfo) {\n        if (publicInfo.switch && publicInfo.switch.register_cms_style) {\n          str = publicInfo.switch.register_cms_style.toString();\n        } else {\n          str = '0';\n        }\n      }\n\n      return str;\n    },\n    // 是否展示tab切换\n    tabFlag: function tabFlag() {\n      var flag = false; // if (this.nowUserRegType.length !== 1) {\n\n      if (this.loginRegistType === '1') {\n        flag = true;\n      }\n\n      return flag;\n    },\n    // 开启验证方式\n    loginRegistType: function loginRegistType() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var str = '1'; // 1 手机/邮箱， 2 仅手机， 3 仅邮箱\n\n      if (publicInfo && publicInfo.switch && publicInfo.switch.login_regist_type) {\n        str = publicInfo.switch.login_regist_type.toString();\n      }\n\n      return str;\n    },\n    publicInfo: function publicInfo() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      return publicInfo;\n    },\n    tabList: function tabList() {\n      var list = [// 手机号注册\n      {\n        name: this.$t('register.phoneRegister'),\n        key: 'phone'\n      }, // 邮箱注册\n      {\n        name: this.$t('register.emailRegister'),\n        key: 'email'\n      }];\n\n      if (this.lan === 'zh_CN' || this.lan === 'el_GR') {\n        // }\n        // if (this.nowUserRegType[0] === 2) {\n        list = [// 邮箱注册\n        {\n          name: this.$t('register.emailRegister'),\n          key: 'email'\n        }, // 手机号注册\n        {\n          name: this.$t('register.phoneRegister'),\n          key: 'phone'\n        }];\n      }\n\n      return list;\n    },\n    loginFlag: function loginFlag() {\n      var _this$$store$state$ba = this.$store.state.baseData,\n          isLogin = _this$$store$state$ba.isLogin,\n          userInfoIsReady = _this$$store$state$ba.userInfoIsReady;\n\n      if (isLogin && userInfoIsReady) {\n        return true;\n      }\n\n      return false;\n    },\n    maxLength: function maxLength() {\n      var maxLength = '100';\n\n      if (this.nowType === 'phone') {\n        maxLength = '30';\n      }\n\n      return maxLength;\n    },\n    // 运营商名称\n    serverName: function serverName() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var code = '';\n\n      if (publicInfo && publicInfo.msg && publicInfo.msg.company_name) {\n        code = publicInfo.msg.company_name;\n      }\n\n      return code;\n    },\n    // 邀请码必填\n    mustInvited: function mustInvited() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n      var must = '0';\n\n      if (publicInfo && publicInfo.switch && publicInfo.switch.is_invitationCode_required === '1') {\n        must = '1';\n      }\n\n      return must;\n    },\n    // 是否开启滑动验证\n    mustVerify: function mustVerify() {\n      var publicInfo = this.$store.state.baseData.publicInfo;\n\n      if (this.error10003) {\n        return true;\n      }\n\n      if (publicInfo && publicInfo.switch && publicInfo.switch.regist_must_check_open === '1') {\n        return true;\n      }\n\n      return false;\n    },\n    // 所在地验证框\n    countryFlag: function countryFlag() {\n      if (this.nowType === 'phone') {\n        return this.country.length;\n      }\n\n      return true;\n    },\n    regExps: function regExps() {\n      return this.$store.state.regExp;\n    },\n    // userValue 是否复合正则验证\n    userFlag: function userFlag() {\n      var reg = this.nowType === 'phone' ? this.regExps.phone : this.regExps.email;\n      return reg.test(this.userValue);\n    },\n    // checkValue 是否复合正则验证\n    checkFlag: function checkFlag() {\n      return this.regExps.verification.test(this.checkValue);\n    },\n    // passValue 是否复合正则验证\n    passFlag: function passFlag() {\n      return this.regExps.passWord.test(this.passValue);\n    },\n    // comfirmValue 是否两次密码输入一致\n    comfirmFlag: function comfirmFlag() {\n      return this.passValue === this.comfirmValue;\n    },\n    // invitedValue 是否复合正则验证\n    invitedFlag: function invitedFlag() {\n      if (this.mustInvited === '0') {\n        return true;\n      }\n\n      return this.regExps.nonEmpty.test(this.invitedValue);\n    },\n    //\n    countryErrorFlag: function countryErrorFlag() {\n      if (this.getCodeMustCountry) {\n        if (!this.countryFlag) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    // user框是否为错误状态\n    userErrorFlag: function userErrorFlag() {\n      if (this.getCodeMustUser) {\n        if (!this.userFlag) return true;\n      } else if (this.userValue.length !== 0 && !this.userFlag) return true;\n\n      return false;\n    },\n    // 验证框是否为错误\n    checkErrorFlag: function checkErrorFlag() {\n      if (this.checkValue.length !== 0 && !this.checkFlag) return true;\n      return false;\n    },\n    // pass框是否为错误状态\n    passErrorFlag: function passErrorFlag() {\n      if (this.passValue.length !== 0 && !this.passFlag) return true;\n      return false;\n    },\n    // comfirm框是否为错误状态\n    comfirmErrorFlag: function comfirmErrorFlag() {\n      if (this.comfirmValue.length !== 0 && !this.comfirmFlag) return true;\n      return false;\n    },\n    // 验证码框是否为错误状态\n    invitedErrorFlag: function invitedErrorFlag() {\n      if (this.invitedValue.length !== 0 && !this.invitedFlag) return true;\n      return false;\n    },\n    // 是否展示获取验证码\n    isShowGetCode: function isShowGetCode() {\n      // 如果强制开启滑动验证\n      if (this.mustVerify) {\n        // 滑动验证通过 或者 正在倒计时中\n        if (this.verifyFlag || this.getCodeHaving) {\n          return true;\n        }\n\n        return false;\n      }\n\n      return true;\n    },\n    // 登录button 禁用状态\n    submitDisabled: function submitDisabled() {\n      var countryFlag = this.countryFlag,\n          userFlag = this.userFlag,\n          passFlag = this.passFlag,\n          comfirmFlag = this.comfirmFlag,\n          invitedFlag = this.invitedFlag,\n          textFlag = this.textFlag,\n          textFlag2 = this.textFlag2,\n          submitLoading = this.submitLoading;\n      var cms = textFlag;\n\n      if (this.coinsKrwOpen === '1') {\n        cms = textFlag && textFlag2;\n      }\n\n      if (countryFlag && userFlag // && checkFlag\n      && passFlag && comfirmFlag && invitedFlag && cms || submitLoading) {\n        return false;\n      }\n\n      return true;\n    },\n    domKeys: function domKeys() {\n      if (this.nowType === 'phone') {\n        return {\n          userKey: 'phone-user',\n          verifyKey: 'phone-verify',\n          checkKey: 'phone-check',\n          passKey: 'phone-pass',\n          comfirmKey: 'phone-comfirm',\n          invitedKey: 'phone-invited'\n        };\n      }\n\n      return {\n        userKey: 'email-user',\n        verifyKey: 'email-verify',\n        checkKey: 'email-check',\n        passKey: 'email-pass',\n        comfirmKey: 'email-comfirm',\n        invitedKey: 'email-invited'\n      };\n    },\n    // 用户框和验证码框 文案和错误文案\n    domTexts: function domTexts() {\n      if (this.nowType === 'phone') {\n        return {\n          userText: this.$t('register.phone'),\n          // 手机号\n          userError: this.$t('register.phoneError'),\n          // 手机号输入格式不正确\n          codeText: this.$t('register.phoneCode'),\n          // 短信验证码\n          codeError: this.$t('register.phoneCodeError') // 请输入6位数字短信验证码\n\n        };\n      }\n\n      return {\n        userText: this.$t('register.email'),\n        // 邮箱\n        userError: this.$t('register.emailError'),\n        // 邮箱输入格式不正确\n        codeText: this.$t('register.emailCode'),\n        // 邮箱验证码\n        codeError: this.$t('register.emailCodeError') // 请输入6位数字邮箱验证码\n\n      };\n    },\n    // 邀请码\n    invitedText: function invitedText() {\n      if (this.mustInvited === '0') {\n        return this.$t('register.InvitationCodeOptional'); // '邀请码(选填)\n      }\n\n      return this.$t('register.InvitationCodeIsRequired'); // 邀请码\n    },\n    companyName: function companyName() {\n      if (this.publicInfo && this.publicInfo.msg) {\n        return this.publicInfo.msg.company_name;\n      }\n\n      return '';\n    },\n    singPassCode: function singPassCode() {\n      return this.$route.query.singPassCode;\n    },\n    singpassState: function singpassState() {\n      return this.$route.query.singPassState;\n    },\n    submitButtonText: function submitButtonText() {\n      if (this.singPassCode && this.singpassState) {\n        return this.$t('singPassLogin.mainText14');\n      }\n\n      return this.$t('register.register');\n    },\n    registerPageTitle: function registerPageTitle() {\n      if (this.singPassCode && this.singpassState) {\n        return this.$t('singPassLogin.mainText15');\n      }\n\n      return this.$t('register.WelcomeToRegister');\n    },\n    // 默认手机号\n    defaultCountryCode: function defaultCountryCode() {\n      var defaultCountryCode = this.$store.state.baseData.defaultCountryCode;\n      var defaultCountryCodeReal = this.$store.state.baseData.defaultCountryCodeReal;\n      var limitCountryList = this.limitCountryList;\n\n      if (limitCountryList.length > 0 && defaultCountryCode) {\n        var countryList = limitCountryList; // const countryCode = defaultCountryCode.replace('+', '');\n\n        var countryCodeReal = defaultCountryCodeReal.replace('+', '');\n\n        if (countryList.indexOf(countryCodeReal) > -1) {\n          defaultCountryCode = this.registerCountryList[0].keyCode;\n        }\n      }\n\n      return defaultCountryCode;\n    },\n    // 默认国家码\n    defaultCountryCodeReal: function defaultCountryCodeReal() {\n      var defaultCountryCodeReal = this.$store.state.baseData.defaultCountryCodeReal;\n      var limitCountryList = this.limitCountryList;\n\n      if (limitCountryList.length > 0) {\n        var countryList = limitCountryList;\n        var countryCode = defaultCountryCodeReal.replace(/\\+/g, '');\n\n        if (countryList.indexOf(countryCode) > -1) {\n          defaultCountryCodeReal = '';\n        }\n      }\n\n      return defaultCountryCodeReal;\n    }\n  },\n  methods: {\n    init: function init() {\n      var _this2 = this;\n\n      if (this.loginFlag) {\n        this.goHome();\n      }\n\n      this.$bus.$off('emailCode');\n      this.$bus.$on('emailCode', function (data) {\n        var newData = JSON.parse(JSON.stringify(data));\n        newData.callback = undefined;\n\n        _this2.axios({\n          url: 'v4/common/emailValidCode',\n          method: 'post',\n          header: {},\n          params: newData\n        }).then(function (info) {\n          data.callback(info);\n        }).catch(function () {});\n      });\n      this.$bus.$off('phoneCode');\n      this.$bus.$on('phoneCode', function (data) {\n        var newData = JSON.parse(JSON.stringify(data));\n        newData.callback = undefined;\n\n        _this2.axios({\n          url: 'v4/common/smsValidCode',\n          method: 'post',\n          header: {},\n          params: newData\n        }).then(function (info) {\n          data.callback(info);\n        }).catch(function () {// console.log(info);\n        });\n      });\n\n      if (this.loginRegistType) {\n        this.initNowType();\n      }\n    },\n    dialogClose: function dialogClose() {\n      this.dialogFlag = false;\n      this.checkValue = '';\n      this.haveOption = false;\n    },\n    dialogConfirm: function dialogConfirm() {\n      var _this3 = this;\n\n      this.dialogConfirmLoading = true;\n\n      if (this.nowType === 'phone') {\n        var params = {\n          smsCode: this.checkValue,\n          // 验证码\n          token: this.token\n        }; // 判断是否关联第三方登录账号\n\n        if (this.singPassCode && this.singpassState) {\n          params.singPassCode = this.singPassCode;\n        }\n\n        this.axios({\n          // url: 'v4/user/reg_mobile',\n          url: '/user/reg_mobile_confirm',\n          params: params,\n          headers: {},\n          method: 'post'\n        }).then(function (data) {\n          _this3.dialogConfirmLoading = false;\n\n          if (data.code.toString() === '0') {\n            if (window.location.search.indexOf('return') !== -1) {\n              var returnURL = window.location.search.substring(8);\n              window.location.href = unescape(returnURL);\n            } else if (data.data) {\n              var token = data.data.token;\n\n              if (token) {\n                // this.$router.push('/login');\n                // 登录成功，已登录\n                _this3.$bus.$emit('tip', {\n                  text: _this3.$t('register.registerSuccessQLogin'),\n                  type: 'success'\n                });\n\n                setCookie('token', token); // 存储cookie\n                // 获取 userinfo\n\n                _this3.$store.dispatch('getUserInfo');\n\n                _this3.$router.push('/');\n              } else {\n                // 注册成功, 请登录\n                _this3.$bus.$emit('tip', {\n                  text: _this3.$t('register.registerSuccess'),\n                  type: 'success'\n                });\n\n                _this3.$router.push('/login');\n              }\n            } else {\n              // 注册成功, 请登录\n              _this3.$bus.$emit('tip', {\n                text: _this3.$t('register.registerSuccess'),\n                type: 'success'\n              });\n\n              _this3.$router.push('/login');\n            }\n          } else {\n            _this3.$bus.$emit('tip', {\n              text: data.msg,\n              type: 'error'\n            });\n          }\n        });\n      } else {\n        var _params = {\n          emailCode: this.checkValue,\n          // 验证码\n          token: this.token\n        }; // 判断是否关联第三方登录账号\n\n        if (this.singPassCode && this.singpassState) {\n          _params.singPassCode = this.singPassCode;\n        }\n\n        this.axios({\n          // url: 'v4/user/reg_mobile',\n          url: '/user/reg_email_confirm',\n          params: _params,\n          headers: {},\n          method: 'post'\n        }).then(function (data) {\n          _this3.dialogConfirmLoading = false;\n\n          if (data.code.toString() === '0') {\n            // 注册成功, 已登录\n            if (window.location.search.indexOf('return') !== -1) {\n              var returnURL = window.location.search.substring(8);\n              window.location.href = unescape(returnURL);\n            } else if (data.data) {\n              var token = data.data.token;\n\n              if (token) {\n                _this3.$bus.$emit('tip', {\n                  text: _this3.$t('register.registerSuccessQLogin'),\n                  type: 'success'\n                });\n\n                setCookie('token', token);\n\n                _this3.$store.dispatch('getUserInfo');\n\n                _this3.$router.push('/');\n              } else {\n                _this3.$bus.$emit('tip', {\n                  text: _this3.$t('register.registerSuccess'),\n                  type: 'success'\n                });\n\n                _this3.$router.push('/login');\n              }\n            } else {\n              _this3.$bus.$emit('tip', {\n                text: _this3.$t('register.registerSuccess'),\n                type: 'success'\n              });\n\n              _this3.$router.push('/login');\n            }\n          } else {\n            _this3.$bus.$emit('tip', {\n              text: data.msg,\n              type: 'error'\n            });\n          }\n        });\n      }\n    },\n    buttonClick: function buttonClick() {\n      this.dialogFlag = true;\n    },\n    initNowType: function initNowType() {\n      if (this.loginRegistType === '3') {\n        this.nowType = 'email';\n      } else {\n        this.nowType = 'phone';\n      } // if (this.lan === 'zh_CN' || this.lan === 'el_GR') {\n      //   this.nowType = 'phone';\n      // } else {\n      //   this.nowType = 'email';\n      // }\n\n    },\n    goUrl: function goUrl(url) {\n      // 如果是第三方注册 跳转到登录也是第三方登录\n      if (url === '/login' && this.singPassCode && this.singpassState) {\n        this.$router.push(\"\".concat(url, \"?code=\").concat(this.singPassCode, \"&state=\").concat(this.singpassState, \"&source=reg\"));\n      } else {\n        this.$router.push(url);\n      }\n    },\n    goHome: function goHome() {\n      this.$router.push('/');\n    },\n    // tab切换\n    setNowType: function setNowType(type) {\n      if (this.submitLoading) {\n        return;\n      } // 如果正在提交禁止切换\n\n\n      if (type === this.nowType) {\n        return;\n      }\n\n      if (this.verifyObj.nc) {\n        this.verifyObj.nc.reset();\n      }\n\n      this.country = this.defaultCountryCodeReal ? this.defaultCountryCodeReal : this.countryMap[this.defaultCountryCode].code; // 所在地\n\n      this.countryKeyCode = this.defaultCountryCode ? this.defaultCountryCode : ''; // 所在地\n\n      this.userValue = ''; // user框 (手机号/邮箱）\n\n      this.checkValue = ''; // 验证码框\n\n      this.passValue = ''; // 密码框\n\n      this.comfirmValue = ''; // 确认密码框\n\n      this.invitedValue = ''; // 清楚邀请码\n\n      this.verifyObj = {}; // 滑动返回对象\n\n      this.verifyFlag = false; // 滑动是否通过\n\n      this.textFlag = false; // 清服务条款\n\n      this.nowType = type;\n      this.getCodeHaving = false;\n      this.getCodeMustCountry = false; // 获取验证码时 关闭所在地的错误\n\n      this.getCodeMustUser = false; // 获取验证码时 关闭user框的错误\n\n      this.error10003 = false;\n\n      if (this.$route.query.inviteCode) {\n        this.invitedValue = this.$route.query.inviteCode;\n      }\n\n      if (this.$route.query.email && this.nowType === 'email') {\n        this.userValue = this.$route.query.email;\n      }\n    },\n    // input onchanges事件\n    inputChanges: function inputChanges(value, name) {\n      this[name] = value;\n    },\n    // user框获取焦点\n    userFocus: function userFocus() {\n      this.getCodeMustUser = false;\n    },\n    // 手机号所在地框获取焦点\n    countryFocus: function countryFocus(v) {\n      if (v) {\n        this.getCodeMustCountry = false;\n      }\n    },\n    // 提交\n    submit: function submit() {\n      var _this4 = this;\n\n      // this.submitLoading = true;\n      var ajaxUrl = '/user/reg_email_chk_info';\n\n      var objData = _objectSpread(_objectSpread({}, this.verifyObj), {}, {\n        // 滑动验证\n        nc: undefined,\n        loginPword: this.passValue,\n        // 密码\n        newPassword: this.comfirmValue,\n        // 新密码\n        invitedCode: this.invitedValue // 邀请码\n\n      });\n\n      if (this.nowType === 'phone') {\n        ajaxUrl = '/user/reg_mobile_chk_info';\n        objData.countryCode = this.countryKeyCode; // 国家编号\n\n        objData.mobileNumber = this.userValue; // 手机号\n      } else {\n        objData.email = this.userValue; // 邮箱\n      }\n\n      this.axios({\n        // url: 'v4/user/reg_mobile',\n        url: ajaxUrl,\n        params: objData,\n        headers: {},\n        method: 'post'\n      }).then(function (data) {\n        // this.submitLoading = false;\n        if (data.code.toString() === '0') {\n          _this4.token = data.data.token;\n          _this4.haveOption = true;\n\n          _this4.$nextTick(function () {\n            _this4.getCodeClick();\n          });\n        } else {\n          _this4.$bus.$emit('tip', {\n            text: data.msg,\n            type: 'error'\n          });\n\n          _this4.dialogFlag = false;\n        }\n      });\n    },\n    // 点击获取验证码\n    getCodeClick: function getCodeClick() {\n      // 发送验证码\n      this.sendCode(); // this.verifyObj = {};\n      // this.verifyFlag = false;\n      // 倒计时开始\n\n      this.$bus.$emit('getCode-start', 'registerGetcode'); // 获取验证码计时开始\n\n      this.getCodeHaving = true;\n    },\n    // 倒计时重置\n    getCodeClear: function getCodeClear() {\n      // 获取验证码计时结束\n      this.getCodeHaving = false;\n    },\n    // 发送短信/邮箱\n    sendCode: function sendCode() {\n      var _this5 = this;\n\n      if (this.nowType === 'phone') {\n        var countryCode = this.countryKeyCode; // 区号\n\n        this.$bus.$emit('phoneCode', {\n          token: this.token,\n          countryCode: countryCode,\n          // 区号\n          // mobile: this.userValue, // 手机号\n          operationType: '1',\n          // 模版\n          callback: function callback(data) {\n            if (data.code.toString() === '0') {\n              // 短信已发送，请注意查收\n              _this5.$bus.$emit('tip', {\n                text: _this5.$t('register.phoneSendSuccess'),\n                type: 'success'\n              });\n            } else if (data.code.toString() === '10003') {\n              if (_this5.error10003) {\n                _this5.$bus.$emit('tip', {\n                  text: data.msg,\n                  type: 'error'\n                });\n              } else {\n                _this5.error10003 = true; // 请滑动安全验证后再获取验证码\n\n                _this5.$bus.$emit('tip', {\n                  text: _this5.$t('register.scrollCode'),\n                  type: 'warning'\n                });\n              } // 倒计时重置\n\n\n              _this5.$bus.$emit('getCode-clear', 'registerGetcode');\n            } else {\n              // 倒计时重置\n              _this5.$bus.$emit('getCode-clear', 'registerGetcode'); // tip框提示错误\n\n\n              _this5.$bus.$emit('tip', {\n                text: data.msg,\n                type: 'error'\n              });\n            }\n          }\n        });\n      } else if (this.nowType === 'email') {\n        this.$bus.$emit('emailCode', {\n          token: this.token,\n          // ...this.verifyObj, // 滑动验证\n          // nc: undefined,\n          // email: this.userValue, // 邮箱\n          operationType: '1',\n          callback: function callback(data) {\n            if (data.code.toString() === '0') {\n              // 邮件已发送，请注意查收\n              _this5.$bus.$emit('tip', {\n                text: _this5.$t('register.emailSendSuccess'),\n                type: 'success'\n              });\n            } else if (data.code.toString() === '10003') {\n              if (_this5.error10003) {\n                // tip框提示错误\n                _this5.$bus.$emit('tip', {\n                  text: data.msg,\n                  type: 'error'\n                });\n              } else {\n                _this5.error10003 = true; // 请滑动安全验证后再获取验证码\n\n                _this5.$bus.$emit('tip', {\n                  text: _this5.$t('register.scrollCode'),\n                  type: 'warning'\n                });\n              } // 倒计时重置\n\n\n              _this5.$bus.$emit('getCode-clear', 'registerGetcode');\n            } else {\n              // 倒计时重置\n              _this5.$bus.$emit('getCode-clear', 'registerGetcode'); // tip框提示错误\n\n\n              _this5.$bus.$emit('tip', {\n                text: data.msg,\n                type: 'error'\n              });\n            }\n          }\n        });\n      }\n    },\n    // 滑动验证回调\n    verifyCallBack: function verifyCallBack(parameter) {\n      this.verifyObj = parameter;\n      this.verifyFlag = true;\n      this.submit();\n    },\n    // 同意服务条款\n    checkoutClick: function checkoutClick(flag) {\n      this.textFlag = flag;\n    },\n    // 同意服务条款\n    checkoutClick2: function checkoutClick2(flag) {\n      this.textFlag2 = flag;\n    },\n    // 同意服务条款\n    checkoutClick3: function checkoutClick3(flag) {\n      this.textFlag3 = flag;\n    }\n  }\n};",null]}