{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/Downloads/blockchain-ui-privatization/PC/components/textArea_line/TextAreaLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/Downloads/blockchain-ui-privatization/PC/components/textArea_line/TextAreaLine.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: 'c-textAreaLine',\r\n  mounted() {\r\n    const that = this;\r\n    function makeExpandingArea(el) {\r\n      const setStyle = (ev) => {\r\n        that.$refs.textarea.style.height = 'auto';\r\n        that.$refs.textarea.style.height = `${ev.scrollHeight}px`;\r\n        that.$refs.area_line_inp.style.height = `${ev.scrollHeight}px`;\r\n      };\r\n      // const delayedResize = (ev) => {\r\n      //   window.setTimeout(() => {\r\n      //     setStyle(ev);\r\n      //   },\r\n      //   0);\r\n      // };\r\n      if (el.addEventListener) {\r\n        el.addEventListener(\r\n          'input',\r\n          () => {\r\n            setStyle(el);\r\n          },\r\n          false,\r\n        );\r\n        setStyle(el);\r\n      } else if (el.attachEvent) {\r\n        el.attachEvent('onpropertychange', () => {\r\n          setStyle(el);\r\n        });\r\n        setStyle(el);\r\n      }\r\n      // if (window.VBArray && window.addEventListener) { // IE9\r\n      //   el.attachEvent('onkeydown', () => {\r\n      //     const key = window.event.keyCode;\r\n      //     if (key === 8 || key === 46) delayedResize(el);\r\n      //   });\r\n      //   el.attachEvent('oncut', () => {\r\n      //     delayedResize(el);\r\n      //   }); // 处理粘贴\r\n      // }\r\n    }\r\n    makeExpandingArea(this.$refs.textarea);\r\n  },\r\n  data() {\r\n    return {\r\n      isFocus: false, // 是否获取焦点\r\n      isHover: false, // 是否划过\r\n      inputWidth: 0, // input宽度\r\n      slotWidth: 0,\r\n      focusTime: null,\r\n      nowType: 'text',\r\n    };\r\n  },\r\n  props: {\r\n    maxLength: { default: '500', type: String }, // 最大长度\r\n    name: { default: '', type: String }, // 名称标识\r\n    className: { default: '', type: String }, // class根容器\r\n    value: { default: '', type: String }, // 外部 v-model 传入的植\r\n    width: { default: '100%', type: String }, // 该容器根容器 width属性 (***务必加单位***)\r\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性 (***务必加单位***)\r\n    inputType: { default: 'text', type: String }, // input框 type属性\r\n    promptText: { default: '', type: String }, // 提示文案\r\n    disabled: { default: false, type: Boolean }, // 是否为只读\r\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\r\n    errorText: { default: '', type: String }, // 错误文案\r\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\r\n    warningText: { default: '', type: String }, // 是否有警示文案\r\n  },\r\n  created() {\r\n    this.$bus.$off('textarea-focus');\r\n    this.$bus.$on('textarea-focus', (name) => {\r\n      if (name === this.name) {\r\n        this.$refs.textarea.focus();\r\n      }\r\n    });\r\n  },\r\n  computed: {\r\n    curValue: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(v) {\r\n        const value = v;\r\n        // 限制空格\r\n        // if (value.indexOf(' ') !== -1) {\r\n        //   const arr = value.split(' ');\r\n        //   let str = '';\r\n        //   arr.forEach((item) => { str += item; });\r\n        //   value = str;\r\n        //   this.$forceUpdate();\r\n        // }\r\n        this.$emit('onchanges', value, this.name);\r\n      },\r\n    },\r\n    warningFlag() {\r\n      let flag = false;\r\n      if (this.warningText.length) {\r\n        if (!(this.errorFlag && !this.isFocus)) {\r\n          flag = true;\r\n        }\r\n      }\r\n      return flag;\r\n    },\r\n    // 根容器 行内样式\r\n    contentStyle() {\r\n      return {\r\n        width: this.width,\r\n        marginTop: this.marginTop,\r\n      };\r\n    },\r\n    // 基础占位容器 class\r\n    baseStanceClass() {\r\n      // 禁止时\r\n      if (this.disabled) {\r\n        return 'input-line-baseStance-disabled';\r\n      }\r\n      // 错误时\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        return 'input-line-baseStance-error';\r\n      }\r\n      return '';\r\n    },\r\n    // 提示文案 class\r\n    promptClass() {\r\n      let className = '';\r\n      let color = 'b-2-cl';\r\n      if (this.isFocus || this.value.length) {\r\n        className += 'input-line-prompt-active';\r\n      }\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        color = 'b-6-cl';\r\n      }\r\n      return `${className} ${color}`;\r\n    },\r\n    // 下横线 class\r\n    activeLineClass() {\r\n      let className = 'a-12-bg';\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        className = 'a-19-bg';\r\n      }\r\n      return className;\r\n    },\r\n    // 下横线 行内样式\r\n    activeLineStyle() {\r\n      let width = 0;\r\n      // input划过 / input聚焦 / 错误文案显示 时 下划线展示\r\n      if (this.isHover || this.isFocus || (this.errorHave && this.errorFlag)) {\r\n        width = '100%';\r\n      }\r\n      if (this.disabled) {\r\n        width = 0;\r\n      }\r\n      return {\r\n        width,\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    promptClick() {\r\n      if (this.focusTime) {\r\n        const nowTime = new Date().getTime();\r\n        if (nowTime - this.focusTime > 200) {\r\n          this.$refs.textarea.focus();\r\n          this.focusTime = null;\r\n        }\r\n      } else {\r\n        this.$refs.textarea.focus();\r\n      }\r\n    },\r\n    // input 鼠标划入\r\n    handMouseenter() {\r\n      this.isHover = true;\r\n    },\r\n    // input 鼠标划出\r\n    handMouseleave() {\r\n      this.isHover = false;\r\n    },\r\n    // input 获取焦点\r\n    handFocus() {\r\n      this.nowType = this.inputType;\r\n      this.$emit('focus', this.name);\r\n      this.isFocus = true;\r\n    },\r\n    // input 失去焦点\r\n    handBlur() {\r\n      this.focusTime = new Date().getTime();\r\n      this.$emit('blur', this.name);\r\n      this.isFocus = false;\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["TextAreaLine.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"TextAreaLine.vue","sourceRoot":"../../Downloads/blockchain-ui-privatization/PC/components/textArea_line","sourcesContent":["// Created by 任泽阳 on 18/12/05. // 多行文本输入框\r\n<template>\r\n  <section class='area-line-content' :style='contentStyle' :class='className'>\r\n    <!-- 基础占位 46px 包含下划线 -->\r\n    <div\r\n      class='input-line-baseStance a-2-bd'\r\n      :class='baseStanceClass'\r\n      ref='baseStance'\r\n    >\r\n      <div\r\n        class='input_line_inp'\r\n        ref='area_line_inp'\r\n        @mouseenter='handMouseenter'\r\n        @mouseout='handMouseleave'\r\n      >\r\n        <!-- 输入框 -->\r\n        <textarea\r\n          :maxlength='maxLength'\r\n          class='common-textarea b-1-cl'\r\n          :type='nowType'\r\n          required='true'\r\n          v-model='curValue'\r\n          :disabled='disabled'\r\n          @focus='handFocus'\r\n          @blur='handBlur'\r\n          ref='textarea'\r\n          rows='1'\r\n          autocomplete='off'\r\n        ></textarea>\r\n        <div class='input-line-slot clearfix' ref='slot'>\r\n          <slot />\r\n        </div>\r\n        <svg class='icon icon-14 area-icon' aria-hidden='true' v-if='!disabled'>\r\n          <use xlink:href='#icon-a_18'></use>\r\n        </svg>\r\n      </div>\r\n      <!-- 提示信息 -->\r\n      <label\r\n        class='input-line-prompt'\r\n        :class='promptClass'\r\n        @click='promptClick'\r\n        >{{ promptText }}</label\r\n      >\r\n      <!-- 选中时横线 -->\r\n      <span\r\n        class='input-line-activeLine'\r\n        :class='activeLineClass'\r\n        :style='activeLineStyle'\r\n      ></span>\r\n      <!-- 只读时 -->\r\n    </div>\r\n    <!-- 错误文案占位 24px -->\r\n    <div class='input-line-errorStence' v-if='errorHave'>\r\n      <!-- 错误信息容器 -->\r\n      <p class='input-line-error b-6-cl' v-if='errorFlag && !isFocus'>\r\n        {{ errorText }}\r\n      </p>\r\n      <!-- 警示文案 -->\r\n      <p class='input-line-warning' v-else-if='warningFlag'>\r\n        {{ warningText }}\r\n      </p>\r\n    </div>\r\n    <!-- 底部提示框 -->\r\n    <div class='input-line-limit'></div>\r\n  </section>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'c-textAreaLine',\r\n  mounted() {\r\n    const that = this;\r\n    function makeExpandingArea(el) {\r\n      const setStyle = (ev) => {\r\n        that.$refs.textarea.style.height = 'auto';\r\n        that.$refs.textarea.style.height = `${ev.scrollHeight}px`;\r\n        that.$refs.area_line_inp.style.height = `${ev.scrollHeight}px`;\r\n      };\r\n      // const delayedResize = (ev) => {\r\n      //   window.setTimeout(() => {\r\n      //     setStyle(ev);\r\n      //   },\r\n      //   0);\r\n      // };\r\n      if (el.addEventListener) {\r\n        el.addEventListener(\r\n          'input',\r\n          () => {\r\n            setStyle(el);\r\n          },\r\n          false,\r\n        );\r\n        setStyle(el);\r\n      } else if (el.attachEvent) {\r\n        el.attachEvent('onpropertychange', () => {\r\n          setStyle(el);\r\n        });\r\n        setStyle(el);\r\n      }\r\n      // if (window.VBArray && window.addEventListener) { // IE9\r\n      //   el.attachEvent('onkeydown', () => {\r\n      //     const key = window.event.keyCode;\r\n      //     if (key === 8 || key === 46) delayedResize(el);\r\n      //   });\r\n      //   el.attachEvent('oncut', () => {\r\n      //     delayedResize(el);\r\n      //   }); // 处理粘贴\r\n      // }\r\n    }\r\n    makeExpandingArea(this.$refs.textarea);\r\n  },\r\n  data() {\r\n    return {\r\n      isFocus: false, // 是否获取焦点\r\n      isHover: false, // 是否划过\r\n      inputWidth: 0, // input宽度\r\n      slotWidth: 0,\r\n      focusTime: null,\r\n      nowType: 'text',\r\n    };\r\n  },\r\n  props: {\r\n    maxLength: { default: '500', type: String }, // 最大长度\r\n    name: { default: '', type: String }, // 名称标识\r\n    className: { default: '', type: String }, // class根容器\r\n    value: { default: '', type: String }, // 外部 v-model 传入的植\r\n    width: { default: '100%', type: String }, // 该容器根容器 width属性 (***务必加单位***)\r\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性 (***务必加单位***)\r\n    inputType: { default: 'text', type: String }, // input框 type属性\r\n    promptText: { default: '', type: String }, // 提示文案\r\n    disabled: { default: false, type: Boolean }, // 是否为只读\r\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\r\n    errorText: { default: '', type: String }, // 错误文案\r\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\r\n    warningText: { default: '', type: String }, // 是否有警示文案\r\n  },\r\n  created() {\r\n    this.$bus.$off('textarea-focus');\r\n    this.$bus.$on('textarea-focus', (name) => {\r\n      if (name === this.name) {\r\n        this.$refs.textarea.focus();\r\n      }\r\n    });\r\n  },\r\n  computed: {\r\n    curValue: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(v) {\r\n        const value = v;\r\n        // 限制空格\r\n        // if (value.indexOf(' ') !== -1) {\r\n        //   const arr = value.split(' ');\r\n        //   let str = '';\r\n        //   arr.forEach((item) => { str += item; });\r\n        //   value = str;\r\n        //   this.$forceUpdate();\r\n        // }\r\n        this.$emit('onchanges', value, this.name);\r\n      },\r\n    },\r\n    warningFlag() {\r\n      let flag = false;\r\n      if (this.warningText.length) {\r\n        if (!(this.errorFlag && !this.isFocus)) {\r\n          flag = true;\r\n        }\r\n      }\r\n      return flag;\r\n    },\r\n    // 根容器 行内样式\r\n    contentStyle() {\r\n      return {\r\n        width: this.width,\r\n        marginTop: this.marginTop,\r\n      };\r\n    },\r\n    // 基础占位容器 class\r\n    baseStanceClass() {\r\n      // 禁止时\r\n      if (this.disabled) {\r\n        return 'input-line-baseStance-disabled';\r\n      }\r\n      // 错误时\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        return 'input-line-baseStance-error';\r\n      }\r\n      return '';\r\n    },\r\n    // 提示文案 class\r\n    promptClass() {\r\n      let className = '';\r\n      let color = 'b-2-cl';\r\n      if (this.isFocus || this.value.length) {\r\n        className += 'input-line-prompt-active';\r\n      }\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        color = 'b-6-cl';\r\n      }\r\n      return `${className} ${color}`;\r\n    },\r\n    // 下横线 class\r\n    activeLineClass() {\r\n      let className = 'a-12-bg';\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        className = 'a-19-bg';\r\n      }\r\n      return className;\r\n    },\r\n    // 下横线 行内样式\r\n    activeLineStyle() {\r\n      let width = 0;\r\n      // input划过 / input聚焦 / 错误文案显示 时 下划线展示\r\n      if (this.isHover || this.isFocus || (this.errorHave && this.errorFlag)) {\r\n        width = '100%';\r\n      }\r\n      if (this.disabled) {\r\n        width = 0;\r\n      }\r\n      return {\r\n        width,\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    promptClick() {\r\n      if (this.focusTime) {\r\n        const nowTime = new Date().getTime();\r\n        if (nowTime - this.focusTime > 200) {\r\n          this.$refs.textarea.focus();\r\n          this.focusTime = null;\r\n        }\r\n      } else {\r\n        this.$refs.textarea.focus();\r\n      }\r\n    },\r\n    // input 鼠标划入\r\n    handMouseenter() {\r\n      this.isHover = true;\r\n    },\r\n    // input 鼠标划出\r\n    handMouseleave() {\r\n      this.isHover = false;\r\n    },\r\n    // input 获取焦点\r\n    handFocus() {\r\n      this.nowType = this.inputType;\r\n      this.$emit('focus', this.name);\r\n      this.isFocus = true;\r\n    },\r\n    // input 失去焦点\r\n    handBlur() {\r\n      this.focusTime = new Date().getTime();\r\n      this.$emit('blur', this.name);\r\n      this.isFocus = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style lang='stylus'>\r\n.area-line-content {\r\n  .common-textarea {\r\n    resize:none;\r\n    line-height: 30px;\r\n    width: 380px;\r\n    max-height: 150px;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n  // 基础占位容器 (默认)\r\n  .input-line-baseStance {\r\n    // height: 30px;\r\n    padding-top: 14px;\r\n    // box-sizing: border-box;\r\n    border-bottom-width: 2px;\r\n    border-bottom-style: solid;\r\n    position: relative;\r\n    .area-icon {\r\n      position: absolute;\r\n      right: 0;\r\n      bottom: 0;\r\n    }\r\n    // 输入框\r\n    .input_line_inp {\r\n      // position: absolute;\r\n      bottom: 0px;\r\n      // z-index: 2;\r\n      width: 100%;\r\n      border: 0px;\r\n      font-size: 14px;\r\n      // height: 30px;\r\n      background: none;\r\n      max-height: 150px;\r\n      // box-sizing: border-box;\r\n      // outline: none;\r\n      textarea {\r\n        // height: 30px;\r\n        width: 100%;\r\n        font-size: 14px;\r\n        position: absolute;\r\n        bottom: 0;\r\n      }\r\n      textarea::-webkit-scrollbar {\r\n        display: none;\r\n      }\r\n      .input-line-slot {\r\n        float: left;\r\n        display: inline-block;\r\n        position: absolute;\r\n        height: auto;\r\n        right: 0;\r\n        bottom: 0;\r\n      }\r\n    }\r\n    // 提示文案容器\r\n    .input-line-prompt {\r\n      cursor: text;\r\n      z-index: 1;\r\n      position: absolute;\r\n      height: 30px;\r\n      line-height: 30px;\r\n      top: 14px;\r\n      left: 0;\r\n      font-size: 14px;\r\n      -webkit-transition: 0.3s;\r\n      transition: 0.3s;\r\n      user-select:none;\r\n    }\r\n    // input聚焦/具有文本 时 提示文案浮起\r\n    .input-line-prompt-active {\r\n      cursor: auto;\r\n      font-size: 12px;\r\n      -ms-transform: translateY(-20px);\r\n      -webkit-transform: translateY(-20px);\r\n      transform: translateY(-20px);\r\n    }\r\n    // 下划线动效容器\r\n    .input-line-activeLine {\r\n      position: absolute;\r\n      z-index: 3;\r\n      // top: 43px;\r\n      bottom: -2px;\r\n      height: 2px;\r\n      width: 0;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      display: inline-block;\r\n      transition: 0.5s;\r\n      -webkit-transition: 0.5s;\r\n      -ms-transition: 0.5s;\r\n      animation-delay: 0.5s\r\n      -webkit-animation-delay: 0.5s\r\n      -ms-animation-delay: 0.5s\r\n    }\r\n  }\r\n  // 基础占位容器 (禁用时)\r\n  .input-line-baseStance-disabled {\r\n    border-bottom-width: 2px;\r\n    border-bottom-style: dotted;\r\n    .input-line-prompt-active {\r\n      cursor: no-drop;\r\n    }\r\n    textarea {\r\n      cursor: no-drop;\r\n    }\r\n  }\r\n  // 基础占位容器 (错误时)\r\n  .input-line-baseStance-error {\r\n    // 提示文案容器 (错误时)\r\n    .input-line-prompt {\r\n      animation: shake 0.6s cubic-bezier(0.25, 0.8, 0.5, 1);\r\n    }\r\n  }\r\n  // 错误信息占位容器\r\n  .input-line-errorStence {\r\n    height: 24px;\r\n    position: relative;\r\n    // 错误文案容器\r\n    .input-line-error {\r\n      position: absolute;\r\n      top: 2px;\r\n      margin: 0;\r\n      font-size: 12px;\r\n      user-select:none;\r\n    }\r\n    // 警示框\r\n    .input-line-warning {\r\n      position: absolute;\r\n      bottom: 5px;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  .input_line_inp:focus+.input-line-prompt,\r\n  .input_line_inp:valid+.input-line-prompt {\r\n  }\r\n  // 错误 label 抖动 动画\r\n  @-webkit-keyframes shake {\r\n    59% {\r\n      margin-left: 0;\r\n    }\r\n    60%, 80% {\r\n      margin-left: 2px;\r\n    }\r\n    70%, 90% {\r\n      margin-left: -2px;\r\n    }\r\n  }\r\n  @keyframes shake {\r\n    59% {\r\n      margin-left: 0;\r\n    }\r\n    60%, 80% {\r\n      margin-left: 2px;\r\n    }\r\n    70%, 90% {\r\n      margin-left: -2px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}