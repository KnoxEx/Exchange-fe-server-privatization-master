{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/calculateVolume.js","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/common-mixin/modules/coTrade/tradeForm/calculateVolume.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport { fixD, division, cut, nul } from '@/utils';\nexport default {\n  name: 'tradeFormCalculateVolume',\n  computed: {\n    // 用户信息配置-可持有仓位上限\n    leverOriginCeiling: function leverOriginCeiling() {\n      if (this.userConfig) {\n        return this.userConfig.leverOriginCeiling;\n      }\n\n      return null;\n    },\n    // 当前合约最大可开额度\n    setMaxNumber: function setMaxNumber() {\n      var num = 0;\n\n      if (this.leverOriginCeiling) {\n        var keyArr = Object.keys(this.leverOriginCeiling);\n        keyArr.sort(function (a, b) {\n          return parseFloat(a) - parseFloat(b);\n        });\n        var nextL = 0;\n\n        for (var index = 0; index < keyArr.length; index += 1) {\n          if (Number(this.nowLevel) > nextL && Number(this.nowLevel) <= keyArr[index]) {\n            num = this.leverOriginCeiling[keyArr[index]];\n          }\n\n          nextL = keyArr[index];\n        } // 标的货币\n\n\n        return num;\n      }\n\n      return num;\n    },\n    // 持仓列表\n    positionList: function positionList() {\n      return this.$store.state.future.positionList || [];\n    },\n    // 普通委托列表\n    currentOrderLis: function currentOrderLis() {\n      return this.$store.state.future.currentOrderLis || [];\n    },\n    // 获取当前合约同方向持仓仓位价值\n    positionMaxBalance: function positionMaxBalance() {\n      var _this = this;\n\n      var value = {\n        buy: 0,\n        sell: 0\n      };\n\n      if (this.positionList.length) {\n        this.positionList.forEach(function (item) {\n          if (_this.contractId === item.contractId) {\n            // if (item.orderSide === 'BUY') {\n            value.buy += item.positionBalance; // } else {\n\n            value.sell += item.positionBalance; // }\n          }\n        });\n      }\n\n      return value;\n    },\n    // 当前合约同方向未成交委托价值\n    orderMaxBalance: function orderMaxBalance() {\n      var _this2 = this;\n\n      var value = {\n        buy: 0,\n        sell: 0\n      };\n\n      if (this.currentOrderLis.length) {\n        this.currentOrderLis.forEach(function (item) {\n          if (_this2.contractId === item.contractId && item.open === 'OPEN') {\n            // if (item.side === 'BUY') {\n            value.buy += item.orderBalance; // } else {\n\n            value.sell += item.orderBalance; // }\n          }\n        });\n      }\n\n      return value;\n    },\n    // 计算\n    // 当前合约最大可开额度-当前合约同方向持仓仓位价值-当前合约同方向未成交委托价值\n    V1Buy: function V1Buy() {\n      return cut(cut(this.setMaxNumber, this.positionMaxBalance.buy), this.orderMaxBalance.buy);\n    },\n    V1Sell: function V1Sell() {\n      return cut(cut(this.setMaxNumber, this.positionMaxBalance.sell), this.orderMaxBalance.sell);\n    },\n    // 价格取值规则：\n    // 委托价格为限价：用户设置的限价价格\n    // 委托价格为市价：取最新价格，买一价, 卖一价 三者间的中位数\n    priceVal: function priceVal() {\n      // 市价\n      if (this.currentCategory === 2 || this.isMarket) {\n        return this.activeNewPrice;\n      } // 限价\n\n\n      return this.inputPrice;\n    },\n    // 最大可买\n    maxBuyNumber: function maxBuyNumber() {\n      //  正向 & 张数\n      if (!this.canUseAmount || !this.V1Buy || !this.priceVal || this.V1Buy.toString() === 'NaN') {\n        return 0;\n      }\n\n      if (this.contractSide === 1 && this.coUnitType === 2) {\n        // V1Buy * 保证金汇率 / (最新价格 * 合约面值)\n        return division(nul(this.V1Buy, this.marginRate), nul(this.priceVal, this.multiplier));\n      } // 反向 & 张数\n\n\n      if (this.contractSide === 0 && this.coUnitType === 2) {\n        // V1Buy * 价格 / 面值\n        return division(nul(this.V1Buy, this.priceVal), this.multiplier);\n      } // 正向 & 量\n\n\n      if (this.contractSide === 1 && this.coUnitType === 1) {\n        // V1Buy * 保证金汇率 / 价格\n        return division(nul(this.V1Buy, this.marginRate), this.priceVal);\n      } // 反向 & 量\n\n\n      if (this.contractSide === 0 && this.coUnitType === 1) {\n        // V1Buy * 价格\n        return nul(this.V1Buy, this.priceVal);\n      }\n\n      return 0;\n    },\n    // 最大可卖\n    maxSellNumber: function maxSellNumber() {\n      if (!this.canUseAmount || !this.V1Sell || !this.priceVal || this.V1Sell.toString() === 'NaN') {\n        return 0;\n      } //  正向 & 张数\n\n\n      if (this.contractSide === 1 && this.coUnitType === 2) {\n        // V1Sell * 保证金汇率 / (最新价格 * 合约面值)\n        return division(nul(this.V1Sell, this.marginRate), nul(this.priceVal, this.multiplier));\n      } // 反向 & 张数\n\n\n      if (this.contractSide === 0 && this.coUnitType === 2) {\n        // V1Sell * 价格 / 面值\n        return division(nul(this.V1Sell, this.priceVal), this.multiplier);\n      } // 正向 & 量\n\n\n      if (this.contractSide === 1 && this.coUnitType === 1) {\n        // V1Sell * 保证金汇率 / 价格\n        return division(nul(this.V1Sell, this.marginRate), this.priceVal);\n      } // 反向 & 量\n\n\n      if (this.contractSide === 0 && this.coUnitType === 1) {\n        // V1Sell  价格\n        return nul(this.V1Sell, this.priceVal);\n      }\n\n      return 0;\n    },\n    // 根据可用余额计算的最大可开\n    // 正向：最大可开 = （可用余额 *杠杆/汇率）/(价格*合约面值)\n    // 反向：最大可开 = 可用余额 *杠杆*价格/合约面值\n    // 根据可用余额计算的最大可开（量）：\n    // 正向：最大可开 = （可用余额 *杠杆/汇率）/价格\n    // 反向：最大可开 = 可用余额 *杠杆*价格\n    // 价格取值规则：\n    // 委托价格为限价：用户设置的限价价格\n    // 委托价格为市价：取最新价格，买一价, 卖一价 三者间的中位数\n    calculateMaxNumber: function calculateMaxNumber() {\n      if (!this.canUseAmount || !this.priceVal) return 0; // 正向\n\n      if (this.contractSide === 1) {\n        // 可用余额 * 杠杆 / 汇率\n        var V1 = division(nul(this.canUseAmount, this.nowLevel), this.marginRate); // 张\n\n        if (this.coUnitType === 2) {\n          // 价格 * 合约面值\n          var v2 = nul(this.priceVal, this.multiplier);\n          return division(V1, v2);\n        } // 量 （可用余额 *杠杆/汇率）/价格\n\n\n        return division(V1, this.priceVal);\n      } // 反向\n      // 量\n      // 可用余额 * 杠杆* 价格\n\n\n      var V3 = nul(nul(this.canUseAmount, this.nowLevel), this.priceVal);\n\n      if (this.coUnitType === 1) {\n        return V3;\n      }\n\n      return division(V3, this.multiplier);\n    },\n    // 买入可平数量\n    maxCloseBuy: function maxCloseBuy() {\n      var number = 0;\n      var canClose = 0;\n\n      if (this.activeCanClose && this.activeCanClose.BUY) {\n        canClose = this.activeCanClose.BUY;\n      } // 张\n\n\n      if (this.coUnitType === 2) {\n        number = canClose;\n      } else {\n        // 量\n        number = nul(canClose, this.multiplier);\n      }\n\n      return number < 0 ? 0 : number;\n    },\n    // 卖出可平数量\n    maxCloseSell: function maxCloseSell() {\n      var number = 0;\n      var canClose = 0;\n\n      if (this.activeCanClose && this.activeCanClose.SELL) {\n        canClose = this.activeCanClose.SELL;\n      } // 张\n\n\n      if (this.coUnitType === 2) {\n        number = canClose;\n      } else {\n        // 量\n        number = nul(canClose, this.multiplier);\n      }\n\n      return number < 0 ? 0 : number;\n    },\n    // 可买 || 可平\n    maxCanBuyNumber: function maxCanBuyNumber() {\n      // 平仓 || 只减仓\n      if (this.transactionType === 2 || this.zhiJianCang) {\n        return fixD(this.maxCloseSell, this.volfix);\n      }\n\n      var number = this.calculateMaxNumber < this.maxBuyNumber ? this.calculateMaxNumber : this.maxBuyNumber;\n      if (number < 0) return 0;\n      return fixD(number, this.volfix);\n    },\n    // 可卖 || 可平\n    maxCanSellNumber: function maxCanSellNumber() {\n      // 平仓 || 只减仓\n      if (this.transactionType === 2 || this.zhiJianCang) {\n        return fixD(this.maxCloseBuy, this.volfix);\n      }\n\n      var number = this.calculateMaxNumber < this.maxSellNumber ? this.calculateMaxNumber : this.maxSellNumber;\n      if (number < 0) return 0;\n      return fixD(number, this.volfix);\n    },\n    // 买入成本\n    canBuyCostNumber: function canBuyCostNumber() {\n      if (this.isLogin) {\n        return fixD(this.calculateCostNumber('BUY'), this.marginCoinFix);\n      }\n\n      return 0;\n    },\n    // 卖出成本\n    canSellCostNumber: function canSellCostNumber() {\n      if (this.isLogin) {\n        return fixD(this.calculateCostNumber('SELL'), this.marginCoinFix);\n      }\n\n      return 0;\n    } // // 计算公式参数\n    // calculateParameter() {\n    //   // 可用 杠杆 输入的限价 触发价格 保证金汇率 合约面值 可平数量\n    //   // 数量单位类型1标的货币, 2张 订单类型(限价、市价)  是否条件单市价\n    //   // 是否只减仓 合约方向（1正向、0反向）  双向持仓中的1开仓2平仓 当前合约平均价格 张数或者市价的开仓价值\n    //   return {\n    //     canUseAmount: this.canUseAmount, // 可用\n    //     nowLevel: this.nowLevel, // 当前合约杠杆\n    //     price: this.inputPrice, // 输入的限价\n    //     triggerPrice: this.triggerPrice, // 条件单的触发价\n    //     marginRate: this.marginRate, // 保证金汇率\n    //     multiplier: this.multiplier, // 合约面值\n    //     activeCanClose: this.activeCanClose, // 可平数量(对象，可凭多、可凭空)\n    //     coUnitType: this.coUnitType, // 数量单位类型1标的货币, 2张\n    //     currentCategory: this.currentCategory, // 订单类型(限价、2市价)\n    //     isMarket: this.isMarket, // 是否条件单市价\n    //     zhiJianCang: this.zhiJianCang, // 是否只减仓\n    //     contractSide: this.contractSide, // 合约方向（1正向、0反向）\n    //     transactionType: this.transactionType, // 双向持仓中的 1开仓 2 平仓\n    //     activeNewPrice: this.activeNewPrice, // 当前合约平均价格\n    //     volume: this.inputVolume, // 张数或者市价的开仓价值\n    //   };\n    // },\n    // // 可买 、可平多 数量\n    // canBuyNumber() {\n    //   if (this.isLogin && this.canUseAmount) {\n    //     return fixD(calculateVolume('BUY', this.calculateParameter), this.volfix);\n    //   }\n    //   return 0;\n    // },\n    // // 可卖、可平空 数量\n    // canSellNumber() {\n    //   if (this.isLogin && Number(this.canUseAmount)) {\n    //     return fixD(calculateVolume('SELL', this.calculateParameter), this.volfix);\n    //   }\n    //   return 0;\n    // },\n\n  },\n  methods: {\n    calculateCostNumber: function calculateCostNumber(type) {\n      var volume = this.inputVolume;\n\n      if (this.percentageVlaue) {\n        volume = this.countPercentageVlaue(type);\n      }\n\n      var number = 0; // 平仓 || 只减仓 （仓位价值）\n\n      if (this.transactionType === 2 || this.zhiJianCang) return 0; // 限价单 or 条件限价单 （数量）\n\n      if (this.currentCategory === 1 || this.currentCategory === 3 && !this.isMarket) {\n        if (!this.inputPrice) return 0; // 反向 = 张数 * 面值 / 限价 / 杠杆 * 保证金汇率\n\n        number = nul(division(division(nul(volume, this.multiplier), this.inputPrice), this.nowLevel), this.marginRate); // 正向 | 张数 * 面值 * 限价 / 杠杆 * 保证金汇率\n\n        if (this.contractSide === 1) {\n          number = nul(division(nul(nul(volume, this.multiplier), this.inputPrice), this.nowLevel), this.marginRate);\n        }\n\n        return number;\n      } // 市价单 or 添加市价单\n\n\n      if (this.currentCategory === 2 || this.currentCategory === 3 && this.isMarket) {\n        // 反向 | 正向 = 开仓价值 / 杠杆 8 保证金汇率\n        number = nul(division(volume, this.nowLevel), this.marginRate);\n        return number;\n      }\n\n      return number;\n    }\n  }\n};",null]}