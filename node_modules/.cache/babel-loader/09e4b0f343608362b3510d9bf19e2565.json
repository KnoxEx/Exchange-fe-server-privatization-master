{"remainingRequest":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/input_line/InputLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/h/partTimeJob/blockchain-ui-privatization/PC/components/input_line/InputLine.vue","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/babel.config.js","mtime":1620459862000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/h/partTimeJob/exchange-fe-server-privatization-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'c-inputLine',\n  data: function data() {\n    return {\n      isFocus: false,\n      // 是否获取焦点\n      isHover: false,\n      // 是否划过\n      inputWidth: 0,\n      // input宽度\n      slotWidth: 0,\n      focusTime: null,\n      nowType: 'text'\n    };\n  },\n  props: {\n    maxLength: {\n      default: '100000',\n      type: String\n    },\n    // 最大长度\n    name: {\n      default: '',\n      type: String\n    },\n    // 名称标识\n    className: {\n      default: '',\n      type: String\n    },\n    // class根容器\n    value: {\n      default: '',\n      type: String\n    },\n    // 外部 v-model 传入的植\n    width: {\n      default: '100%',\n      type: String\n    },\n    // 该容器根容器 width属性 (***务必加单位***)\n    marginTop: {\n      default: '0px',\n      type: String\n    },\n    // 该组件根容器 margin-top属性 (***务必加单位***)\n    inputType: {\n      default: 'text',\n      type: String\n    },\n    // input框 type属性\n    promptText: {\n      default: '',\n      type: String\n    },\n    // 提示文案\n    disabled: {\n      default: false,\n      type: Boolean\n    },\n    // 是否为只读\n    errorHave: {\n      default: false,\n      type: Boolean\n    },\n    // 是否有错误文案\n    errorText: {\n      default: '错误提示',\n      type: String\n    },\n    // 错误文案\n    errorFlag: {\n      default: false,\n      type: Boolean\n    },\n    // 错误文案是否显示\n    warningText: {\n      default: '',\n      type: String\n    },\n    // 是否有警示文案\n    hasSpaces: {\n      default: false,\n      type: Boolean\n    },\n    // 是否允许空格\n    isLogin: {\n      default: false,\n      type: Boolean\n    },\n    activeHideTitle: {\n      default: false,\n      type: Boolean\n    } // 选中时 是否展示title\n\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$bus.$off('inputLine-focus');\n    this.$bus.$on('inputLine-focus', function (name) {\n      if (name === _this.name) {\n        _this.$refs.inputLine.focus();\n      }\n    });\n\n    if (this.isLogin) {\n      this.nowType = this.inputType;\n    }\n  },\n  computed: {\n    activeHideTitleFitler: function activeHideTitleFitler() {\n      var flag = true;\n\n      if (this.activeHideTitle) {\n        if (this.isFocus || this.curValue.length) {\n          flag = false;\n        }\n      }\n\n      return flag;\n    },\n    curValue: {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(v) {\n        var value = v; // 限制空格\n\n        if (this.hasSpaces) {\n          if (value.indexOf(' ') !== -1) {\n            var arr = value.split(' ');\n            var str = '';\n            arr.forEach(function (item) {\n              str += item;\n            });\n            value = str;\n            this.$forceUpdate();\n          }\n        }\n\n        this.$emit('onchanges', value, this.name);\n      }\n    },\n    warningFlag: function warningFlag() {\n      var flag = false;\n\n      if (this.warningText.length) {\n        if (!(this.errorFlag && !this.isFocus)) {\n          flag = true;\n        }\n      }\n\n      return flag;\n    },\n    // 根容器 行内样式\n    contentStyle: function contentStyle() {\n      return {\n        width: this.width,\n        marginTop: this.marginTop\n      };\n    },\n    // 基础占位容器 class\n    baseStanceClass: function baseStanceClass() {\n      // 禁止时\n      if (this.disabled) {\n        return 'input-line-baseStance-disabled';\n      } // 错误时\n\n\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        return 'input-line-baseStance-error';\n      }\n\n      return '';\n    },\n    // 提示文案 class\n    promptClass: function promptClass() {\n      var className = '';\n      var color = 'b-2-cl';\n\n      if (this.isFocus || this.value.length) {\n        className += 'input-line-prompt-active';\n      }\n\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        color = 'b-6-cl';\n      }\n\n      return \"\".concat(className, \" \").concat(color);\n    },\n    // 下横线 class\n    activeLineClass: function activeLineClass() {\n      var className = 'a-12-bg';\n\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\n        className = 'a-19-bg';\n      }\n\n      return className;\n    },\n    // 下横线 行内样式\n    activeLineStyle: function activeLineStyle() {\n      var width = 0; // input划过 / input聚焦 / 错误文案显示 时 下划线展示\n\n      if (this.isHover || this.isFocus || this.errorHave && this.errorFlag) {\n        width = '100%';\n      }\n\n      if (this.disabled) {\n        width = 0;\n      }\n\n      return {\n        width: width\n      };\n    }\n  },\n  methods: {\n    promptClick: function promptClick() {\n      if (this.focusTime) {\n        var nowTime = new Date().getTime();\n\n        if (nowTime - this.focusTime > 200) {\n          this.$refs.inputLine.focus();\n          this.focusTime = null;\n        }\n      } else {\n        this.$refs.inputLine.focus();\n      }\n    },\n    // input 鼠标划入\n    handMouseenter: function handMouseenter() {\n      this.isHover = true;\n    },\n    // input 鼠标划出\n    handMouseleave: function handMouseleave() {\n      this.isHover = false;\n    },\n    // input 获取焦点\n    handFocus: function handFocus() {\n      this.nowType = this.inputType;\n      this.$emit('focus', this.name);\n      this.isFocus = true;\n    },\n    // input 失去焦点\n    handBlur: function handBlur() {\n      this.focusTime = new Date().getTime();\n      this.$emit('blur', this.name);\n      this.isFocus = false;\n    },\n    keyup: function keyup() {\n      this.$emit('keyup', this.name);\n    }\n  }\n};",{"version":3,"sources":["InputLine.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KADA;AACA;AACA,MAAA,OAAA,EAAA,KAFA;AAEA;AACA,MAAA,UAAA,EAAA,CAHA;AAGA;AACA,MAAA,SAAA,EAAA,CAJA;AAKA,MAAA,SAAA,EAAA,IALA;AAMA,MAAA,OAAA,EAAA;AANA,KAAA;AAQA,GAXA;AAYA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,QAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KADA;AACA;AACA,IAAA,IAAA,EAAA;AAAA,MAAA,OAAA,EAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAFA;AAEA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAHA;AAGA;AACA,IAAA,KAAA,EAAA;AAAA,MAAA,OAAA,EAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAJA;AAIA;AACA,IAAA,KAAA,EAAA;AAAA,MAAA,OAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KALA;AAKA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KANA;AAMA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAPA;AAOA;AACA,IAAA,UAAA,EAAA;AAAA,MAAA,OAAA,EAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KARA;AAQA;AACA,IAAA,QAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KATA;AASA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAVA;AAUA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,MAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAXA;AAWA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAZA;AAYA;AACA,IAAA,WAAA,EAAA;AAAA,MAAA,OAAA,EAAA,EAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAbA;AAaA;AACA,IAAA,SAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAdA;AAcA;AACA,IAAA,OAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAfA;AAgBA,IAAA,eAAA,EAAA;AAAA,MAAA,OAAA,EAAA,KAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAhBA,CAgBA;;AAhBA,GAZA;AA8BA,EAAA,OA9BA,qBA8BA;AAAA;;AACA,SAAA,IAAA,CAAA,IAAA,CAAA,iBAAA;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,iBAAA,EAAA,UAAA,IAAA,EAAA;AACA,UAAA,IAAA,KAAA,KAAA,CAAA,IAAA,EAAA;AACA,QAAA,KAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA;AACA;AACA,KAJA;;AAKA,QAAA,KAAA,OAAA,EAAA;AACA,WAAA,OAAA,GAAA,KAAA,SAAA;AACA;AACA,GAxCA;AAyCA,EAAA,QAAA,EAAA;AACA,IAAA,qBADA,mCACA;AACA,UAAA,IAAA,GAAA,IAAA;;AACA,UAAA,KAAA,eAAA,EAAA;AACA,YAAA,KAAA,OAAA,IAAA,KAAA,QAAA,CAAA,MAAA,EAAA;AACA,UAAA,IAAA,GAAA,KAAA;AACA;AACA;;AACA,aAAA,IAAA;AACA,KATA;AAUA,IAAA,QAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,KAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,CAJA,EAIA;AACA,YAAA,KAAA,GAAA,CAAA,CADA,CAEA;;AACA,YAAA,KAAA,SAAA,EAAA;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,GAAA,MAAA,CAAA,CAAA,EAAA;AACA,gBAAA,GAAA,GAAA,KAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,gBAAA,GAAA,GAAA,EAAA;AACA,YAAA,GAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,GAAA,IAAA,IAAA;AACA,aAFA;AAGA,YAAA,KAAA,GAAA,GAAA;AACA,iBAAA,YAAA;AACA;AACA;;AACA,aAAA,KAAA,CAAA,WAAA,EAAA,KAAA,EAAA,KAAA,IAAA;AACA;AAnBA,KAVA;AA+BA,IAAA,WA/BA,yBA+BA;AACA,UAAA,IAAA,GAAA,KAAA;;AACA,UAAA,KAAA,WAAA,CAAA,MAAA,EAAA;AACA,YAAA,EAAA,KAAA,SAAA,IAAA,CAAA,KAAA,OAAA,CAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA;AACA;AACA;;AACA,aAAA,IAAA;AACA,KAvCA;AAwCA;AACA,IAAA,YAzCA,0BAyCA;AACA,aAAA;AACA,QAAA,KAAA,EAAA,KAAA,KADA;AAEA,QAAA,SAAA,EAAA,KAAA;AAFA,OAAA;AAIA,KA9CA;AA+CA;AACA,IAAA,eAhDA,6BAgDA;AACA;AACA,UAAA,KAAA,QAAA,EAAA;AACA,eAAA,gCAAA;AACA,OAJA,CAKA;;;AACA,UAAA,KAAA,SAAA,IAAA,KAAA,SAAA,IAAA,CAAA,KAAA,OAAA,EAAA;AACA,eAAA,6BAAA;AACA;;AACA,aAAA,EAAA;AACA,KA1DA;AA2DA;AACA,IAAA,WA5DA,yBA4DA;AACA,UAAA,SAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,QAAA;;AACA,UAAA,KAAA,OAAA,IAAA,KAAA,KAAA,CAAA,MAAA,EAAA;AACA,QAAA,SAAA,IAAA,0BAAA;AACA;;AACA,UAAA,KAAA,SAAA,IAAA,KAAA,SAAA,IAAA,CAAA,KAAA,OAAA,EAAA;AACA,QAAA,KAAA,GAAA,QAAA;AACA;;AACA,uBAAA,SAAA,cAAA,KAAA;AACA,KAtEA;AAuEA;AACA,IAAA,eAxEA,6BAwEA;AACA,UAAA,SAAA,GAAA,SAAA;;AACA,UAAA,KAAA,SAAA,IAAA,KAAA,SAAA,IAAA,CAAA,KAAA,OAAA,EAAA;AACA,QAAA,SAAA,GAAA,SAAA;AACA;;AACA,aAAA,SAAA;AACA,KA9EA;AA+EA;AACA,IAAA,eAhFA,6BAgFA;AACA,UAAA,KAAA,GAAA,CAAA,CADA,CAEA;;AACA,UAAA,KAAA,OAAA,IAAA,KAAA,OAAA,IAAA,KAAA,SAAA,IAAA,KAAA,SAAA,EAAA;AACA,QAAA,KAAA,GAAA,MAAA;AACA;;AACA,UAAA,KAAA,QAAA,EAAA;AACA,QAAA,KAAA,GAAA,CAAA;AACA;;AACA,aAAA;AACA,QAAA,KAAA,EAAA;AADA,OAAA;AAGA;AA5FA,GAzCA;AAuIA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,KAAA,SAAA,EAAA;AACA,YAAA,OAAA,GAAA,IAAA,IAAA,GAAA,OAAA,EAAA;;AACA,YAAA,OAAA,GAAA,KAAA,SAAA,GAAA,GAAA,EAAA;AACA,eAAA,KAAA,CAAA,SAAA,CAAA,KAAA;AACA,eAAA,SAAA,GAAA,IAAA;AACA;AACA,OANA,MAMA;AACA,aAAA,KAAA,CAAA,SAAA,CAAA,KAAA;AACA;AACA,KAXA;AAYA;AACA,IAAA,cAbA,4BAaA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,KAfA;AAgBA;AACA,IAAA,cAjBA,4BAiBA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,KAnBA;AAoBA;AACA,IAAA,SArBA,uBAqBA;AACA,WAAA,OAAA,GAAA,KAAA,SAAA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,KAAA,IAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,KAzBA;AA0BA;AACA,IAAA,QA3BA,sBA2BA;AACA,WAAA,SAAA,GAAA,IAAA,IAAA,GAAA,OAAA,EAAA;AACA,WAAA,KAAA,CAAA,MAAA,EAAA,KAAA,IAAA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,KA/BA;AAgCA,IAAA,KAhCA,mBAgCA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,KAAA,IAAA;AACA;AAlCA;AAvIA,CAAA","sourcesContent":["// Created by 任泽阳 on 18/12/05. // 线性输入框\r\n<template>\r\n  <section class='input-line-content' :style='contentStyle' :class='className'>\r\n    <!-- 基础占位 46px 包含下划线 -->\r\n    <div\r\n      class='input-line-baseStance a-2-bd'\r\n      :class='baseStanceClass'\r\n      ref='baseStance'\r\n    >\r\n      <div\r\n        class='input_line_inp'\r\n        @mouseenter='handMouseenter'\r\n        @mouseout='handMouseleave'\r\n      >\r\n        <div class='camouflage' v-if='nowType === \"password\" && !isLogin'>\r\n          <input type='text' class='input-camouflage' />\r\n        </div>\r\n        <!-- 输入框 -->\r\n        <input\r\n          autocomplete='new-password'\r\n          :maxlength='maxLength'\r\n          class='b-1-cl input'\r\n          :type='nowType'\r\n          required='true'\r\n          v-model='curValue'\r\n          :disabled='disabled'\r\n          @focus='handFocus'\r\n          @blur='handBlur'\r\n          @keyup.enter='keyup'\r\n          ref='inputLine'\r\n        />\r\n        <!-- 提示信息 -->\r\n        <label\r\n          v-if=\"activeHideTitleFitler\"\r\n          class='input-line-prompt'\r\n          :class='promptClass'\r\n          @click='promptClick'\r\n          >{{ promptText }}</label\r\n        >\r\n        <div class='input-line-slot clearfix' ref='slot'>\r\n          <slot />\r\n        </div>\r\n      </div>\r\n      <!-- 选中时横线 -->\r\n      <span\r\n        class='input-line-activeLine'\r\n        :class='activeLineClass'\r\n        :style='activeLineStyle'\r\n      ></span>\r\n      <!-- 只读时 -->\r\n    </div>\r\n    <!-- 错误文案占位 24px -->\r\n    <div class='input-line-errorStence' v-if='errorHave'>\r\n      <!-- 错误信息容器 -->\r\n      <p class='input-line-error b-6-cl' v-if='errorFlag && !isFocus'>\r\n        {{ errorText }}\r\n      </p >\r\n      <!-- 警示文案 -->\r\n      <p class='input-line-warning' v-else-if='warningFlag'>\r\n        {{ warningText }}\r\n      </p >\r\n    </div>\r\n    <!-- 底部提示框 -->\r\n    <div class='input-line-limit'></div>\r\n  </section>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: 'c-inputLine',\r\n  data() {\r\n    return {\r\n      isFocus: false, // 是否获取焦点\r\n      isHover: false, // 是否划过\r\n      inputWidth: 0, // input宽度\r\n      slotWidth: 0,\r\n      focusTime: null,\r\n      nowType: 'text',\r\n    };\r\n  },\r\n  props: {\r\n    maxLength: { default: '100000', type: String }, // 最大长度\r\n    name: { default: '', type: String }, // 名称标识\r\n    className: { default: '', type: String }, // class根容器\r\n    value: { default: '', type: String }, // 外部 v-model 传入的植\r\n    width: { default: '100%', type: String }, // 该容器根容器 width属性 (***务必加单位***)\r\n    marginTop: { default: '0px', type: String }, // 该组件根容器 margin-top属性 (***务必加单位***)\r\n    inputType: { default: 'text', type: String }, // input框 type属性\r\n    promptText: { default: '', type: String }, // 提示文案\r\n    disabled: { default: false, type: Boolean }, // 是否为只读\r\n    errorHave: { default: false, type: Boolean }, // 是否有错误文案\r\n    errorText: { default: '错误提示', type: String }, // 错误文案\r\n    errorFlag: { default: false, type: Boolean }, // 错误文案是否显示\r\n    warningText: { default: '', type: String }, // 是否有警示文案\r\n    hasSpaces: { default: false, type: Boolean }, // 是否允许空格\r\n    isLogin: { default: false, type: Boolean },\r\n    activeHideTitle: { default: false, type: Boolean }, // 选中时 是否展示title\r\n  },\r\n  created() {\r\n    this.$bus.$off('inputLine-focus');\r\n    this.$bus.$on('inputLine-focus', (name) => {\r\n      if (name === this.name) {\r\n        this.$refs.inputLine.focus();\r\n      }\r\n    });\r\n    if (this.isLogin) {\r\n      this.nowType = this.inputType;\r\n    }\r\n  },\r\n  computed: {\r\n    activeHideTitleFitler() {\r\n      let flag = true;\r\n      if (this.activeHideTitle) {\r\n        if (this.isFocus || this.curValue.length) {\r\n          flag = false;\r\n        }\r\n      }\r\n      return flag;\r\n    },\r\n    curValue: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(v) {\r\n        let value = v;\r\n        // 限制空格\r\n        if (this.hasSpaces) {\r\n          if (value.indexOf(' ') !== -1) {\r\n            const arr = value.split(' ');\r\n            let str = '';\r\n            arr.forEach((item) => {\r\n              str += item;\r\n            });\r\n            value = str;\r\n            this.$forceUpdate();\r\n          }\r\n        }\r\n        this.$emit('onchanges', value, this.name);\r\n      },\r\n    },\r\n    warningFlag() {\r\n      let flag = false;\r\n      if (this.warningText.length) {\r\n        if (!(this.errorFlag && !this.isFocus)) {\r\n          flag = true;\r\n        }\r\n      }\r\n      return flag;\r\n    },\r\n    // 根容器 行内样式\r\n    contentStyle() {\r\n      return {\r\n        width: this.width,\r\n        marginTop: this.marginTop,\r\n      };\r\n    },\r\n    // 基础占位容器 class\r\n    baseStanceClass() {\r\n      // 禁止时\r\n      if (this.disabled) {\r\n        return 'input-line-baseStance-disabled';\r\n      }\r\n      // 错误时\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        return 'input-line-baseStance-error';\r\n      }\r\n      return '';\r\n    },\r\n    // 提示文案 class\r\n    promptClass() {\r\n      let className = '';\r\n      let color = 'b-2-cl';\r\n      if (this.isFocus || this.value.length) {\r\n        className += 'input-line-prompt-active';\r\n      }\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        color = 'b-6-cl';\r\n      }\r\n      return `${className} ${color}`;\r\n    },\r\n    // 下横线 class\r\n    activeLineClass() {\r\n      let className = 'a-12-bg';\r\n      if (this.errorHave && this.errorFlag && !this.isFocus) {\r\n        className = 'a-19-bg';\r\n      }\r\n      return className;\r\n    },\r\n    // 下横线 行内样式\r\n    activeLineStyle() {\r\n      let width = 0;\r\n      // input划过 / input聚焦 / 错误文案显示 时 下划线展示\r\n      if (this.isHover || this.isFocus || (this.errorHave && this.errorFlag)) {\r\n        width = '100%';\r\n      }\r\n      if (this.disabled) {\r\n        width = 0;\r\n      }\r\n      return {\r\n        width,\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    promptClick() {\r\n      if (this.focusTime) {\r\n        const nowTime = new Date().getTime();\r\n        if (nowTime - this.focusTime > 200) {\r\n          this.$refs.inputLine.focus();\r\n          this.focusTime = null;\r\n        }\r\n      } else {\r\n        this.$refs.inputLine.focus();\r\n      }\r\n    },\r\n    // input 鼠标划入\r\n    handMouseenter() {\r\n      this.isHover = true;\r\n    },\r\n    // input 鼠标划出\r\n    handMouseleave() {\r\n      this.isHover = false;\r\n    },\r\n    // input 获取焦点\r\n    handFocus() {\r\n      this.nowType = this.inputType;\r\n      this.$emit('focus', this.name);\r\n      this.isFocus = true;\r\n    },\r\n    // input 失去焦点\r\n    handBlur() {\r\n      this.focusTime = new Date().getTime();\r\n      this.$emit('blur', this.name);\r\n      this.isFocus = false;\r\n    },\r\n    keyup() {\r\n      this.$emit('keyup', this.name);\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style lang='stylus'>\r\ninput:-webkit-autofill,\r\ninput:-webkit-autofill:hover,\r\ninput:-webkit-autofill:focus,\r\ninput:-webkit-autofill:active {\r\n  & + * {\r\n    cursor: auto;\r\n    font-size: 12px !important;\r\n    transform: translate3d(0, -20px, 0);\r\n    transform-origin: top left;\r\n  }\r\n}\r\n  .input-line-content {\r\n    // 基础占位容器 (默认)\r\n    .input-line-baseStance {\r\n      height: 46px;\r\n      box-sizing: border-box;\r\n      border-bottom-width: 2px;\r\n      border-bottom-style: solid;\r\n      position: relative;\r\n      .camouflage {\r\n        position: absolute;\r\n        width: 0;\r\n        height: 0;\r\n        overflow: hidden;\r\n      }\r\n      // 输入框\r\n      .input_line_inp {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        // z-index: 2;\r\n        width: 100%;\r\n        border: 0px;\r\n        font-size: 14px;\r\n        height: 30px;\r\n        background: none;\r\n        box-sizing: border-box;\r\n        outline: none;\r\n        .input {\r\n          height: 30px;\r\n          width: 100%;\r\n          font-size: 14px;\r\n        }\r\n        .input-line-slot {\r\n          float: left;\r\n          display: inline-block;\r\n          position: absolute;\r\n          height: auto;\r\n          right: 0;\r\n          bottom: 0;\r\n        }\r\n      }\r\n      // 提示文案容器\r\n      .input-line-prompt {\r\n        cursor: text;\r\n        z-index: 1;\r\n        position: absolute;\r\n        height: 30px;\r\n        line-height: 30px;\r\n        bottom: 0px;\r\n        left: 0;\r\n        font-size: 14px;\r\n        transition: transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;\r\n        transform-style: preserve-3d;\r\n        transform-origin: top left;\r\n        backface-visibility hidden\r\n        user-select:none;\r\n      }\r\n      // input聚焦/具有文本 时 提示文案浮起\r\n      .input-line-prompt-active {\r\n        cursor: auto;\r\n        font-size: 12px;\r\n        transform: translate3d(0, -20px, 0);\r\n        transform-origin: top left;\r\n      }\r\n      // 下划线动效容器\r\n      .input-line-activeLine {\r\n        position: absolute;\r\n        z-index: 3;\r\n        // top: 43px;\r\n        bottom: -2px;\r\n        height: 2px;\r\n        width: 0;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        display: inline-block;\r\n        transition: 0.5s;\r\n        -webkit-transition: 0.5s;\r\n        -ms-transition: 0.5s;\r\n        animation-delay: 0.5s\r\n        -webkit-animation-delay: 0.5s\r\n        -ms-animation-delay: 0.5s\r\n      }\r\n    }\r\n    // 基础占位容器 (禁用时)\r\n    .input-line-baseStance-disabled {\r\n      border-bottom-width: 2px;\r\n      border-bottom-style: dotted;\r\n      .input-line-prompt-active {\r\n        cursor: no-drop;\r\n      }\r\n      input {\r\n        cursor: no-drop;\r\n      }\r\n    }\r\n    // 基础占位容器 (错误时)\r\n    .input-line-baseStance-error {\r\n      // 提示文案容器 (错误时)\r\n      .input-line-prompt {\r\n        animation: shakes 0.6s cubic-bezier(0.25, 0.8, 0.5, 1);\r\n      }\r\n    }\r\n    // 错误信息占位容器\r\n    .input-line-errorStence {\r\n      height: 24px;\r\n      position: relative;\r\n      // 错误文案容器\r\n      .input-line-error {\r\n        position: absolute;\r\n        top: 2px;\r\n        margin: 0;\r\n        font-size: 12px;\r\n        user-select:none;\r\n      }\r\n      // 警示框\r\n      .input-line-warning {\r\n        position: absolute;\r\n        bottom: 5px;\r\n        font-size: 12px;\r\n      }\r\n    }\r\n\r\n    .input_line_inp:focus+.input-line-prompt,\r\n    .input_line_inp:valid+.input-line-prompt {\r\n    }\r\n    // 错误 label 抖动 动画\r\n    @-webkit-keyframes shakes {\r\n      59% {\r\n        margin-left: 0;\r\n      }\r\n      60%, 80% {\r\n        margin-left: 2px;\r\n      }\r\n      70%, 90% {\r\n        margin-left: -2px;\r\n      }\r\n    }\r\n    @keyframes shakes {\r\n      59% {\r\n        margin-left: 0;\r\n      }\r\n      60%, 80% {\r\n        margin-left: 2px;\r\n      }\r\n      70%, 90% {\r\n        margin-left: -2px;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n"],"sourceRoot":"../blockchain-ui-privatization/PC/components/input_line"}]}